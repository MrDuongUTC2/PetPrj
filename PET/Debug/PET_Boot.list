
PET_Boot.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00002c3c  08000188  08000188  00010188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000090  08002dc4  08002dc4  00012dc4  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08002e54  08002e54  00020070  2**0
                  CONTENTS
  4 .ARM          00000008  08002e54  08002e54  00012e54  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08002e5c  08002e5c  00020070  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08002e5c  08002e5c  00012e5c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08002e60  08002e60  00012e60  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000070  20000000  08002e64  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  00020070  2**0
                  CONTENTS
 10 .bss          00000078  20000070  20000070  00020070  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200000e8  200000e8  00020070  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  00020070  2**0
                  CONTENTS, READONLY
 13 .debug_info   00008590  00000000  00000000  000200a0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000165e  00000000  00000000  00028630  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000708  00000000  00000000  00029c90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000670  00000000  00000000  0002a398  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00020d6d  00000000  00000000  0002aa08  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000089ec  00000000  00000000  0004b775  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000c3b5f  00000000  00000000  00054161  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00117cc0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  000021b8  00000000  00000000  00117d10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	; (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	; (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	; (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	20000070 	.word	0x20000070
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08002dac 	.word	0x08002dac

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	; (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	; (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	; (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000074 	.word	0x20000074
 80001c4:	08002dac 	.word	0x08002dac

080001c8 <__aeabi_uldivmod>:
 80001c8:	b953      	cbnz	r3, 80001e0 <__aeabi_uldivmod+0x18>
 80001ca:	b94a      	cbnz	r2, 80001e0 <__aeabi_uldivmod+0x18>
 80001cc:	2900      	cmp	r1, #0
 80001ce:	bf08      	it	eq
 80001d0:	2800      	cmpeq	r0, #0
 80001d2:	bf1c      	itt	ne
 80001d4:	f04f 31ff 	movne.w	r1, #4294967295
 80001d8:	f04f 30ff 	movne.w	r0, #4294967295
 80001dc:	f000 b974 	b.w	80004c8 <__aeabi_idiv0>
 80001e0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001e8:	f000 f806 	bl	80001f8 <__udivmoddi4>
 80001ec:	f8dd e004 	ldr.w	lr, [sp, #4]
 80001f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80001f4:	b004      	add	sp, #16
 80001f6:	4770      	bx	lr

080001f8 <__udivmoddi4>:
 80001f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80001fc:	9d08      	ldr	r5, [sp, #32]
 80001fe:	4604      	mov	r4, r0
 8000200:	468e      	mov	lr, r1
 8000202:	2b00      	cmp	r3, #0
 8000204:	d14d      	bne.n	80002a2 <__udivmoddi4+0xaa>
 8000206:	428a      	cmp	r2, r1
 8000208:	4694      	mov	ip, r2
 800020a:	d969      	bls.n	80002e0 <__udivmoddi4+0xe8>
 800020c:	fab2 f282 	clz	r2, r2
 8000210:	b152      	cbz	r2, 8000228 <__udivmoddi4+0x30>
 8000212:	fa01 f302 	lsl.w	r3, r1, r2
 8000216:	f1c2 0120 	rsb	r1, r2, #32
 800021a:	fa20 f101 	lsr.w	r1, r0, r1
 800021e:	fa0c fc02 	lsl.w	ip, ip, r2
 8000222:	ea41 0e03 	orr.w	lr, r1, r3
 8000226:	4094      	lsls	r4, r2
 8000228:	ea4f 481c 	mov.w	r8, ip, lsr #16
 800022c:	0c21      	lsrs	r1, r4, #16
 800022e:	fbbe f6f8 	udiv	r6, lr, r8
 8000232:	fa1f f78c 	uxth.w	r7, ip
 8000236:	fb08 e316 	mls	r3, r8, r6, lr
 800023a:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800023e:	fb06 f107 	mul.w	r1, r6, r7
 8000242:	4299      	cmp	r1, r3
 8000244:	d90a      	bls.n	800025c <__udivmoddi4+0x64>
 8000246:	eb1c 0303 	adds.w	r3, ip, r3
 800024a:	f106 30ff 	add.w	r0, r6, #4294967295
 800024e:	f080 811f 	bcs.w	8000490 <__udivmoddi4+0x298>
 8000252:	4299      	cmp	r1, r3
 8000254:	f240 811c 	bls.w	8000490 <__udivmoddi4+0x298>
 8000258:	3e02      	subs	r6, #2
 800025a:	4463      	add	r3, ip
 800025c:	1a5b      	subs	r3, r3, r1
 800025e:	b2a4      	uxth	r4, r4
 8000260:	fbb3 f0f8 	udiv	r0, r3, r8
 8000264:	fb08 3310 	mls	r3, r8, r0, r3
 8000268:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800026c:	fb00 f707 	mul.w	r7, r0, r7
 8000270:	42a7      	cmp	r7, r4
 8000272:	d90a      	bls.n	800028a <__udivmoddi4+0x92>
 8000274:	eb1c 0404 	adds.w	r4, ip, r4
 8000278:	f100 33ff 	add.w	r3, r0, #4294967295
 800027c:	f080 810a 	bcs.w	8000494 <__udivmoddi4+0x29c>
 8000280:	42a7      	cmp	r7, r4
 8000282:	f240 8107 	bls.w	8000494 <__udivmoddi4+0x29c>
 8000286:	4464      	add	r4, ip
 8000288:	3802      	subs	r0, #2
 800028a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800028e:	1be4      	subs	r4, r4, r7
 8000290:	2600      	movs	r6, #0
 8000292:	b11d      	cbz	r5, 800029c <__udivmoddi4+0xa4>
 8000294:	40d4      	lsrs	r4, r2
 8000296:	2300      	movs	r3, #0
 8000298:	e9c5 4300 	strd	r4, r3, [r5]
 800029c:	4631      	mov	r1, r6
 800029e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002a2:	428b      	cmp	r3, r1
 80002a4:	d909      	bls.n	80002ba <__udivmoddi4+0xc2>
 80002a6:	2d00      	cmp	r5, #0
 80002a8:	f000 80ef 	beq.w	800048a <__udivmoddi4+0x292>
 80002ac:	2600      	movs	r6, #0
 80002ae:	e9c5 0100 	strd	r0, r1, [r5]
 80002b2:	4630      	mov	r0, r6
 80002b4:	4631      	mov	r1, r6
 80002b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002ba:	fab3 f683 	clz	r6, r3
 80002be:	2e00      	cmp	r6, #0
 80002c0:	d14a      	bne.n	8000358 <__udivmoddi4+0x160>
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d302      	bcc.n	80002cc <__udivmoddi4+0xd4>
 80002c6:	4282      	cmp	r2, r0
 80002c8:	f200 80f9 	bhi.w	80004be <__udivmoddi4+0x2c6>
 80002cc:	1a84      	subs	r4, r0, r2
 80002ce:	eb61 0303 	sbc.w	r3, r1, r3
 80002d2:	2001      	movs	r0, #1
 80002d4:	469e      	mov	lr, r3
 80002d6:	2d00      	cmp	r5, #0
 80002d8:	d0e0      	beq.n	800029c <__udivmoddi4+0xa4>
 80002da:	e9c5 4e00 	strd	r4, lr, [r5]
 80002de:	e7dd      	b.n	800029c <__udivmoddi4+0xa4>
 80002e0:	b902      	cbnz	r2, 80002e4 <__udivmoddi4+0xec>
 80002e2:	deff      	udf	#255	; 0xff
 80002e4:	fab2 f282 	clz	r2, r2
 80002e8:	2a00      	cmp	r2, #0
 80002ea:	f040 8092 	bne.w	8000412 <__udivmoddi4+0x21a>
 80002ee:	eba1 010c 	sub.w	r1, r1, ip
 80002f2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f6:	fa1f fe8c 	uxth.w	lr, ip
 80002fa:	2601      	movs	r6, #1
 80002fc:	0c20      	lsrs	r0, r4, #16
 80002fe:	fbb1 f3f7 	udiv	r3, r1, r7
 8000302:	fb07 1113 	mls	r1, r7, r3, r1
 8000306:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800030a:	fb0e f003 	mul.w	r0, lr, r3
 800030e:	4288      	cmp	r0, r1
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x12c>
 8000312:	eb1c 0101 	adds.w	r1, ip, r1
 8000316:	f103 38ff 	add.w	r8, r3, #4294967295
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x12a>
 800031c:	4288      	cmp	r0, r1
 800031e:	f200 80cb 	bhi.w	80004b8 <__udivmoddi4+0x2c0>
 8000322:	4643      	mov	r3, r8
 8000324:	1a09      	subs	r1, r1, r0
 8000326:	b2a4      	uxth	r4, r4
 8000328:	fbb1 f0f7 	udiv	r0, r1, r7
 800032c:	fb07 1110 	mls	r1, r7, r0, r1
 8000330:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000334:	fb0e fe00 	mul.w	lr, lr, r0
 8000338:	45a6      	cmp	lr, r4
 800033a:	d908      	bls.n	800034e <__udivmoddi4+0x156>
 800033c:	eb1c 0404 	adds.w	r4, ip, r4
 8000340:	f100 31ff 	add.w	r1, r0, #4294967295
 8000344:	d202      	bcs.n	800034c <__udivmoddi4+0x154>
 8000346:	45a6      	cmp	lr, r4
 8000348:	f200 80bb 	bhi.w	80004c2 <__udivmoddi4+0x2ca>
 800034c:	4608      	mov	r0, r1
 800034e:	eba4 040e 	sub.w	r4, r4, lr
 8000352:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000356:	e79c      	b.n	8000292 <__udivmoddi4+0x9a>
 8000358:	f1c6 0720 	rsb	r7, r6, #32
 800035c:	40b3      	lsls	r3, r6
 800035e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000362:	ea4c 0c03 	orr.w	ip, ip, r3
 8000366:	fa20 f407 	lsr.w	r4, r0, r7
 800036a:	fa01 f306 	lsl.w	r3, r1, r6
 800036e:	431c      	orrs	r4, r3
 8000370:	40f9      	lsrs	r1, r7
 8000372:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000376:	fa00 f306 	lsl.w	r3, r0, r6
 800037a:	fbb1 f8f9 	udiv	r8, r1, r9
 800037e:	0c20      	lsrs	r0, r4, #16
 8000380:	fa1f fe8c 	uxth.w	lr, ip
 8000384:	fb09 1118 	mls	r1, r9, r8, r1
 8000388:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 800038c:	fb08 f00e 	mul.w	r0, r8, lr
 8000390:	4288      	cmp	r0, r1
 8000392:	fa02 f206 	lsl.w	r2, r2, r6
 8000396:	d90b      	bls.n	80003b0 <__udivmoddi4+0x1b8>
 8000398:	eb1c 0101 	adds.w	r1, ip, r1
 800039c:	f108 3aff 	add.w	sl, r8, #4294967295
 80003a0:	f080 8088 	bcs.w	80004b4 <__udivmoddi4+0x2bc>
 80003a4:	4288      	cmp	r0, r1
 80003a6:	f240 8085 	bls.w	80004b4 <__udivmoddi4+0x2bc>
 80003aa:	f1a8 0802 	sub.w	r8, r8, #2
 80003ae:	4461      	add	r1, ip
 80003b0:	1a09      	subs	r1, r1, r0
 80003b2:	b2a4      	uxth	r4, r4
 80003b4:	fbb1 f0f9 	udiv	r0, r1, r9
 80003b8:	fb09 1110 	mls	r1, r9, r0, r1
 80003bc:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 80003c0:	fb00 fe0e 	mul.w	lr, r0, lr
 80003c4:	458e      	cmp	lr, r1
 80003c6:	d908      	bls.n	80003da <__udivmoddi4+0x1e2>
 80003c8:	eb1c 0101 	adds.w	r1, ip, r1
 80003cc:	f100 34ff 	add.w	r4, r0, #4294967295
 80003d0:	d26c      	bcs.n	80004ac <__udivmoddi4+0x2b4>
 80003d2:	458e      	cmp	lr, r1
 80003d4:	d96a      	bls.n	80004ac <__udivmoddi4+0x2b4>
 80003d6:	3802      	subs	r0, #2
 80003d8:	4461      	add	r1, ip
 80003da:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 80003de:	fba0 9402 	umull	r9, r4, r0, r2
 80003e2:	eba1 010e 	sub.w	r1, r1, lr
 80003e6:	42a1      	cmp	r1, r4
 80003e8:	46c8      	mov	r8, r9
 80003ea:	46a6      	mov	lr, r4
 80003ec:	d356      	bcc.n	800049c <__udivmoddi4+0x2a4>
 80003ee:	d053      	beq.n	8000498 <__udivmoddi4+0x2a0>
 80003f0:	b15d      	cbz	r5, 800040a <__udivmoddi4+0x212>
 80003f2:	ebb3 0208 	subs.w	r2, r3, r8
 80003f6:	eb61 010e 	sbc.w	r1, r1, lr
 80003fa:	fa01 f707 	lsl.w	r7, r1, r7
 80003fe:	fa22 f306 	lsr.w	r3, r2, r6
 8000402:	40f1      	lsrs	r1, r6
 8000404:	431f      	orrs	r7, r3
 8000406:	e9c5 7100 	strd	r7, r1, [r5]
 800040a:	2600      	movs	r6, #0
 800040c:	4631      	mov	r1, r6
 800040e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000412:	f1c2 0320 	rsb	r3, r2, #32
 8000416:	40d8      	lsrs	r0, r3
 8000418:	fa0c fc02 	lsl.w	ip, ip, r2
 800041c:	fa21 f303 	lsr.w	r3, r1, r3
 8000420:	4091      	lsls	r1, r2
 8000422:	4301      	orrs	r1, r0
 8000424:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000428:	fa1f fe8c 	uxth.w	lr, ip
 800042c:	fbb3 f0f7 	udiv	r0, r3, r7
 8000430:	fb07 3610 	mls	r6, r7, r0, r3
 8000434:	0c0b      	lsrs	r3, r1, #16
 8000436:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 800043a:	fb00 f60e 	mul.w	r6, r0, lr
 800043e:	429e      	cmp	r6, r3
 8000440:	fa04 f402 	lsl.w	r4, r4, r2
 8000444:	d908      	bls.n	8000458 <__udivmoddi4+0x260>
 8000446:	eb1c 0303 	adds.w	r3, ip, r3
 800044a:	f100 38ff 	add.w	r8, r0, #4294967295
 800044e:	d22f      	bcs.n	80004b0 <__udivmoddi4+0x2b8>
 8000450:	429e      	cmp	r6, r3
 8000452:	d92d      	bls.n	80004b0 <__udivmoddi4+0x2b8>
 8000454:	3802      	subs	r0, #2
 8000456:	4463      	add	r3, ip
 8000458:	1b9b      	subs	r3, r3, r6
 800045a:	b289      	uxth	r1, r1
 800045c:	fbb3 f6f7 	udiv	r6, r3, r7
 8000460:	fb07 3316 	mls	r3, r7, r6, r3
 8000464:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000468:	fb06 f30e 	mul.w	r3, r6, lr
 800046c:	428b      	cmp	r3, r1
 800046e:	d908      	bls.n	8000482 <__udivmoddi4+0x28a>
 8000470:	eb1c 0101 	adds.w	r1, ip, r1
 8000474:	f106 38ff 	add.w	r8, r6, #4294967295
 8000478:	d216      	bcs.n	80004a8 <__udivmoddi4+0x2b0>
 800047a:	428b      	cmp	r3, r1
 800047c:	d914      	bls.n	80004a8 <__udivmoddi4+0x2b0>
 800047e:	3e02      	subs	r6, #2
 8000480:	4461      	add	r1, ip
 8000482:	1ac9      	subs	r1, r1, r3
 8000484:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000488:	e738      	b.n	80002fc <__udivmoddi4+0x104>
 800048a:	462e      	mov	r6, r5
 800048c:	4628      	mov	r0, r5
 800048e:	e705      	b.n	800029c <__udivmoddi4+0xa4>
 8000490:	4606      	mov	r6, r0
 8000492:	e6e3      	b.n	800025c <__udivmoddi4+0x64>
 8000494:	4618      	mov	r0, r3
 8000496:	e6f8      	b.n	800028a <__udivmoddi4+0x92>
 8000498:	454b      	cmp	r3, r9
 800049a:	d2a9      	bcs.n	80003f0 <__udivmoddi4+0x1f8>
 800049c:	ebb9 0802 	subs.w	r8, r9, r2
 80004a0:	eb64 0e0c 	sbc.w	lr, r4, ip
 80004a4:	3801      	subs	r0, #1
 80004a6:	e7a3      	b.n	80003f0 <__udivmoddi4+0x1f8>
 80004a8:	4646      	mov	r6, r8
 80004aa:	e7ea      	b.n	8000482 <__udivmoddi4+0x28a>
 80004ac:	4620      	mov	r0, r4
 80004ae:	e794      	b.n	80003da <__udivmoddi4+0x1e2>
 80004b0:	4640      	mov	r0, r8
 80004b2:	e7d1      	b.n	8000458 <__udivmoddi4+0x260>
 80004b4:	46d0      	mov	r8, sl
 80004b6:	e77b      	b.n	80003b0 <__udivmoddi4+0x1b8>
 80004b8:	3b02      	subs	r3, #2
 80004ba:	4461      	add	r1, ip
 80004bc:	e732      	b.n	8000324 <__udivmoddi4+0x12c>
 80004be:	4630      	mov	r0, r6
 80004c0:	e709      	b.n	80002d6 <__udivmoddi4+0xde>
 80004c2:	4464      	add	r4, ip
 80004c4:	3802      	subs	r0, #2
 80004c6:	e742      	b.n	800034e <__udivmoddi4+0x156>

080004c8 <__aeabi_idiv0>:
 80004c8:	4770      	bx	lr
 80004ca:	bf00      	nop

080004cc <__io_putchar>:
#define PUTCHAR_PROTOTYPE int fputc(int ch, FILE *f)
#endif /* __GNUC__ */


PUTCHAR_PROTOTYPE
{
 80004cc:	b580      	push	{r7, lr}
 80004ce:	b082      	sub	sp, #8
 80004d0:	af00      	add	r7, sp, #0
 80004d2:	6078      	str	r0, [r7, #4]
  HAL_UART_Transmit(&huart2, (uint8_t *)&ch, 1, 0xFFFF);
 80004d4:	1d39      	adds	r1, r7, #4
 80004d6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80004da:	2201      	movs	r2, #1
 80004dc:	4803      	ldr	r0, [pc, #12]	; (80004ec <__io_putchar+0x20>)
 80004de:	f001 fbc1 	bl	8001c64 <HAL_UART_Transmit>

  return ch;
 80004e2:	687b      	ldr	r3, [r7, #4]
}
 80004e4:	4618      	mov	r0, r3
 80004e6:	3708      	adds	r7, #8
 80004e8:	46bd      	mov	sp, r7
 80004ea:	bd80      	pop	{r7, pc}
 80004ec:	2000008c 	.word	0x2000008c

080004f0 <MainTask>:


void MainTask()
{
 80004f0:	b580      	push	{r7, lr}
 80004f2:	af00      	add	r7, sp, #0
	printf("  We are in boot \r \n");
 80004f4:	4806      	ldr	r0, [pc, #24]	; (8000510 <MainTask+0x20>)
 80004f6:	f001 ffc9 	bl	800248c <puts>
	HAL_Delay(500);
 80004fa:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80004fe:	f000 fb3b 	bl	8000b78 <HAL_Delay>

	Deinit();
 8000502:	f000 f81d 	bl	8000540 <Deinit>
	jumpToApp(APP2_START);
 8000506:	4803      	ldr	r0, [pc, #12]	; (8000514 <MainTask+0x24>)
 8000508:	f000 f806 	bl	8000518 <jumpToApp>

}
 800050c:	bf00      	nop
 800050e:	bd80      	pop	{r7, pc}
 8000510:	08002dc4 	.word	0x08002dc4
 8000514:	0804b000 	.word	0x0804b000

08000518 <jumpToApp>:

void jumpToApp(const uint32_t address)
{
 8000518:	b480      	push	{r7}
 800051a:	b085      	sub	sp, #20
 800051c:	af00      	add	r7, sp, #0
 800051e:	6078      	str	r0, [r7, #4]
	const JumpStruct* vector_p = (JumpStruct*)address;
 8000520:	687b      	ldr	r3, [r7, #4]
 8000522:	60fb      	str	r3, [r7, #12]

	/* let's do The Jump! */
    /* Jump, used asm to avoid stack optimization */
    asm("msr msp, %0; bx %1;" : : "r"(vector_p->stack_addr), "r"(vector_p->func_p));
 8000524:	68fb      	ldr	r3, [r7, #12]
 8000526:	681b      	ldr	r3, [r3, #0]
 8000528:	68fa      	ldr	r2, [r7, #12]
 800052a:	6852      	ldr	r2, [r2, #4]
 800052c:	f383 8808 	msr	MSP, r3
 8000530:	4710      	bx	r2
}
 8000532:	bf00      	nop
 8000534:	3714      	adds	r7, #20
 8000536:	46bd      	mov	sp, r7
 8000538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800053c:	4770      	bx	lr
	...

08000540 <Deinit>:

void Deinit()
{
 8000540:	b580      	push	{r7, lr}
 8000542:	af00      	add	r7, sp, #0
	HAL_UART_DeInit(&huart2);
 8000544:	4809      	ldr	r0, [pc, #36]	; (800056c <Deinit+0x2c>)
 8000546:	f001 fb5e 	bl	8001c06 <HAL_UART_DeInit>
	  __HAL_RCC_GPIOC_CLK_DISABLE();
 800054a:	4b09      	ldr	r3, [pc, #36]	; (8000570 <Deinit+0x30>)
 800054c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800054e:	4a08      	ldr	r2, [pc, #32]	; (8000570 <Deinit+0x30>)
 8000550:	f023 0304 	bic.w	r3, r3, #4
 8000554:	6313      	str	r3, [r2, #48]	; 0x30
	  __HAL_RCC_GPIOA_CLK_DISABLE();
 8000556:	4b06      	ldr	r3, [pc, #24]	; (8000570 <Deinit+0x30>)
 8000558:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800055a:	4a05      	ldr	r2, [pc, #20]	; (8000570 <Deinit+0x30>)
 800055c:	f023 0301 	bic.w	r3, r3, #1
 8000560:	6313      	str	r3, [r2, #48]	; 0x30
	HAL_DeInit();
 8000562:	f000 fa85 	bl	8000a70 <HAL_DeInit>
}
 8000566:	bf00      	nop
 8000568:	bd80      	pop	{r7, pc}
 800056a:	bf00      	nop
 800056c:	2000008c 	.word	0x2000008c
 8000570:	40023800 	.word	0x40023800

08000574 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8000574:	b580      	push	{r7, lr}
 8000576:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000578:	f000 fa58 	bl	8000a2c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800057c:	f000 f808 	bl	8000590 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000580:	f000 f88e 	bl	80006a0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8000584:	f000 f862 	bl	800064c <MX_USART2_UART_Init>
  /* USER CODE BEGIN WHILE */
  while (1)
  {
    /* USER CODE END WHILE */

	  MainTask();
 8000588:	f7ff ffb2 	bl	80004f0 <MainTask>
 800058c:	e7fc      	b.n	8000588 <main+0x14>
	...

08000590 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000590:	b580      	push	{r7, lr}
 8000592:	b094      	sub	sp, #80	; 0x50
 8000594:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000596:	f107 0320 	add.w	r3, r7, #32
 800059a:	2230      	movs	r2, #48	; 0x30
 800059c:	2100      	movs	r1, #0
 800059e:	4618      	mov	r0, r3
 80005a0:	f001 fefe 	bl	80023a0 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80005a4:	f107 030c 	add.w	r3, r7, #12
 80005a8:	2200      	movs	r2, #0
 80005aa:	601a      	str	r2, [r3, #0]
 80005ac:	605a      	str	r2, [r3, #4]
 80005ae:	609a      	str	r2, [r3, #8]
 80005b0:	60da      	str	r2, [r3, #12]
 80005b2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80005b4:	2300      	movs	r3, #0
 80005b6:	60bb      	str	r3, [r7, #8]
 80005b8:	4b22      	ldr	r3, [pc, #136]	; (8000644 <SystemClock_Config+0xb4>)
 80005ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005bc:	4a21      	ldr	r2, [pc, #132]	; (8000644 <SystemClock_Config+0xb4>)
 80005be:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80005c2:	6413      	str	r3, [r2, #64]	; 0x40
 80005c4:	4b1f      	ldr	r3, [pc, #124]	; (8000644 <SystemClock_Config+0xb4>)
 80005c6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80005c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80005cc:	60bb      	str	r3, [r7, #8]
 80005ce:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80005d0:	2300      	movs	r3, #0
 80005d2:	607b      	str	r3, [r7, #4]
 80005d4:	4b1c      	ldr	r3, [pc, #112]	; (8000648 <SystemClock_Config+0xb8>)
 80005d6:	681b      	ldr	r3, [r3, #0]
 80005d8:	4a1b      	ldr	r2, [pc, #108]	; (8000648 <SystemClock_Config+0xb8>)
 80005da:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80005de:	6013      	str	r3, [r2, #0]
 80005e0:	4b19      	ldr	r3, [pc, #100]	; (8000648 <SystemClock_Config+0xb8>)
 80005e2:	681b      	ldr	r3, [r3, #0]
 80005e4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80005e8:	607b      	str	r3, [r7, #4]
 80005ea:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80005ec:	2302      	movs	r3, #2
 80005ee:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80005f0:	2301      	movs	r3, #1
 80005f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80005f4:	2310      	movs	r3, #16
 80005f6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80005f8:	2300      	movs	r3, #0
 80005fa:	63bb      	str	r3, [r7, #56]	; 0x38
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80005fc:	f107 0320 	add.w	r3, r7, #32
 8000600:	4618      	mov	r0, r3
 8000602:	f000 fe5b 	bl	80012bc <HAL_RCC_OscConfig>
 8000606:	4603      	mov	r3, r0
 8000608:	2b00      	cmp	r3, #0
 800060a:	d001      	beq.n	8000610 <SystemClock_Config+0x80>
  {
    Error_Handler();
 800060c:	f000 f870 	bl	80006f0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000610:	230f      	movs	r3, #15
 8000612:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 8000614:	2300      	movs	r3, #0
 8000616:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000618:	2300      	movs	r3, #0
 800061a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 800061c:	2300      	movs	r3, #0
 800061e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8000620:	2300      	movs	r3, #0
 8000622:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8000624:	f107 030c 	add.w	r3, r7, #12
 8000628:	2100      	movs	r1, #0
 800062a:	4618      	mov	r0, r3
 800062c:	f001 f8be 	bl	80017ac <HAL_RCC_ClockConfig>
 8000630:	4603      	mov	r3, r0
 8000632:	2b00      	cmp	r3, #0
 8000634:	d001      	beq.n	800063a <SystemClock_Config+0xaa>
  {
    Error_Handler();
 8000636:	f000 f85b 	bl	80006f0 <Error_Handler>
  }
}
 800063a:	bf00      	nop
 800063c:	3750      	adds	r7, #80	; 0x50
 800063e:	46bd      	mov	sp, r7
 8000640:	bd80      	pop	{r7, pc}
 8000642:	bf00      	nop
 8000644:	40023800 	.word	0x40023800
 8000648:	40007000 	.word	0x40007000

0800064c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800064c:	b580      	push	{r7, lr}
 800064e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000650:	4b11      	ldr	r3, [pc, #68]	; (8000698 <MX_USART2_UART_Init+0x4c>)
 8000652:	4a12      	ldr	r2, [pc, #72]	; (800069c <MX_USART2_UART_Init+0x50>)
 8000654:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8000656:	4b10      	ldr	r3, [pc, #64]	; (8000698 <MX_USART2_UART_Init+0x4c>)
 8000658:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800065c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800065e:	4b0e      	ldr	r3, [pc, #56]	; (8000698 <MX_USART2_UART_Init+0x4c>)
 8000660:	2200      	movs	r2, #0
 8000662:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8000664:	4b0c      	ldr	r3, [pc, #48]	; (8000698 <MX_USART2_UART_Init+0x4c>)
 8000666:	2200      	movs	r2, #0
 8000668:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800066a:	4b0b      	ldr	r3, [pc, #44]	; (8000698 <MX_USART2_UART_Init+0x4c>)
 800066c:	2200      	movs	r2, #0
 800066e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8000670:	4b09      	ldr	r3, [pc, #36]	; (8000698 <MX_USART2_UART_Init+0x4c>)
 8000672:	220c      	movs	r2, #12
 8000674:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8000676:	4b08      	ldr	r3, [pc, #32]	; (8000698 <MX_USART2_UART_Init+0x4c>)
 8000678:	2200      	movs	r2, #0
 800067a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800067c:	4b06      	ldr	r3, [pc, #24]	; (8000698 <MX_USART2_UART_Init+0x4c>)
 800067e:	2200      	movs	r2, #0
 8000680:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8000682:	4805      	ldr	r0, [pc, #20]	; (8000698 <MX_USART2_UART_Init+0x4c>)
 8000684:	f001 fa72 	bl	8001b6c <HAL_UART_Init>
 8000688:	4603      	mov	r3, r0
 800068a:	2b00      	cmp	r3, #0
 800068c:	d001      	beq.n	8000692 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800068e:	f000 f82f 	bl	80006f0 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8000692:	bf00      	nop
 8000694:	bd80      	pop	{r7, pc}
 8000696:	bf00      	nop
 8000698:	2000008c 	.word	0x2000008c
 800069c:	40004400 	.word	0x40004400

080006a0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80006a0:	b480      	push	{r7}
 80006a2:	b083      	sub	sp, #12
 80006a4:	af00      	add	r7, sp, #0

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80006a6:	2300      	movs	r3, #0
 80006a8:	607b      	str	r3, [r7, #4]
 80006aa:	4b10      	ldr	r3, [pc, #64]	; (80006ec <MX_GPIO_Init+0x4c>)
 80006ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ae:	4a0f      	ldr	r2, [pc, #60]	; (80006ec <MX_GPIO_Init+0x4c>)
 80006b0:	f043 0304 	orr.w	r3, r3, #4
 80006b4:	6313      	str	r3, [r2, #48]	; 0x30
 80006b6:	4b0d      	ldr	r3, [pc, #52]	; (80006ec <MX_GPIO_Init+0x4c>)
 80006b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ba:	f003 0304 	and.w	r3, r3, #4
 80006be:	607b      	str	r3, [r7, #4]
 80006c0:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80006c2:	2300      	movs	r3, #0
 80006c4:	603b      	str	r3, [r7, #0]
 80006c6:	4b09      	ldr	r3, [pc, #36]	; (80006ec <MX_GPIO_Init+0x4c>)
 80006c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006ca:	4a08      	ldr	r2, [pc, #32]	; (80006ec <MX_GPIO_Init+0x4c>)
 80006cc:	f043 0301 	orr.w	r3, r3, #1
 80006d0:	6313      	str	r3, [r2, #48]	; 0x30
 80006d2:	4b06      	ldr	r3, [pc, #24]	; (80006ec <MX_GPIO_Init+0x4c>)
 80006d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80006d6:	f003 0301 	and.w	r3, r3, #1
 80006da:	603b      	str	r3, [r7, #0]
 80006dc:	683b      	ldr	r3, [r7, #0]

}
 80006de:	bf00      	nop
 80006e0:	370c      	adds	r7, #12
 80006e2:	46bd      	mov	sp, r7
 80006e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80006e8:	4770      	bx	lr
 80006ea:	bf00      	nop
 80006ec:	40023800 	.word	0x40023800

080006f0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80006f0:	b480      	push	{r7}
 80006f2:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80006f4:	b672      	cpsid	i
}
 80006f6:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80006f8:	e7fe      	b.n	80006f8 <Error_Handler+0x8>
	...

080006fc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80006fc:	b480      	push	{r7}
 80006fe:	b083      	sub	sp, #12
 8000700:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000702:	2300      	movs	r3, #0
 8000704:	607b      	str	r3, [r7, #4]
 8000706:	4b10      	ldr	r3, [pc, #64]	; (8000748 <HAL_MspInit+0x4c>)
 8000708:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800070a:	4a0f      	ldr	r2, [pc, #60]	; (8000748 <HAL_MspInit+0x4c>)
 800070c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000710:	6453      	str	r3, [r2, #68]	; 0x44
 8000712:	4b0d      	ldr	r3, [pc, #52]	; (8000748 <HAL_MspInit+0x4c>)
 8000714:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000716:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800071a:	607b      	str	r3, [r7, #4]
 800071c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800071e:	2300      	movs	r3, #0
 8000720:	603b      	str	r3, [r7, #0]
 8000722:	4b09      	ldr	r3, [pc, #36]	; (8000748 <HAL_MspInit+0x4c>)
 8000724:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000726:	4a08      	ldr	r2, [pc, #32]	; (8000748 <HAL_MspInit+0x4c>)
 8000728:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800072c:	6413      	str	r3, [r2, #64]	; 0x40
 800072e:	4b06      	ldr	r3, [pc, #24]	; (8000748 <HAL_MspInit+0x4c>)
 8000730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000732:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000736:	603b      	str	r3, [r7, #0]
 8000738:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800073a:	bf00      	nop
 800073c:	370c      	adds	r7, #12
 800073e:	46bd      	mov	sp, r7
 8000740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000744:	4770      	bx	lr
 8000746:	bf00      	nop
 8000748:	40023800 	.word	0x40023800

0800074c <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800074c:	b580      	push	{r7, lr}
 800074e:	b08a      	sub	sp, #40	; 0x28
 8000750:	af00      	add	r7, sp, #0
 8000752:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000754:	f107 0314 	add.w	r3, r7, #20
 8000758:	2200      	movs	r2, #0
 800075a:	601a      	str	r2, [r3, #0]
 800075c:	605a      	str	r2, [r3, #4]
 800075e:	609a      	str	r2, [r3, #8]
 8000760:	60da      	str	r2, [r3, #12]
 8000762:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8000764:	687b      	ldr	r3, [r7, #4]
 8000766:	681b      	ldr	r3, [r3, #0]
 8000768:	4a19      	ldr	r2, [pc, #100]	; (80007d0 <HAL_UART_MspInit+0x84>)
 800076a:	4293      	cmp	r3, r2
 800076c:	d12b      	bne.n	80007c6 <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800076e:	2300      	movs	r3, #0
 8000770:	613b      	str	r3, [r7, #16]
 8000772:	4b18      	ldr	r3, [pc, #96]	; (80007d4 <HAL_UART_MspInit+0x88>)
 8000774:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000776:	4a17      	ldr	r2, [pc, #92]	; (80007d4 <HAL_UART_MspInit+0x88>)
 8000778:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800077c:	6413      	str	r3, [r2, #64]	; 0x40
 800077e:	4b15      	ldr	r3, [pc, #84]	; (80007d4 <HAL_UART_MspInit+0x88>)
 8000780:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000782:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8000786:	613b      	str	r3, [r7, #16]
 8000788:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800078a:	2300      	movs	r3, #0
 800078c:	60fb      	str	r3, [r7, #12]
 800078e:	4b11      	ldr	r3, [pc, #68]	; (80007d4 <HAL_UART_MspInit+0x88>)
 8000790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000792:	4a10      	ldr	r2, [pc, #64]	; (80007d4 <HAL_UART_MspInit+0x88>)
 8000794:	f043 0301 	orr.w	r3, r3, #1
 8000798:	6313      	str	r3, [r2, #48]	; 0x30
 800079a:	4b0e      	ldr	r3, [pc, #56]	; (80007d4 <HAL_UART_MspInit+0x88>)
 800079c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800079e:	f003 0301 	and.w	r3, r3, #1
 80007a2:	60fb      	str	r3, [r7, #12]
 80007a4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80007a6:	230c      	movs	r3, #12
 80007a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80007aa:	2302      	movs	r3, #2
 80007ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007ae:	2300      	movs	r3, #0
 80007b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80007b2:	2303      	movs	r3, #3
 80007b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80007b6:	2307      	movs	r3, #7
 80007b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80007ba:	f107 0314 	add.w	r3, r7, #20
 80007be:	4619      	mov	r1, r3
 80007c0:	4805      	ldr	r0, [pc, #20]	; (80007d8 <HAL_UART_MspInit+0x8c>)
 80007c2:	f000 fae3 	bl	8000d8c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80007c6:	bf00      	nop
 80007c8:	3728      	adds	r7, #40	; 0x28
 80007ca:	46bd      	mov	sp, r7
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	40004400 	.word	0x40004400
 80007d4:	40023800 	.word	0x40023800
 80007d8:	40020000 	.word	0x40020000

080007dc <HAL_UART_MspDeInit>:
* This function freeze the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspDeInit(UART_HandleTypeDef* huart)
{
 80007dc:	b580      	push	{r7, lr}
 80007de:	b082      	sub	sp, #8
 80007e0:	af00      	add	r7, sp, #0
 80007e2:	6078      	str	r0, [r7, #4]
  if(huart->Instance==USART2)
 80007e4:	687b      	ldr	r3, [r7, #4]
 80007e6:	681b      	ldr	r3, [r3, #0]
 80007e8:	4a08      	ldr	r2, [pc, #32]	; (800080c <HAL_UART_MspDeInit+0x30>)
 80007ea:	4293      	cmp	r3, r2
 80007ec:	d109      	bne.n	8000802 <HAL_UART_MspDeInit+0x26>
  {
  /* USER CODE BEGIN USART2_MspDeInit 0 */

  /* USER CODE END USART2_MspDeInit 0 */
    /* Peripheral clock disable */
    __HAL_RCC_USART2_CLK_DISABLE();
 80007ee:	4b08      	ldr	r3, [pc, #32]	; (8000810 <HAL_UART_MspDeInit+0x34>)
 80007f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80007f2:	4a07      	ldr	r2, [pc, #28]	; (8000810 <HAL_UART_MspDeInit+0x34>)
 80007f4:	f423 3300 	bic.w	r3, r3, #131072	; 0x20000
 80007f8:	6413      	str	r3, [r2, #64]	; 0x40

    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    HAL_GPIO_DeInit(GPIOA, GPIO_PIN_2|GPIO_PIN_3);
 80007fa:	210c      	movs	r1, #12
 80007fc:	4805      	ldr	r0, [pc, #20]	; (8000814 <HAL_UART_MspDeInit+0x38>)
 80007fe:	f000 fc61 	bl	80010c4 <HAL_GPIO_DeInit>
  /* USER CODE BEGIN USART2_MspDeInit 1 */

  /* USER CODE END USART2_MspDeInit 1 */
  }

}
 8000802:	bf00      	nop
 8000804:	3708      	adds	r7, #8
 8000806:	46bd      	mov	sp, r7
 8000808:	bd80      	pop	{r7, pc}
 800080a:	bf00      	nop
 800080c:	40004400 	.word	0x40004400
 8000810:	40023800 	.word	0x40023800
 8000814:	40020000 	.word	0x40020000

08000818 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000818:	b480      	push	{r7}
 800081a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800081c:	e7fe      	b.n	800081c <NMI_Handler+0x4>

0800081e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800081e:	b480      	push	{r7}
 8000820:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000822:	e7fe      	b.n	8000822 <HardFault_Handler+0x4>

08000824 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000824:	b480      	push	{r7}
 8000826:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000828:	e7fe      	b.n	8000828 <MemManage_Handler+0x4>

0800082a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800082a:	b480      	push	{r7}
 800082c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800082e:	e7fe      	b.n	800082e <BusFault_Handler+0x4>

08000830 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000830:	b480      	push	{r7}
 8000832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000834:	e7fe      	b.n	8000834 <UsageFault_Handler+0x4>

08000836 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8000836:	b480      	push	{r7}
 8000838:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800083a:	bf00      	nop
 800083c:	46bd      	mov	sp, r7
 800083e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000842:	4770      	bx	lr

08000844 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000844:	b480      	push	{r7}
 8000846:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000848:	bf00      	nop
 800084a:	46bd      	mov	sp, r7
 800084c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000850:	4770      	bx	lr

08000852 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8000852:	b480      	push	{r7}
 8000854:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8000856:	bf00      	nop
 8000858:	46bd      	mov	sp, r7
 800085a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800085e:	4770      	bx	lr

08000860 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8000860:	b580      	push	{r7, lr}
 8000862:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8000864:	f000 f968 	bl	8000b38 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8000868:	bf00      	nop
 800086a:	bd80      	pop	{r7, pc}

0800086c <_read>:
	_kill(status, -1);
	while (1) {}		/* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800086c:	b580      	push	{r7, lr}
 800086e:	b086      	sub	sp, #24
 8000870:	af00      	add	r7, sp, #0
 8000872:	60f8      	str	r0, [r7, #12]
 8000874:	60b9      	str	r1, [r7, #8]
 8000876:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000878:	2300      	movs	r3, #0
 800087a:	617b      	str	r3, [r7, #20]
 800087c:	e00a      	b.n	8000894 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800087e:	f3af 8000 	nop.w
 8000882:	4601      	mov	r1, r0
 8000884:	68bb      	ldr	r3, [r7, #8]
 8000886:	1c5a      	adds	r2, r3, #1
 8000888:	60ba      	str	r2, [r7, #8]
 800088a:	b2ca      	uxtb	r2, r1
 800088c:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800088e:	697b      	ldr	r3, [r7, #20]
 8000890:	3301      	adds	r3, #1
 8000892:	617b      	str	r3, [r7, #20]
 8000894:	697a      	ldr	r2, [r7, #20]
 8000896:	687b      	ldr	r3, [r7, #4]
 8000898:	429a      	cmp	r2, r3
 800089a:	dbf0      	blt.n	800087e <_read+0x12>
	}

return len;
 800089c:	687b      	ldr	r3, [r7, #4]
}
 800089e:	4618      	mov	r0, r3
 80008a0:	3718      	adds	r7, #24
 80008a2:	46bd      	mov	sp, r7
 80008a4:	bd80      	pop	{r7, pc}

080008a6 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80008a6:	b580      	push	{r7, lr}
 80008a8:	b086      	sub	sp, #24
 80008aa:	af00      	add	r7, sp, #0
 80008ac:	60f8      	str	r0, [r7, #12]
 80008ae:	60b9      	str	r1, [r7, #8]
 80008b0:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008b2:	2300      	movs	r3, #0
 80008b4:	617b      	str	r3, [r7, #20]
 80008b6:	e009      	b.n	80008cc <_write+0x26>
	{
		__io_putchar(*ptr++);
 80008b8:	68bb      	ldr	r3, [r7, #8]
 80008ba:	1c5a      	adds	r2, r3, #1
 80008bc:	60ba      	str	r2, [r7, #8]
 80008be:	781b      	ldrb	r3, [r3, #0]
 80008c0:	4618      	mov	r0, r3
 80008c2:	f7ff fe03 	bl	80004cc <__io_putchar>
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80008c6:	697b      	ldr	r3, [r7, #20]
 80008c8:	3301      	adds	r3, #1
 80008ca:	617b      	str	r3, [r7, #20]
 80008cc:	697a      	ldr	r2, [r7, #20]
 80008ce:	687b      	ldr	r3, [r7, #4]
 80008d0:	429a      	cmp	r2, r3
 80008d2:	dbf1      	blt.n	80008b8 <_write+0x12>
	}
	return len;
 80008d4:	687b      	ldr	r3, [r7, #4]
}
 80008d6:	4618      	mov	r0, r3
 80008d8:	3718      	adds	r7, #24
 80008da:	46bd      	mov	sp, r7
 80008dc:	bd80      	pop	{r7, pc}

080008de <_close>:

int _close(int file)
{
 80008de:	b480      	push	{r7}
 80008e0:	b083      	sub	sp, #12
 80008e2:	af00      	add	r7, sp, #0
 80008e4:	6078      	str	r0, [r7, #4]
	return -1;
 80008e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80008ea:	4618      	mov	r0, r3
 80008ec:	370c      	adds	r7, #12
 80008ee:	46bd      	mov	sp, r7
 80008f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80008f4:	4770      	bx	lr

080008f6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80008f6:	b480      	push	{r7}
 80008f8:	b083      	sub	sp, #12
 80008fa:	af00      	add	r7, sp, #0
 80008fc:	6078      	str	r0, [r7, #4]
 80008fe:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8000900:	683b      	ldr	r3, [r7, #0]
 8000902:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000906:	605a      	str	r2, [r3, #4]
	return 0;
 8000908:	2300      	movs	r3, #0
}
 800090a:	4618      	mov	r0, r3
 800090c:	370c      	adds	r7, #12
 800090e:	46bd      	mov	sp, r7
 8000910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000914:	4770      	bx	lr

08000916 <_isatty>:

int _isatty(int file)
{
 8000916:	b480      	push	{r7}
 8000918:	b083      	sub	sp, #12
 800091a:	af00      	add	r7, sp, #0
 800091c:	6078      	str	r0, [r7, #4]
	return 1;
 800091e:	2301      	movs	r3, #1
}
 8000920:	4618      	mov	r0, r3
 8000922:	370c      	adds	r7, #12
 8000924:	46bd      	mov	sp, r7
 8000926:	f85d 7b04 	ldr.w	r7, [sp], #4
 800092a:	4770      	bx	lr

0800092c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800092c:	b480      	push	{r7}
 800092e:	b085      	sub	sp, #20
 8000930:	af00      	add	r7, sp, #0
 8000932:	60f8      	str	r0, [r7, #12]
 8000934:	60b9      	str	r1, [r7, #8]
 8000936:	607a      	str	r2, [r7, #4]
	return 0;
 8000938:	2300      	movs	r3, #0
}
 800093a:	4618      	mov	r0, r3
 800093c:	3714      	adds	r7, #20
 800093e:	46bd      	mov	sp, r7
 8000940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000944:	4770      	bx	lr
	...

08000948 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000948:	b580      	push	{r7, lr}
 800094a:	b086      	sub	sp, #24
 800094c:	af00      	add	r7, sp, #0
 800094e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000950:	4a14      	ldr	r2, [pc, #80]	; (80009a4 <_sbrk+0x5c>)
 8000952:	4b15      	ldr	r3, [pc, #84]	; (80009a8 <_sbrk+0x60>)
 8000954:	1ad3      	subs	r3, r2, r3
 8000956:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000958:	697b      	ldr	r3, [r7, #20]
 800095a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800095c:	4b13      	ldr	r3, [pc, #76]	; (80009ac <_sbrk+0x64>)
 800095e:	681b      	ldr	r3, [r3, #0]
 8000960:	2b00      	cmp	r3, #0
 8000962:	d102      	bne.n	800096a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000964:	4b11      	ldr	r3, [pc, #68]	; (80009ac <_sbrk+0x64>)
 8000966:	4a12      	ldr	r2, [pc, #72]	; (80009b0 <_sbrk+0x68>)
 8000968:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800096a:	4b10      	ldr	r3, [pc, #64]	; (80009ac <_sbrk+0x64>)
 800096c:	681a      	ldr	r2, [r3, #0]
 800096e:	687b      	ldr	r3, [r7, #4]
 8000970:	4413      	add	r3, r2
 8000972:	693a      	ldr	r2, [r7, #16]
 8000974:	429a      	cmp	r2, r3
 8000976:	d207      	bcs.n	8000988 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000978:	f001 fce8 	bl	800234c <__errno>
 800097c:	4603      	mov	r3, r0
 800097e:	220c      	movs	r2, #12
 8000980:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000982:	f04f 33ff 	mov.w	r3, #4294967295
 8000986:	e009      	b.n	800099c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000988:	4b08      	ldr	r3, [pc, #32]	; (80009ac <_sbrk+0x64>)
 800098a:	681b      	ldr	r3, [r3, #0]
 800098c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800098e:	4b07      	ldr	r3, [pc, #28]	; (80009ac <_sbrk+0x64>)
 8000990:	681a      	ldr	r2, [r3, #0]
 8000992:	687b      	ldr	r3, [r7, #4]
 8000994:	4413      	add	r3, r2
 8000996:	4a05      	ldr	r2, [pc, #20]	; (80009ac <_sbrk+0x64>)
 8000998:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800099a:	68fb      	ldr	r3, [r7, #12]
}
 800099c:	4618      	mov	r0, r3
 800099e:	3718      	adds	r7, #24
 80009a0:	46bd      	mov	sp, r7
 80009a2:	bd80      	pop	{r7, pc}
 80009a4:	20020000 	.word	0x20020000
 80009a8:	00000400 	.word	0x00000400
 80009ac:	200000d0 	.word	0x200000d0
 80009b0:	200000e8 	.word	0x200000e8

080009b4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80009b4:	b480      	push	{r7}
 80009b6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80009b8:	4b06      	ldr	r3, [pc, #24]	; (80009d4 <SystemInit+0x20>)
 80009ba:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80009be:	4a05      	ldr	r2, [pc, #20]	; (80009d4 <SystemInit+0x20>)
 80009c0:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80009c4:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80009c8:	bf00      	nop
 80009ca:	46bd      	mov	sp, r7
 80009cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009d0:	4770      	bx	lr
 80009d2:	bf00      	nop
 80009d4:	e000ed00 	.word	0xe000ed00

080009d8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80009d8:	f8df d034 	ldr.w	sp, [pc, #52]	; 8000a10 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80009dc:	480d      	ldr	r0, [pc, #52]	; (8000a14 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80009de:	490e      	ldr	r1, [pc, #56]	; (8000a18 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80009e0:	4a0e      	ldr	r2, [pc, #56]	; (8000a1c <LoopFillZerobss+0x1e>)
  movs r3, #0
 80009e2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80009e4:	e002      	b.n	80009ec <LoopCopyDataInit>

080009e6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80009e6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80009e8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80009ea:	3304      	adds	r3, #4

080009ec <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80009ec:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80009ee:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80009f0:	d3f9      	bcc.n	80009e6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80009f2:	4a0b      	ldr	r2, [pc, #44]	; (8000a20 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80009f4:	4c0b      	ldr	r4, [pc, #44]	; (8000a24 <LoopFillZerobss+0x26>)
  movs r3, #0
 80009f6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80009f8:	e001      	b.n	80009fe <LoopFillZerobss>

080009fa <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80009fa:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80009fc:	3204      	adds	r2, #4

080009fe <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80009fe:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000a00:	d3fb      	bcc.n	80009fa <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000a02:	f7ff ffd7 	bl	80009b4 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8000a06:	f001 fca7 	bl	8002358 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000a0a:	f7ff fdb3 	bl	8000574 <main>
  bx  lr    
 8000a0e:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8000a10:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000a14:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000a18:	20000070 	.word	0x20000070
  ldr r2, =_sidata
 8000a1c:	08002e64 	.word	0x08002e64
  ldr r2, =_sbss
 8000a20:	20000070 	.word	0x20000070
  ldr r4, =_ebss
 8000a24:	200000e8 	.word	0x200000e8

08000a28 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000a28:	e7fe      	b.n	8000a28 <ADC_IRQHandler>
	...

08000a2c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000a2c:	b580      	push	{r7, lr}
 8000a2e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000a30:	4b0e      	ldr	r3, [pc, #56]	; (8000a6c <HAL_Init+0x40>)
 8000a32:	681b      	ldr	r3, [r3, #0]
 8000a34:	4a0d      	ldr	r2, [pc, #52]	; (8000a6c <HAL_Init+0x40>)
 8000a36:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000a3a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000a3c:	4b0b      	ldr	r3, [pc, #44]	; (8000a6c <HAL_Init+0x40>)
 8000a3e:	681b      	ldr	r3, [r3, #0]
 8000a40:	4a0a      	ldr	r2, [pc, #40]	; (8000a6c <HAL_Init+0x40>)
 8000a42:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8000a46:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000a48:	4b08      	ldr	r3, [pc, #32]	; (8000a6c <HAL_Init+0x40>)
 8000a4a:	681b      	ldr	r3, [r3, #0]
 8000a4c:	4a07      	ldr	r2, [pc, #28]	; (8000a6c <HAL_Init+0x40>)
 8000a4e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8000a52:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000a54:	2003      	movs	r0, #3
 8000a56:	f000 f965 	bl	8000d24 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000a5a:	200f      	movs	r0, #15
 8000a5c:	f000 f83c 	bl	8000ad8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000a60:	f7ff fe4c 	bl	80006fc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000a64:	2300      	movs	r3, #0
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	bd80      	pop	{r7, pc}
 8000a6a:	bf00      	nop
 8000a6c:	40023c00 	.word	0x40023c00

08000a70 <HAL_DeInit>:
  * @brief  This function de-Initializes common part of the HAL and stops the systick.
  *         This function is optional.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DeInit(void)
{
 8000a70:	b580      	push	{r7, lr}
 8000a72:	af00      	add	r7, sp, #0
  /* Reset of all peripherals */
  __HAL_RCC_APB1_FORCE_RESET();
 8000a74:	4b13      	ldr	r3, [pc, #76]	; (8000ac4 <HAL_DeInit+0x54>)
 8000a76:	f04f 32ff 	mov.w	r2, #4294967295
 8000a7a:	621a      	str	r2, [r3, #32]
  __HAL_RCC_APB1_RELEASE_RESET();
 8000a7c:	4b11      	ldr	r3, [pc, #68]	; (8000ac4 <HAL_DeInit+0x54>)
 8000a7e:	2200      	movs	r2, #0
 8000a80:	621a      	str	r2, [r3, #32]

  __HAL_RCC_APB2_FORCE_RESET();
 8000a82:	4b10      	ldr	r3, [pc, #64]	; (8000ac4 <HAL_DeInit+0x54>)
 8000a84:	f04f 32ff 	mov.w	r2, #4294967295
 8000a88:	625a      	str	r2, [r3, #36]	; 0x24
  __HAL_RCC_APB2_RELEASE_RESET();
 8000a8a:	4b0e      	ldr	r3, [pc, #56]	; (8000ac4 <HAL_DeInit+0x54>)
 8000a8c:	2200      	movs	r2, #0
 8000a8e:	625a      	str	r2, [r3, #36]	; 0x24

  __HAL_RCC_AHB1_FORCE_RESET();
 8000a90:	4b0c      	ldr	r3, [pc, #48]	; (8000ac4 <HAL_DeInit+0x54>)
 8000a92:	f04f 32ff 	mov.w	r2, #4294967295
 8000a96:	611a      	str	r2, [r3, #16]
  __HAL_RCC_AHB1_RELEASE_RESET();
 8000a98:	4b0a      	ldr	r3, [pc, #40]	; (8000ac4 <HAL_DeInit+0x54>)
 8000a9a:	2200      	movs	r2, #0
 8000a9c:	611a      	str	r2, [r3, #16]

  __HAL_RCC_AHB2_FORCE_RESET();
 8000a9e:	4b09      	ldr	r3, [pc, #36]	; (8000ac4 <HAL_DeInit+0x54>)
 8000aa0:	f04f 32ff 	mov.w	r2, #4294967295
 8000aa4:	615a      	str	r2, [r3, #20]
  __HAL_RCC_AHB2_RELEASE_RESET();
 8000aa6:	4b07      	ldr	r3, [pc, #28]	; (8000ac4 <HAL_DeInit+0x54>)
 8000aa8:	2200      	movs	r2, #0
 8000aaa:	615a      	str	r2, [r3, #20]

  __HAL_RCC_AHB3_FORCE_RESET();
 8000aac:	4b05      	ldr	r3, [pc, #20]	; (8000ac4 <HAL_DeInit+0x54>)
 8000aae:	f04f 32ff 	mov.w	r2, #4294967295
 8000ab2:	619a      	str	r2, [r3, #24]
  __HAL_RCC_AHB3_RELEASE_RESET();
 8000ab4:	4b03      	ldr	r3, [pc, #12]	; (8000ac4 <HAL_DeInit+0x54>)
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	619a      	str	r2, [r3, #24]

  /* De-Init the low level hardware */
  HAL_MspDeInit();
 8000aba:	f000 f805 	bl	8000ac8 <HAL_MspDeInit>
    
  /* Return function status */
  return HAL_OK;
 8000abe:	2300      	movs	r3, #0
}
 8000ac0:	4618      	mov	r0, r3
 8000ac2:	bd80      	pop	{r7, pc}
 8000ac4:	40023800 	.word	0x40023800

08000ac8 <HAL_MspDeInit>:
/**
  * @brief  DeInitializes the MSP.
  * @retval None
  */
__weak void HAL_MspDeInit(void)
{
 8000ac8:	b480      	push	{r7}
 8000aca:	af00      	add	r7, sp, #0
  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_MspDeInit could be implemented in the user file
   */ 
}
 8000acc:	bf00      	nop
 8000ace:	46bd      	mov	sp, r7
 8000ad0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ad4:	4770      	bx	lr
	...

08000ad8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000ad8:	b580      	push	{r7, lr}
 8000ada:	b082      	sub	sp, #8
 8000adc:	af00      	add	r7, sp, #0
 8000ade:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000ae0:	4b12      	ldr	r3, [pc, #72]	; (8000b2c <HAL_InitTick+0x54>)
 8000ae2:	681a      	ldr	r2, [r3, #0]
 8000ae4:	4b12      	ldr	r3, [pc, #72]	; (8000b30 <HAL_InitTick+0x58>)
 8000ae6:	781b      	ldrb	r3, [r3, #0]
 8000ae8:	4619      	mov	r1, r3
 8000aea:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8000aee:	fbb3 f3f1 	udiv	r3, r3, r1
 8000af2:	fbb2 f3f3 	udiv	r3, r2, r3
 8000af6:	4618      	mov	r0, r3
 8000af8:	f000 f93b 	bl	8000d72 <HAL_SYSTICK_Config>
 8000afc:	4603      	mov	r3, r0
 8000afe:	2b00      	cmp	r3, #0
 8000b00:	d001      	beq.n	8000b06 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000b02:	2301      	movs	r3, #1
 8000b04:	e00e      	b.n	8000b24 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000b06:	687b      	ldr	r3, [r7, #4]
 8000b08:	2b0f      	cmp	r3, #15
 8000b0a:	d80a      	bhi.n	8000b22 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000b0c:	2200      	movs	r2, #0
 8000b0e:	6879      	ldr	r1, [r7, #4]
 8000b10:	f04f 30ff 	mov.w	r0, #4294967295
 8000b14:	f000 f911 	bl	8000d3a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000b18:	4a06      	ldr	r2, [pc, #24]	; (8000b34 <HAL_InitTick+0x5c>)
 8000b1a:	687b      	ldr	r3, [r7, #4]
 8000b1c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000b1e:	2300      	movs	r3, #0
 8000b20:	e000      	b.n	8000b24 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000b22:	2301      	movs	r3, #1
}
 8000b24:	4618      	mov	r0, r3
 8000b26:	3708      	adds	r7, #8
 8000b28:	46bd      	mov	sp, r7
 8000b2a:	bd80      	pop	{r7, pc}
 8000b2c:	20000000 	.word	0x20000000
 8000b30:	20000008 	.word	0x20000008
 8000b34:	20000004 	.word	0x20000004

08000b38 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000b38:	b480      	push	{r7}
 8000b3a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000b3c:	4b06      	ldr	r3, [pc, #24]	; (8000b58 <HAL_IncTick+0x20>)
 8000b3e:	781b      	ldrb	r3, [r3, #0]
 8000b40:	461a      	mov	r2, r3
 8000b42:	4b06      	ldr	r3, [pc, #24]	; (8000b5c <HAL_IncTick+0x24>)
 8000b44:	681b      	ldr	r3, [r3, #0]
 8000b46:	4413      	add	r3, r2
 8000b48:	4a04      	ldr	r2, [pc, #16]	; (8000b5c <HAL_IncTick+0x24>)
 8000b4a:	6013      	str	r3, [r2, #0]
}
 8000b4c:	bf00      	nop
 8000b4e:	46bd      	mov	sp, r7
 8000b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b54:	4770      	bx	lr
 8000b56:	bf00      	nop
 8000b58:	20000008 	.word	0x20000008
 8000b5c:	200000d4 	.word	0x200000d4

08000b60 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000b60:	b480      	push	{r7}
 8000b62:	af00      	add	r7, sp, #0
  return uwTick;
 8000b64:	4b03      	ldr	r3, [pc, #12]	; (8000b74 <HAL_GetTick+0x14>)
 8000b66:	681b      	ldr	r3, [r3, #0]
}
 8000b68:	4618      	mov	r0, r3
 8000b6a:	46bd      	mov	sp, r7
 8000b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b70:	4770      	bx	lr
 8000b72:	bf00      	nop
 8000b74:	200000d4 	.word	0x200000d4

08000b78 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000b78:	b580      	push	{r7, lr}
 8000b7a:	b084      	sub	sp, #16
 8000b7c:	af00      	add	r7, sp, #0
 8000b7e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000b80:	f7ff ffee 	bl	8000b60 <HAL_GetTick>
 8000b84:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000b86:	687b      	ldr	r3, [r7, #4]
 8000b88:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000b8a:	68fb      	ldr	r3, [r7, #12]
 8000b8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000b90:	d005      	beq.n	8000b9e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000b92:	4b0a      	ldr	r3, [pc, #40]	; (8000bbc <HAL_Delay+0x44>)
 8000b94:	781b      	ldrb	r3, [r3, #0]
 8000b96:	461a      	mov	r2, r3
 8000b98:	68fb      	ldr	r3, [r7, #12]
 8000b9a:	4413      	add	r3, r2
 8000b9c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000b9e:	bf00      	nop
 8000ba0:	f7ff ffde 	bl	8000b60 <HAL_GetTick>
 8000ba4:	4602      	mov	r2, r0
 8000ba6:	68bb      	ldr	r3, [r7, #8]
 8000ba8:	1ad3      	subs	r3, r2, r3
 8000baa:	68fa      	ldr	r2, [r7, #12]
 8000bac:	429a      	cmp	r2, r3
 8000bae:	d8f7      	bhi.n	8000ba0 <HAL_Delay+0x28>
  {
  }
}
 8000bb0:	bf00      	nop
 8000bb2:	bf00      	nop
 8000bb4:	3710      	adds	r7, #16
 8000bb6:	46bd      	mov	sp, r7
 8000bb8:	bd80      	pop	{r7, pc}
 8000bba:	bf00      	nop
 8000bbc:	20000008 	.word	0x20000008

08000bc0 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000bc0:	b480      	push	{r7}
 8000bc2:	b085      	sub	sp, #20
 8000bc4:	af00      	add	r7, sp, #0
 8000bc6:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000bc8:	687b      	ldr	r3, [r7, #4]
 8000bca:	f003 0307 	and.w	r3, r3, #7
 8000bce:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000bd0:	4b0c      	ldr	r3, [pc, #48]	; (8000c04 <__NVIC_SetPriorityGrouping+0x44>)
 8000bd2:	68db      	ldr	r3, [r3, #12]
 8000bd4:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000bd6:	68ba      	ldr	r2, [r7, #8]
 8000bd8:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8000bdc:	4013      	ands	r3, r2
 8000bde:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000be0:	68fb      	ldr	r3, [r7, #12]
 8000be2:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000be4:	68bb      	ldr	r3, [r7, #8]
 8000be6:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000be8:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8000bec:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8000bf0:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000bf2:	4a04      	ldr	r2, [pc, #16]	; (8000c04 <__NVIC_SetPriorityGrouping+0x44>)
 8000bf4:	68bb      	ldr	r3, [r7, #8]
 8000bf6:	60d3      	str	r3, [r2, #12]
}
 8000bf8:	bf00      	nop
 8000bfa:	3714      	adds	r7, #20
 8000bfc:	46bd      	mov	sp, r7
 8000bfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c02:	4770      	bx	lr
 8000c04:	e000ed00 	.word	0xe000ed00

08000c08 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000c08:	b480      	push	{r7}
 8000c0a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000c0c:	4b04      	ldr	r3, [pc, #16]	; (8000c20 <__NVIC_GetPriorityGrouping+0x18>)
 8000c0e:	68db      	ldr	r3, [r3, #12]
 8000c10:	0a1b      	lsrs	r3, r3, #8
 8000c12:	f003 0307 	and.w	r3, r3, #7
}
 8000c16:	4618      	mov	r0, r3
 8000c18:	46bd      	mov	sp, r7
 8000c1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c1e:	4770      	bx	lr
 8000c20:	e000ed00 	.word	0xe000ed00

08000c24 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000c24:	b480      	push	{r7}
 8000c26:	b083      	sub	sp, #12
 8000c28:	af00      	add	r7, sp, #0
 8000c2a:	4603      	mov	r3, r0
 8000c2c:	6039      	str	r1, [r7, #0]
 8000c2e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000c30:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c34:	2b00      	cmp	r3, #0
 8000c36:	db0a      	blt.n	8000c4e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c38:	683b      	ldr	r3, [r7, #0]
 8000c3a:	b2da      	uxtb	r2, r3
 8000c3c:	490c      	ldr	r1, [pc, #48]	; (8000c70 <__NVIC_SetPriority+0x4c>)
 8000c3e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000c42:	0112      	lsls	r2, r2, #4
 8000c44:	b2d2      	uxtb	r2, r2
 8000c46:	440b      	add	r3, r1
 8000c48:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000c4c:	e00a      	b.n	8000c64 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000c4e:	683b      	ldr	r3, [r7, #0]
 8000c50:	b2da      	uxtb	r2, r3
 8000c52:	4908      	ldr	r1, [pc, #32]	; (8000c74 <__NVIC_SetPriority+0x50>)
 8000c54:	79fb      	ldrb	r3, [r7, #7]
 8000c56:	f003 030f 	and.w	r3, r3, #15
 8000c5a:	3b04      	subs	r3, #4
 8000c5c:	0112      	lsls	r2, r2, #4
 8000c5e:	b2d2      	uxtb	r2, r2
 8000c60:	440b      	add	r3, r1
 8000c62:	761a      	strb	r2, [r3, #24]
}
 8000c64:	bf00      	nop
 8000c66:	370c      	adds	r7, #12
 8000c68:	46bd      	mov	sp, r7
 8000c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c6e:	4770      	bx	lr
 8000c70:	e000e100 	.word	0xe000e100
 8000c74:	e000ed00 	.word	0xe000ed00

08000c78 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000c78:	b480      	push	{r7}
 8000c7a:	b089      	sub	sp, #36	; 0x24
 8000c7c:	af00      	add	r7, sp, #0
 8000c7e:	60f8      	str	r0, [r7, #12]
 8000c80:	60b9      	str	r1, [r7, #8]
 8000c82:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000c84:	68fb      	ldr	r3, [r7, #12]
 8000c86:	f003 0307 	and.w	r3, r3, #7
 8000c8a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000c8c:	69fb      	ldr	r3, [r7, #28]
 8000c8e:	f1c3 0307 	rsb	r3, r3, #7
 8000c92:	2b04      	cmp	r3, #4
 8000c94:	bf28      	it	cs
 8000c96:	2304      	movcs	r3, #4
 8000c98:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000c9a:	69fb      	ldr	r3, [r7, #28]
 8000c9c:	3304      	adds	r3, #4
 8000c9e:	2b06      	cmp	r3, #6
 8000ca0:	d902      	bls.n	8000ca8 <NVIC_EncodePriority+0x30>
 8000ca2:	69fb      	ldr	r3, [r7, #28]
 8000ca4:	3b03      	subs	r3, #3
 8000ca6:	e000      	b.n	8000caa <NVIC_EncodePriority+0x32>
 8000ca8:	2300      	movs	r3, #0
 8000caa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cac:	f04f 32ff 	mov.w	r2, #4294967295
 8000cb0:	69bb      	ldr	r3, [r7, #24]
 8000cb2:	fa02 f303 	lsl.w	r3, r2, r3
 8000cb6:	43da      	mvns	r2, r3
 8000cb8:	68bb      	ldr	r3, [r7, #8]
 8000cba:	401a      	ands	r2, r3
 8000cbc:	697b      	ldr	r3, [r7, #20]
 8000cbe:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000cc0:	f04f 31ff 	mov.w	r1, #4294967295
 8000cc4:	697b      	ldr	r3, [r7, #20]
 8000cc6:	fa01 f303 	lsl.w	r3, r1, r3
 8000cca:	43d9      	mvns	r1, r3
 8000ccc:	687b      	ldr	r3, [r7, #4]
 8000cce:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000cd0:	4313      	orrs	r3, r2
         );
}
 8000cd2:	4618      	mov	r0, r3
 8000cd4:	3724      	adds	r7, #36	; 0x24
 8000cd6:	46bd      	mov	sp, r7
 8000cd8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000cdc:	4770      	bx	lr
	...

08000ce0 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000ce0:	b580      	push	{r7, lr}
 8000ce2:	b082      	sub	sp, #8
 8000ce4:	af00      	add	r7, sp, #0
 8000ce6:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000ce8:	687b      	ldr	r3, [r7, #4]
 8000cea:	3b01      	subs	r3, #1
 8000cec:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8000cf0:	d301      	bcc.n	8000cf6 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000cf2:	2301      	movs	r3, #1
 8000cf4:	e00f      	b.n	8000d16 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000cf6:	4a0a      	ldr	r2, [pc, #40]	; (8000d20 <SysTick_Config+0x40>)
 8000cf8:	687b      	ldr	r3, [r7, #4]
 8000cfa:	3b01      	subs	r3, #1
 8000cfc:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000cfe:	210f      	movs	r1, #15
 8000d00:	f04f 30ff 	mov.w	r0, #4294967295
 8000d04:	f7ff ff8e 	bl	8000c24 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000d08:	4b05      	ldr	r3, [pc, #20]	; (8000d20 <SysTick_Config+0x40>)
 8000d0a:	2200      	movs	r2, #0
 8000d0c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000d0e:	4b04      	ldr	r3, [pc, #16]	; (8000d20 <SysTick_Config+0x40>)
 8000d10:	2207      	movs	r2, #7
 8000d12:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000d14:	2300      	movs	r3, #0
}
 8000d16:	4618      	mov	r0, r3
 8000d18:	3708      	adds	r7, #8
 8000d1a:	46bd      	mov	sp, r7
 8000d1c:	bd80      	pop	{r7, pc}
 8000d1e:	bf00      	nop
 8000d20:	e000e010 	.word	0xe000e010

08000d24 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000d24:	b580      	push	{r7, lr}
 8000d26:	b082      	sub	sp, #8
 8000d28:	af00      	add	r7, sp, #0
 8000d2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000d2c:	6878      	ldr	r0, [r7, #4]
 8000d2e:	f7ff ff47 	bl	8000bc0 <__NVIC_SetPriorityGrouping>
}
 8000d32:	bf00      	nop
 8000d34:	3708      	adds	r7, #8
 8000d36:	46bd      	mov	sp, r7
 8000d38:	bd80      	pop	{r7, pc}

08000d3a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000d3a:	b580      	push	{r7, lr}
 8000d3c:	b086      	sub	sp, #24
 8000d3e:	af00      	add	r7, sp, #0
 8000d40:	4603      	mov	r3, r0
 8000d42:	60b9      	str	r1, [r7, #8]
 8000d44:	607a      	str	r2, [r7, #4]
 8000d46:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000d48:	2300      	movs	r3, #0
 8000d4a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000d4c:	f7ff ff5c 	bl	8000c08 <__NVIC_GetPriorityGrouping>
 8000d50:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000d52:	687a      	ldr	r2, [r7, #4]
 8000d54:	68b9      	ldr	r1, [r7, #8]
 8000d56:	6978      	ldr	r0, [r7, #20]
 8000d58:	f7ff ff8e 	bl	8000c78 <NVIC_EncodePriority>
 8000d5c:	4602      	mov	r2, r0
 8000d5e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000d62:	4611      	mov	r1, r2
 8000d64:	4618      	mov	r0, r3
 8000d66:	f7ff ff5d 	bl	8000c24 <__NVIC_SetPriority>
}
 8000d6a:	bf00      	nop
 8000d6c:	3718      	adds	r7, #24
 8000d6e:	46bd      	mov	sp, r7
 8000d70:	bd80      	pop	{r7, pc}

08000d72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000d72:	b580      	push	{r7, lr}
 8000d74:	b082      	sub	sp, #8
 8000d76:	af00      	add	r7, sp, #0
 8000d78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000d7a:	6878      	ldr	r0, [r7, #4]
 8000d7c:	f7ff ffb0 	bl	8000ce0 <SysTick_Config>
 8000d80:	4603      	mov	r3, r0
}
 8000d82:	4618      	mov	r0, r3
 8000d84:	3708      	adds	r7, #8
 8000d86:	46bd      	mov	sp, r7
 8000d88:	bd80      	pop	{r7, pc}
	...

08000d8c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	b089      	sub	sp, #36	; 0x24
 8000d90:	af00      	add	r7, sp, #0
 8000d92:	6078      	str	r0, [r7, #4]
 8000d94:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8000d96:	2300      	movs	r3, #0
 8000d98:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8000d9a:	2300      	movs	r3, #0
 8000d9c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8000d9e:	2300      	movs	r3, #0
 8000da0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8000da2:	2300      	movs	r3, #0
 8000da4:	61fb      	str	r3, [r7, #28]
 8000da6:	e16b      	b.n	8001080 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8000da8:	2201      	movs	r2, #1
 8000daa:	69fb      	ldr	r3, [r7, #28]
 8000dac:	fa02 f303 	lsl.w	r3, r2, r3
 8000db0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8000db2:	683b      	ldr	r3, [r7, #0]
 8000db4:	681b      	ldr	r3, [r3, #0]
 8000db6:	697a      	ldr	r2, [r7, #20]
 8000db8:	4013      	ands	r3, r2
 8000dba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8000dbc:	693a      	ldr	r2, [r7, #16]
 8000dbe:	697b      	ldr	r3, [r7, #20]
 8000dc0:	429a      	cmp	r2, r3
 8000dc2:	f040 815a 	bne.w	800107a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dc6:	683b      	ldr	r3, [r7, #0]
 8000dc8:	685b      	ldr	r3, [r3, #4]
 8000dca:	f003 0303 	and.w	r3, r3, #3
 8000dce:	2b01      	cmp	r3, #1
 8000dd0:	d005      	beq.n	8000dde <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000dd2:	683b      	ldr	r3, [r7, #0]
 8000dd4:	685b      	ldr	r3, [r3, #4]
 8000dd6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8000dda:	2b02      	cmp	r3, #2
 8000ddc:	d130      	bne.n	8000e40 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8000dde:	687b      	ldr	r3, [r7, #4]
 8000de0:	689b      	ldr	r3, [r3, #8]
 8000de2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8000de4:	69fb      	ldr	r3, [r7, #28]
 8000de6:	005b      	lsls	r3, r3, #1
 8000de8:	2203      	movs	r2, #3
 8000dea:	fa02 f303 	lsl.w	r3, r2, r3
 8000dee:	43db      	mvns	r3, r3
 8000df0:	69ba      	ldr	r2, [r7, #24]
 8000df2:	4013      	ands	r3, r2
 8000df4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8000df6:	683b      	ldr	r3, [r7, #0]
 8000df8:	68da      	ldr	r2, [r3, #12]
 8000dfa:	69fb      	ldr	r3, [r7, #28]
 8000dfc:	005b      	lsls	r3, r3, #1
 8000dfe:	fa02 f303 	lsl.w	r3, r2, r3
 8000e02:	69ba      	ldr	r2, [r7, #24]
 8000e04:	4313      	orrs	r3, r2
 8000e06:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8000e08:	687b      	ldr	r3, [r7, #4]
 8000e0a:	69ba      	ldr	r2, [r7, #24]
 8000e0c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8000e0e:	687b      	ldr	r3, [r7, #4]
 8000e10:	685b      	ldr	r3, [r3, #4]
 8000e12:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8000e14:	2201      	movs	r2, #1
 8000e16:	69fb      	ldr	r3, [r7, #28]
 8000e18:	fa02 f303 	lsl.w	r3, r2, r3
 8000e1c:	43db      	mvns	r3, r3
 8000e1e:	69ba      	ldr	r2, [r7, #24]
 8000e20:	4013      	ands	r3, r2
 8000e22:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8000e24:	683b      	ldr	r3, [r7, #0]
 8000e26:	685b      	ldr	r3, [r3, #4]
 8000e28:	091b      	lsrs	r3, r3, #4
 8000e2a:	f003 0201 	and.w	r2, r3, #1
 8000e2e:	69fb      	ldr	r3, [r7, #28]
 8000e30:	fa02 f303 	lsl.w	r3, r2, r3
 8000e34:	69ba      	ldr	r2, [r7, #24]
 8000e36:	4313      	orrs	r3, r2
 8000e38:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8000e3a:	687b      	ldr	r3, [r7, #4]
 8000e3c:	69ba      	ldr	r2, [r7, #24]
 8000e3e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8000e40:	683b      	ldr	r3, [r7, #0]
 8000e42:	685b      	ldr	r3, [r3, #4]
 8000e44:	f003 0303 	and.w	r3, r3, #3
 8000e48:	2b03      	cmp	r3, #3
 8000e4a:	d017      	beq.n	8000e7c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8000e4c:	687b      	ldr	r3, [r7, #4]
 8000e4e:	68db      	ldr	r3, [r3, #12]
 8000e50:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8000e52:	69fb      	ldr	r3, [r7, #28]
 8000e54:	005b      	lsls	r3, r3, #1
 8000e56:	2203      	movs	r2, #3
 8000e58:	fa02 f303 	lsl.w	r3, r2, r3
 8000e5c:	43db      	mvns	r3, r3
 8000e5e:	69ba      	ldr	r2, [r7, #24]
 8000e60:	4013      	ands	r3, r2
 8000e62:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8000e64:	683b      	ldr	r3, [r7, #0]
 8000e66:	689a      	ldr	r2, [r3, #8]
 8000e68:	69fb      	ldr	r3, [r7, #28]
 8000e6a:	005b      	lsls	r3, r3, #1
 8000e6c:	fa02 f303 	lsl.w	r3, r2, r3
 8000e70:	69ba      	ldr	r2, [r7, #24]
 8000e72:	4313      	orrs	r3, r2
 8000e74:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8000e76:	687b      	ldr	r3, [r7, #4]
 8000e78:	69ba      	ldr	r2, [r7, #24]
 8000e7a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8000e7c:	683b      	ldr	r3, [r7, #0]
 8000e7e:	685b      	ldr	r3, [r3, #4]
 8000e80:	f003 0303 	and.w	r3, r3, #3
 8000e84:	2b02      	cmp	r3, #2
 8000e86:	d123      	bne.n	8000ed0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8000e88:	69fb      	ldr	r3, [r7, #28]
 8000e8a:	08da      	lsrs	r2, r3, #3
 8000e8c:	687b      	ldr	r3, [r7, #4]
 8000e8e:	3208      	adds	r2, #8
 8000e90:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8000e94:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8000e96:	69fb      	ldr	r3, [r7, #28]
 8000e98:	f003 0307 	and.w	r3, r3, #7
 8000e9c:	009b      	lsls	r3, r3, #2
 8000e9e:	220f      	movs	r2, #15
 8000ea0:	fa02 f303 	lsl.w	r3, r2, r3
 8000ea4:	43db      	mvns	r3, r3
 8000ea6:	69ba      	ldr	r2, [r7, #24]
 8000ea8:	4013      	ands	r3, r2
 8000eaa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8000eac:	683b      	ldr	r3, [r7, #0]
 8000eae:	691a      	ldr	r2, [r3, #16]
 8000eb0:	69fb      	ldr	r3, [r7, #28]
 8000eb2:	f003 0307 	and.w	r3, r3, #7
 8000eb6:	009b      	lsls	r3, r3, #2
 8000eb8:	fa02 f303 	lsl.w	r3, r2, r3
 8000ebc:	69ba      	ldr	r2, [r7, #24]
 8000ebe:	4313      	orrs	r3, r2
 8000ec0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8000ec2:	69fb      	ldr	r3, [r7, #28]
 8000ec4:	08da      	lsrs	r2, r3, #3
 8000ec6:	687b      	ldr	r3, [r7, #4]
 8000ec8:	3208      	adds	r2, #8
 8000eca:	69b9      	ldr	r1, [r7, #24]
 8000ecc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8000ed0:	687b      	ldr	r3, [r7, #4]
 8000ed2:	681b      	ldr	r3, [r3, #0]
 8000ed4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8000ed6:	69fb      	ldr	r3, [r7, #28]
 8000ed8:	005b      	lsls	r3, r3, #1
 8000eda:	2203      	movs	r2, #3
 8000edc:	fa02 f303 	lsl.w	r3, r2, r3
 8000ee0:	43db      	mvns	r3, r3
 8000ee2:	69ba      	ldr	r2, [r7, #24]
 8000ee4:	4013      	ands	r3, r2
 8000ee6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8000ee8:	683b      	ldr	r3, [r7, #0]
 8000eea:	685b      	ldr	r3, [r3, #4]
 8000eec:	f003 0203 	and.w	r2, r3, #3
 8000ef0:	69fb      	ldr	r3, [r7, #28]
 8000ef2:	005b      	lsls	r3, r3, #1
 8000ef4:	fa02 f303 	lsl.w	r3, r2, r3
 8000ef8:	69ba      	ldr	r2, [r7, #24]
 8000efa:	4313      	orrs	r3, r2
 8000efc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	69ba      	ldr	r2, [r7, #24]
 8000f02:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8000f04:	683b      	ldr	r3, [r7, #0]
 8000f06:	685b      	ldr	r3, [r3, #4]
 8000f08:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8000f0c:	2b00      	cmp	r3, #0
 8000f0e:	f000 80b4 	beq.w	800107a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000f12:	2300      	movs	r3, #0
 8000f14:	60fb      	str	r3, [r7, #12]
 8000f16:	4b60      	ldr	r3, [pc, #384]	; (8001098 <HAL_GPIO_Init+0x30c>)
 8000f18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f1a:	4a5f      	ldr	r2, [pc, #380]	; (8001098 <HAL_GPIO_Init+0x30c>)
 8000f1c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000f20:	6453      	str	r3, [r2, #68]	; 0x44
 8000f22:	4b5d      	ldr	r3, [pc, #372]	; (8001098 <HAL_GPIO_Init+0x30c>)
 8000f24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000f26:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000f2a:	60fb      	str	r3, [r7, #12]
 8000f2c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8000f2e:	4a5b      	ldr	r2, [pc, #364]	; (800109c <HAL_GPIO_Init+0x310>)
 8000f30:	69fb      	ldr	r3, [r7, #28]
 8000f32:	089b      	lsrs	r3, r3, #2
 8000f34:	3302      	adds	r3, #2
 8000f36:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8000f3a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8000f3c:	69fb      	ldr	r3, [r7, #28]
 8000f3e:	f003 0303 	and.w	r3, r3, #3
 8000f42:	009b      	lsls	r3, r3, #2
 8000f44:	220f      	movs	r2, #15
 8000f46:	fa02 f303 	lsl.w	r3, r2, r3
 8000f4a:	43db      	mvns	r3, r3
 8000f4c:	69ba      	ldr	r2, [r7, #24]
 8000f4e:	4013      	ands	r3, r2
 8000f50:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8000f52:	687b      	ldr	r3, [r7, #4]
 8000f54:	4a52      	ldr	r2, [pc, #328]	; (80010a0 <HAL_GPIO_Init+0x314>)
 8000f56:	4293      	cmp	r3, r2
 8000f58:	d02b      	beq.n	8000fb2 <HAL_GPIO_Init+0x226>
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	4a51      	ldr	r2, [pc, #324]	; (80010a4 <HAL_GPIO_Init+0x318>)
 8000f5e:	4293      	cmp	r3, r2
 8000f60:	d025      	beq.n	8000fae <HAL_GPIO_Init+0x222>
 8000f62:	687b      	ldr	r3, [r7, #4]
 8000f64:	4a50      	ldr	r2, [pc, #320]	; (80010a8 <HAL_GPIO_Init+0x31c>)
 8000f66:	4293      	cmp	r3, r2
 8000f68:	d01f      	beq.n	8000faa <HAL_GPIO_Init+0x21e>
 8000f6a:	687b      	ldr	r3, [r7, #4]
 8000f6c:	4a4f      	ldr	r2, [pc, #316]	; (80010ac <HAL_GPIO_Init+0x320>)
 8000f6e:	4293      	cmp	r3, r2
 8000f70:	d019      	beq.n	8000fa6 <HAL_GPIO_Init+0x21a>
 8000f72:	687b      	ldr	r3, [r7, #4]
 8000f74:	4a4e      	ldr	r2, [pc, #312]	; (80010b0 <HAL_GPIO_Init+0x324>)
 8000f76:	4293      	cmp	r3, r2
 8000f78:	d013      	beq.n	8000fa2 <HAL_GPIO_Init+0x216>
 8000f7a:	687b      	ldr	r3, [r7, #4]
 8000f7c:	4a4d      	ldr	r2, [pc, #308]	; (80010b4 <HAL_GPIO_Init+0x328>)
 8000f7e:	4293      	cmp	r3, r2
 8000f80:	d00d      	beq.n	8000f9e <HAL_GPIO_Init+0x212>
 8000f82:	687b      	ldr	r3, [r7, #4]
 8000f84:	4a4c      	ldr	r2, [pc, #304]	; (80010b8 <HAL_GPIO_Init+0x32c>)
 8000f86:	4293      	cmp	r3, r2
 8000f88:	d007      	beq.n	8000f9a <HAL_GPIO_Init+0x20e>
 8000f8a:	687b      	ldr	r3, [r7, #4]
 8000f8c:	4a4b      	ldr	r2, [pc, #300]	; (80010bc <HAL_GPIO_Init+0x330>)
 8000f8e:	4293      	cmp	r3, r2
 8000f90:	d101      	bne.n	8000f96 <HAL_GPIO_Init+0x20a>
 8000f92:	2307      	movs	r3, #7
 8000f94:	e00e      	b.n	8000fb4 <HAL_GPIO_Init+0x228>
 8000f96:	2308      	movs	r3, #8
 8000f98:	e00c      	b.n	8000fb4 <HAL_GPIO_Init+0x228>
 8000f9a:	2306      	movs	r3, #6
 8000f9c:	e00a      	b.n	8000fb4 <HAL_GPIO_Init+0x228>
 8000f9e:	2305      	movs	r3, #5
 8000fa0:	e008      	b.n	8000fb4 <HAL_GPIO_Init+0x228>
 8000fa2:	2304      	movs	r3, #4
 8000fa4:	e006      	b.n	8000fb4 <HAL_GPIO_Init+0x228>
 8000fa6:	2303      	movs	r3, #3
 8000fa8:	e004      	b.n	8000fb4 <HAL_GPIO_Init+0x228>
 8000faa:	2302      	movs	r3, #2
 8000fac:	e002      	b.n	8000fb4 <HAL_GPIO_Init+0x228>
 8000fae:	2301      	movs	r3, #1
 8000fb0:	e000      	b.n	8000fb4 <HAL_GPIO_Init+0x228>
 8000fb2:	2300      	movs	r3, #0
 8000fb4:	69fa      	ldr	r2, [r7, #28]
 8000fb6:	f002 0203 	and.w	r2, r2, #3
 8000fba:	0092      	lsls	r2, r2, #2
 8000fbc:	4093      	lsls	r3, r2
 8000fbe:	69ba      	ldr	r2, [r7, #24]
 8000fc0:	4313      	orrs	r3, r2
 8000fc2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8000fc4:	4935      	ldr	r1, [pc, #212]	; (800109c <HAL_GPIO_Init+0x310>)
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	089b      	lsrs	r3, r3, #2
 8000fca:	3302      	adds	r3, #2
 8000fcc:	69ba      	ldr	r2, [r7, #24]
 8000fce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8000fd2:	4b3b      	ldr	r3, [pc, #236]	; (80010c0 <HAL_GPIO_Init+0x334>)
 8000fd4:	689b      	ldr	r3, [r3, #8]
 8000fd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8000fd8:	693b      	ldr	r3, [r7, #16]
 8000fda:	43db      	mvns	r3, r3
 8000fdc:	69ba      	ldr	r2, [r7, #24]
 8000fde:	4013      	ands	r3, r2
 8000fe0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8000fe2:	683b      	ldr	r3, [r7, #0]
 8000fe4:	685b      	ldr	r3, [r3, #4]
 8000fe6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8000fea:	2b00      	cmp	r3, #0
 8000fec:	d003      	beq.n	8000ff6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8000fee:	69ba      	ldr	r2, [r7, #24]
 8000ff0:	693b      	ldr	r3, [r7, #16]
 8000ff2:	4313      	orrs	r3, r2
 8000ff4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8000ff6:	4a32      	ldr	r2, [pc, #200]	; (80010c0 <HAL_GPIO_Init+0x334>)
 8000ff8:	69bb      	ldr	r3, [r7, #24]
 8000ffa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8000ffc:	4b30      	ldr	r3, [pc, #192]	; (80010c0 <HAL_GPIO_Init+0x334>)
 8000ffe:	68db      	ldr	r3, [r3, #12]
 8001000:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001002:	693b      	ldr	r3, [r7, #16]
 8001004:	43db      	mvns	r3, r3
 8001006:	69ba      	ldr	r2, [r7, #24]
 8001008:	4013      	ands	r3, r2
 800100a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800100c:	683b      	ldr	r3, [r7, #0]
 800100e:	685b      	ldr	r3, [r3, #4]
 8001010:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001014:	2b00      	cmp	r3, #0
 8001016:	d003      	beq.n	8001020 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8001018:	69ba      	ldr	r2, [r7, #24]
 800101a:	693b      	ldr	r3, [r7, #16]
 800101c:	4313      	orrs	r3, r2
 800101e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8001020:	4a27      	ldr	r2, [pc, #156]	; (80010c0 <HAL_GPIO_Init+0x334>)
 8001022:	69bb      	ldr	r3, [r7, #24]
 8001024:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001026:	4b26      	ldr	r3, [pc, #152]	; (80010c0 <HAL_GPIO_Init+0x334>)
 8001028:	685b      	ldr	r3, [r3, #4]
 800102a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800102c:	693b      	ldr	r3, [r7, #16]
 800102e:	43db      	mvns	r3, r3
 8001030:	69ba      	ldr	r2, [r7, #24]
 8001032:	4013      	ands	r3, r2
 8001034:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8001036:	683b      	ldr	r3, [r7, #0]
 8001038:	685b      	ldr	r3, [r3, #4]
 800103a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800103e:	2b00      	cmp	r3, #0
 8001040:	d003      	beq.n	800104a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8001042:	69ba      	ldr	r2, [r7, #24]
 8001044:	693b      	ldr	r3, [r7, #16]
 8001046:	4313      	orrs	r3, r2
 8001048:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800104a:	4a1d      	ldr	r2, [pc, #116]	; (80010c0 <HAL_GPIO_Init+0x334>)
 800104c:	69bb      	ldr	r3, [r7, #24]
 800104e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8001050:	4b1b      	ldr	r3, [pc, #108]	; (80010c0 <HAL_GPIO_Init+0x334>)
 8001052:	681b      	ldr	r3, [r3, #0]
 8001054:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001056:	693b      	ldr	r3, [r7, #16]
 8001058:	43db      	mvns	r3, r3
 800105a:	69ba      	ldr	r2, [r7, #24]
 800105c:	4013      	ands	r3, r2
 800105e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8001060:	683b      	ldr	r3, [r7, #0]
 8001062:	685b      	ldr	r3, [r3, #4]
 8001064:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8001068:	2b00      	cmp	r3, #0
 800106a:	d003      	beq.n	8001074 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800106c:	69ba      	ldr	r2, [r7, #24]
 800106e:	693b      	ldr	r3, [r7, #16]
 8001070:	4313      	orrs	r3, r2
 8001072:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8001074:	4a12      	ldr	r2, [pc, #72]	; (80010c0 <HAL_GPIO_Init+0x334>)
 8001076:	69bb      	ldr	r3, [r7, #24]
 8001078:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800107a:	69fb      	ldr	r3, [r7, #28]
 800107c:	3301      	adds	r3, #1
 800107e:	61fb      	str	r3, [r7, #28]
 8001080:	69fb      	ldr	r3, [r7, #28]
 8001082:	2b0f      	cmp	r3, #15
 8001084:	f67f ae90 	bls.w	8000da8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8001088:	bf00      	nop
 800108a:	bf00      	nop
 800108c:	3724      	adds	r7, #36	; 0x24
 800108e:	46bd      	mov	sp, r7
 8001090:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001094:	4770      	bx	lr
 8001096:	bf00      	nop
 8001098:	40023800 	.word	0x40023800
 800109c:	40013800 	.word	0x40013800
 80010a0:	40020000 	.word	0x40020000
 80010a4:	40020400 	.word	0x40020400
 80010a8:	40020800 	.word	0x40020800
 80010ac:	40020c00 	.word	0x40020c00
 80010b0:	40021000 	.word	0x40021000
 80010b4:	40021400 	.word	0x40021400
 80010b8:	40021800 	.word	0x40021800
 80010bc:	40021c00 	.word	0x40021c00
 80010c0:	40013c00 	.word	0x40013c00

080010c4 <HAL_GPIO_DeInit>:
  * @param  GPIO_Pin specifies the port bit to be written.
  *          This parameter can be one of GPIO_PIN_x where x can be (0..15).
  * @retval None
  */
void HAL_GPIO_DeInit(GPIO_TypeDef  *GPIOx, uint32_t GPIO_Pin)
{
 80010c4:	b480      	push	{r7}
 80010c6:	b087      	sub	sp, #28
 80010c8:	af00      	add	r7, sp, #0
 80010ca:	6078      	str	r0, [r7, #4]
 80010cc:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80010ce:	2300      	movs	r3, #0
 80010d0:	613b      	str	r3, [r7, #16]
  uint32_t iocurrent = 0x00U;
 80010d2:	2300      	movs	r3, #0
 80010d4:	60fb      	str	r3, [r7, #12]
  uint32_t tmp = 0x00U;
 80010d6:	2300      	movs	r3, #0
 80010d8:	60bb      	str	r3, [r7, #8]

  /* Check the parameters */
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  
  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80010da:	2300      	movs	r3, #0
 80010dc:	617b      	str	r3, [r7, #20]
 80010de:	e0cd      	b.n	800127c <HAL_GPIO_DeInit+0x1b8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80010e0:	2201      	movs	r2, #1
 80010e2:	697b      	ldr	r3, [r7, #20]
 80010e4:	fa02 f303 	lsl.w	r3, r2, r3
 80010e8:	613b      	str	r3, [r7, #16]
    /* Get the current IO position */
    iocurrent = (GPIO_Pin) & ioposition;
 80010ea:	683a      	ldr	r2, [r7, #0]
 80010ec:	693b      	ldr	r3, [r7, #16]
 80010ee:	4013      	ands	r3, r2
 80010f0:	60fb      	str	r3, [r7, #12]

    if(iocurrent == ioposition)
 80010f2:	68fa      	ldr	r2, [r7, #12]
 80010f4:	693b      	ldr	r3, [r7, #16]
 80010f6:	429a      	cmp	r2, r3
 80010f8:	f040 80bd 	bne.w	8001276 <HAL_GPIO_DeInit+0x1b2>
    {
      /*------------------------- EXTI Mode Configuration --------------------*/
      tmp = SYSCFG->EXTICR[position >> 2U];
 80010fc:	4a65      	ldr	r2, [pc, #404]	; (8001294 <HAL_GPIO_DeInit+0x1d0>)
 80010fe:	697b      	ldr	r3, [r7, #20]
 8001100:	089b      	lsrs	r3, r3, #2
 8001102:	3302      	adds	r3, #2
 8001104:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8001108:	60bb      	str	r3, [r7, #8]
      tmp &= (0x0FU << (4U * (position & 0x03U)));
 800110a:	697b      	ldr	r3, [r7, #20]
 800110c:	f003 0303 	and.w	r3, r3, #3
 8001110:	009b      	lsls	r3, r3, #2
 8001112:	220f      	movs	r2, #15
 8001114:	fa02 f303 	lsl.w	r3, r2, r3
 8001118:	68ba      	ldr	r2, [r7, #8]
 800111a:	4013      	ands	r3, r2
 800111c:	60bb      	str	r3, [r7, #8]
      if(tmp == ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U))))
 800111e:	687b      	ldr	r3, [r7, #4]
 8001120:	4a5d      	ldr	r2, [pc, #372]	; (8001298 <HAL_GPIO_DeInit+0x1d4>)
 8001122:	4293      	cmp	r3, r2
 8001124:	d02b      	beq.n	800117e <HAL_GPIO_DeInit+0xba>
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	4a5c      	ldr	r2, [pc, #368]	; (800129c <HAL_GPIO_DeInit+0x1d8>)
 800112a:	4293      	cmp	r3, r2
 800112c:	d025      	beq.n	800117a <HAL_GPIO_DeInit+0xb6>
 800112e:	687b      	ldr	r3, [r7, #4]
 8001130:	4a5b      	ldr	r2, [pc, #364]	; (80012a0 <HAL_GPIO_DeInit+0x1dc>)
 8001132:	4293      	cmp	r3, r2
 8001134:	d01f      	beq.n	8001176 <HAL_GPIO_DeInit+0xb2>
 8001136:	687b      	ldr	r3, [r7, #4]
 8001138:	4a5a      	ldr	r2, [pc, #360]	; (80012a4 <HAL_GPIO_DeInit+0x1e0>)
 800113a:	4293      	cmp	r3, r2
 800113c:	d019      	beq.n	8001172 <HAL_GPIO_DeInit+0xae>
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	4a59      	ldr	r2, [pc, #356]	; (80012a8 <HAL_GPIO_DeInit+0x1e4>)
 8001142:	4293      	cmp	r3, r2
 8001144:	d013      	beq.n	800116e <HAL_GPIO_DeInit+0xaa>
 8001146:	687b      	ldr	r3, [r7, #4]
 8001148:	4a58      	ldr	r2, [pc, #352]	; (80012ac <HAL_GPIO_DeInit+0x1e8>)
 800114a:	4293      	cmp	r3, r2
 800114c:	d00d      	beq.n	800116a <HAL_GPIO_DeInit+0xa6>
 800114e:	687b      	ldr	r3, [r7, #4]
 8001150:	4a57      	ldr	r2, [pc, #348]	; (80012b0 <HAL_GPIO_DeInit+0x1ec>)
 8001152:	4293      	cmp	r3, r2
 8001154:	d007      	beq.n	8001166 <HAL_GPIO_DeInit+0xa2>
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	4a56      	ldr	r2, [pc, #344]	; (80012b4 <HAL_GPIO_DeInit+0x1f0>)
 800115a:	4293      	cmp	r3, r2
 800115c:	d101      	bne.n	8001162 <HAL_GPIO_DeInit+0x9e>
 800115e:	2307      	movs	r3, #7
 8001160:	e00e      	b.n	8001180 <HAL_GPIO_DeInit+0xbc>
 8001162:	2308      	movs	r3, #8
 8001164:	e00c      	b.n	8001180 <HAL_GPIO_DeInit+0xbc>
 8001166:	2306      	movs	r3, #6
 8001168:	e00a      	b.n	8001180 <HAL_GPIO_DeInit+0xbc>
 800116a:	2305      	movs	r3, #5
 800116c:	e008      	b.n	8001180 <HAL_GPIO_DeInit+0xbc>
 800116e:	2304      	movs	r3, #4
 8001170:	e006      	b.n	8001180 <HAL_GPIO_DeInit+0xbc>
 8001172:	2303      	movs	r3, #3
 8001174:	e004      	b.n	8001180 <HAL_GPIO_DeInit+0xbc>
 8001176:	2302      	movs	r3, #2
 8001178:	e002      	b.n	8001180 <HAL_GPIO_DeInit+0xbc>
 800117a:	2301      	movs	r3, #1
 800117c:	e000      	b.n	8001180 <HAL_GPIO_DeInit+0xbc>
 800117e:	2300      	movs	r3, #0
 8001180:	697a      	ldr	r2, [r7, #20]
 8001182:	f002 0203 	and.w	r2, r2, #3
 8001186:	0092      	lsls	r2, r2, #2
 8001188:	4093      	lsls	r3, r2
 800118a:	68ba      	ldr	r2, [r7, #8]
 800118c:	429a      	cmp	r2, r3
 800118e:	d132      	bne.n	80011f6 <HAL_GPIO_DeInit+0x132>
      {
        /* Clear EXTI line configuration */
        EXTI->IMR &= ~((uint32_t)iocurrent);
 8001190:	4b49      	ldr	r3, [pc, #292]	; (80012b8 <HAL_GPIO_DeInit+0x1f4>)
 8001192:	681a      	ldr	r2, [r3, #0]
 8001194:	68fb      	ldr	r3, [r7, #12]
 8001196:	43db      	mvns	r3, r3
 8001198:	4947      	ldr	r1, [pc, #284]	; (80012b8 <HAL_GPIO_DeInit+0x1f4>)
 800119a:	4013      	ands	r3, r2
 800119c:	600b      	str	r3, [r1, #0]
        EXTI->EMR &= ~((uint32_t)iocurrent);
 800119e:	4b46      	ldr	r3, [pc, #280]	; (80012b8 <HAL_GPIO_DeInit+0x1f4>)
 80011a0:	685a      	ldr	r2, [r3, #4]
 80011a2:	68fb      	ldr	r3, [r7, #12]
 80011a4:	43db      	mvns	r3, r3
 80011a6:	4944      	ldr	r1, [pc, #272]	; (80012b8 <HAL_GPIO_DeInit+0x1f4>)
 80011a8:	4013      	ands	r3, r2
 80011aa:	604b      	str	r3, [r1, #4]
        
        /* Clear Rising Falling edge configuration */
        EXTI->FTSR &= ~((uint32_t)iocurrent);
 80011ac:	4b42      	ldr	r3, [pc, #264]	; (80012b8 <HAL_GPIO_DeInit+0x1f4>)
 80011ae:	68da      	ldr	r2, [r3, #12]
 80011b0:	68fb      	ldr	r3, [r7, #12]
 80011b2:	43db      	mvns	r3, r3
 80011b4:	4940      	ldr	r1, [pc, #256]	; (80012b8 <HAL_GPIO_DeInit+0x1f4>)
 80011b6:	4013      	ands	r3, r2
 80011b8:	60cb      	str	r3, [r1, #12]
        EXTI->RTSR &= ~((uint32_t)iocurrent);
 80011ba:	4b3f      	ldr	r3, [pc, #252]	; (80012b8 <HAL_GPIO_DeInit+0x1f4>)
 80011bc:	689a      	ldr	r2, [r3, #8]
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	43db      	mvns	r3, r3
 80011c2:	493d      	ldr	r1, [pc, #244]	; (80012b8 <HAL_GPIO_DeInit+0x1f4>)
 80011c4:	4013      	ands	r3, r2
 80011c6:	608b      	str	r3, [r1, #8]

        /* Configure the External Interrupt or event for the current IO */
        tmp = 0x0FU << (4U * (position & 0x03U));
 80011c8:	697b      	ldr	r3, [r7, #20]
 80011ca:	f003 0303 	and.w	r3, r3, #3
 80011ce:	009b      	lsls	r3, r3, #2
 80011d0:	220f      	movs	r2, #15
 80011d2:	fa02 f303 	lsl.w	r3, r2, r3
 80011d6:	60bb      	str	r3, [r7, #8]
        SYSCFG->EXTICR[position >> 2U] &= ~tmp;
 80011d8:	4a2e      	ldr	r2, [pc, #184]	; (8001294 <HAL_GPIO_DeInit+0x1d0>)
 80011da:	697b      	ldr	r3, [r7, #20]
 80011dc:	089b      	lsrs	r3, r3, #2
 80011de:	3302      	adds	r3, #2
 80011e0:	f852 1023 	ldr.w	r1, [r2, r3, lsl #2]
 80011e4:	68bb      	ldr	r3, [r7, #8]
 80011e6:	43da      	mvns	r2, r3
 80011e8:	482a      	ldr	r0, [pc, #168]	; (8001294 <HAL_GPIO_DeInit+0x1d0>)
 80011ea:	697b      	ldr	r3, [r7, #20]
 80011ec:	089b      	lsrs	r3, r3, #2
 80011ee:	400a      	ands	r2, r1
 80011f0:	3302      	adds	r3, #2
 80011f2:	f840 2023 	str.w	r2, [r0, r3, lsl #2]
      }

      /*------------------------- GPIO Mode Configuration --------------------*/
      /* Configure IO Direction in Input Floating Mode */
      GPIOx->MODER &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	681a      	ldr	r2, [r3, #0]
 80011fa:	697b      	ldr	r3, [r7, #20]
 80011fc:	005b      	lsls	r3, r3, #1
 80011fe:	2103      	movs	r1, #3
 8001200:	fa01 f303 	lsl.w	r3, r1, r3
 8001204:	43db      	mvns	r3, r3
 8001206:	401a      	ands	r2, r3
 8001208:	687b      	ldr	r3, [r7, #4]
 800120a:	601a      	str	r2, [r3, #0]

      /* Configure the default Alternate Function in current IO */
      GPIOx->AFR[position >> 3U] &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800120c:	697b      	ldr	r3, [r7, #20]
 800120e:	08da      	lsrs	r2, r3, #3
 8001210:	687b      	ldr	r3, [r7, #4]
 8001212:	3208      	adds	r2, #8
 8001214:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8001218:	697b      	ldr	r3, [r7, #20]
 800121a:	f003 0307 	and.w	r3, r3, #7
 800121e:	009b      	lsls	r3, r3, #2
 8001220:	220f      	movs	r2, #15
 8001222:	fa02 f303 	lsl.w	r3, r2, r3
 8001226:	43db      	mvns	r3, r3
 8001228:	697a      	ldr	r2, [r7, #20]
 800122a:	08d2      	lsrs	r2, r2, #3
 800122c:	4019      	ands	r1, r3
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	3208      	adds	r2, #8
 8001232:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

      /* Deactivate the Pull-up and Pull-down resistor for the current IO */
      GPIOx->PUPDR &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	68da      	ldr	r2, [r3, #12]
 800123a:	697b      	ldr	r3, [r7, #20]
 800123c:	005b      	lsls	r3, r3, #1
 800123e:	2103      	movs	r1, #3
 8001240:	fa01 f303 	lsl.w	r3, r1, r3
 8001244:	43db      	mvns	r3, r3
 8001246:	401a      	ands	r2, r3
 8001248:	687b      	ldr	r3, [r7, #4]
 800124a:	60da      	str	r2, [r3, #12]

      /* Configure the default value IO Output Type */
      GPIOx->OTYPER  &= ~(GPIO_OTYPER_OT_0 << position) ;
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	685a      	ldr	r2, [r3, #4]
 8001250:	2101      	movs	r1, #1
 8001252:	697b      	ldr	r3, [r7, #20]
 8001254:	fa01 f303 	lsl.w	r3, r1, r3
 8001258:	43db      	mvns	r3, r3
 800125a:	401a      	ands	r2, r3
 800125c:	687b      	ldr	r3, [r7, #4]
 800125e:	605a      	str	r2, [r3, #4]

      /* Configure the default value for IO Speed */
      GPIOx->OSPEEDR &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	689a      	ldr	r2, [r3, #8]
 8001264:	697b      	ldr	r3, [r7, #20]
 8001266:	005b      	lsls	r3, r3, #1
 8001268:	2103      	movs	r1, #3
 800126a:	fa01 f303 	lsl.w	r3, r1, r3
 800126e:	43db      	mvns	r3, r3
 8001270:	401a      	ands	r2, r3
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	609a      	str	r2, [r3, #8]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001276:	697b      	ldr	r3, [r7, #20]
 8001278:	3301      	adds	r3, #1
 800127a:	617b      	str	r3, [r7, #20]
 800127c:	697b      	ldr	r3, [r7, #20]
 800127e:	2b0f      	cmp	r3, #15
 8001280:	f67f af2e 	bls.w	80010e0 <HAL_GPIO_DeInit+0x1c>
    }
  }
}
 8001284:	bf00      	nop
 8001286:	bf00      	nop
 8001288:	371c      	adds	r7, #28
 800128a:	46bd      	mov	sp, r7
 800128c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001290:	4770      	bx	lr
 8001292:	bf00      	nop
 8001294:	40013800 	.word	0x40013800
 8001298:	40020000 	.word	0x40020000
 800129c:	40020400 	.word	0x40020400
 80012a0:	40020800 	.word	0x40020800
 80012a4:	40020c00 	.word	0x40020c00
 80012a8:	40021000 	.word	0x40021000
 80012ac:	40021400 	.word	0x40021400
 80012b0:	40021800 	.word	0x40021800
 80012b4:	40021c00 	.word	0x40021c00
 80012b8:	40013c00 	.word	0x40013c00

080012bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	b086      	sub	sp, #24
 80012c0:	af00      	add	r7, sp, #0
 80012c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d101      	bne.n	80012ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80012ca:	2301      	movs	r3, #1
 80012cc:	e267      	b.n	800179e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	681b      	ldr	r3, [r3, #0]
 80012d2:	f003 0301 	and.w	r3, r3, #1
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d075      	beq.n	80013c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012da:	4b88      	ldr	r3, [pc, #544]	; (80014fc <HAL_RCC_OscConfig+0x240>)
 80012dc:	689b      	ldr	r3, [r3, #8]
 80012de:	f003 030c 	and.w	r3, r3, #12
 80012e2:	2b04      	cmp	r3, #4
 80012e4:	d00c      	beq.n	8001300 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012e6:	4b85      	ldr	r3, [pc, #532]	; (80014fc <HAL_RCC_OscConfig+0x240>)
 80012e8:	689b      	ldr	r3, [r3, #8]
 80012ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80012ee:	2b08      	cmp	r3, #8
 80012f0:	d112      	bne.n	8001318 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80012f2:	4b82      	ldr	r3, [pc, #520]	; (80014fc <HAL_RCC_OscConfig+0x240>)
 80012f4:	685b      	ldr	r3, [r3, #4]
 80012f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80012fe:	d10b      	bne.n	8001318 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001300:	4b7e      	ldr	r3, [pc, #504]	; (80014fc <HAL_RCC_OscConfig+0x240>)
 8001302:	681b      	ldr	r3, [r3, #0]
 8001304:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001308:	2b00      	cmp	r3, #0
 800130a:	d05b      	beq.n	80013c4 <HAL_RCC_OscConfig+0x108>
 800130c:	687b      	ldr	r3, [r7, #4]
 800130e:	685b      	ldr	r3, [r3, #4]
 8001310:	2b00      	cmp	r3, #0
 8001312:	d157      	bne.n	80013c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8001314:	2301      	movs	r3, #1
 8001316:	e242      	b.n	800179e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8001318:	687b      	ldr	r3, [r7, #4]
 800131a:	685b      	ldr	r3, [r3, #4]
 800131c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8001320:	d106      	bne.n	8001330 <HAL_RCC_OscConfig+0x74>
 8001322:	4b76      	ldr	r3, [pc, #472]	; (80014fc <HAL_RCC_OscConfig+0x240>)
 8001324:	681b      	ldr	r3, [r3, #0]
 8001326:	4a75      	ldr	r2, [pc, #468]	; (80014fc <HAL_RCC_OscConfig+0x240>)
 8001328:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800132c:	6013      	str	r3, [r2, #0]
 800132e:	e01d      	b.n	800136c <HAL_RCC_OscConfig+0xb0>
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	685b      	ldr	r3, [r3, #4]
 8001334:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8001338:	d10c      	bne.n	8001354 <HAL_RCC_OscConfig+0x98>
 800133a:	4b70      	ldr	r3, [pc, #448]	; (80014fc <HAL_RCC_OscConfig+0x240>)
 800133c:	681b      	ldr	r3, [r3, #0]
 800133e:	4a6f      	ldr	r2, [pc, #444]	; (80014fc <HAL_RCC_OscConfig+0x240>)
 8001340:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8001344:	6013      	str	r3, [r2, #0]
 8001346:	4b6d      	ldr	r3, [pc, #436]	; (80014fc <HAL_RCC_OscConfig+0x240>)
 8001348:	681b      	ldr	r3, [r3, #0]
 800134a:	4a6c      	ldr	r2, [pc, #432]	; (80014fc <HAL_RCC_OscConfig+0x240>)
 800134c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8001350:	6013      	str	r3, [r2, #0]
 8001352:	e00b      	b.n	800136c <HAL_RCC_OscConfig+0xb0>
 8001354:	4b69      	ldr	r3, [pc, #420]	; (80014fc <HAL_RCC_OscConfig+0x240>)
 8001356:	681b      	ldr	r3, [r3, #0]
 8001358:	4a68      	ldr	r2, [pc, #416]	; (80014fc <HAL_RCC_OscConfig+0x240>)
 800135a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800135e:	6013      	str	r3, [r2, #0]
 8001360:	4b66      	ldr	r3, [pc, #408]	; (80014fc <HAL_RCC_OscConfig+0x240>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	4a65      	ldr	r2, [pc, #404]	; (80014fc <HAL_RCC_OscConfig+0x240>)
 8001366:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800136a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800136c:	687b      	ldr	r3, [r7, #4]
 800136e:	685b      	ldr	r3, [r3, #4]
 8001370:	2b00      	cmp	r3, #0
 8001372:	d013      	beq.n	800139c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001374:	f7ff fbf4 	bl	8000b60 <HAL_GetTick>
 8001378:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800137a:	e008      	b.n	800138e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800137c:	f7ff fbf0 	bl	8000b60 <HAL_GetTick>
 8001380:	4602      	mov	r2, r0
 8001382:	693b      	ldr	r3, [r7, #16]
 8001384:	1ad3      	subs	r3, r2, r3
 8001386:	2b64      	cmp	r3, #100	; 0x64
 8001388:	d901      	bls.n	800138e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800138a:	2303      	movs	r3, #3
 800138c:	e207      	b.n	800179e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800138e:	4b5b      	ldr	r3, [pc, #364]	; (80014fc <HAL_RCC_OscConfig+0x240>)
 8001390:	681b      	ldr	r3, [r3, #0]
 8001392:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001396:	2b00      	cmp	r3, #0
 8001398:	d0f0      	beq.n	800137c <HAL_RCC_OscConfig+0xc0>
 800139a:	e014      	b.n	80013c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800139c:	f7ff fbe0 	bl	8000b60 <HAL_GetTick>
 80013a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013a2:	e008      	b.n	80013b6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80013a4:	f7ff fbdc 	bl	8000b60 <HAL_GetTick>
 80013a8:	4602      	mov	r2, r0
 80013aa:	693b      	ldr	r3, [r7, #16]
 80013ac:	1ad3      	subs	r3, r2, r3
 80013ae:	2b64      	cmp	r3, #100	; 0x64
 80013b0:	d901      	bls.n	80013b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80013b2:	2303      	movs	r3, #3
 80013b4:	e1f3      	b.n	800179e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80013b6:	4b51      	ldr	r3, [pc, #324]	; (80014fc <HAL_RCC_OscConfig+0x240>)
 80013b8:	681b      	ldr	r3, [r3, #0]
 80013ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80013be:	2b00      	cmp	r3, #0
 80013c0:	d1f0      	bne.n	80013a4 <HAL_RCC_OscConfig+0xe8>
 80013c2:	e000      	b.n	80013c6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80013c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80013c6:	687b      	ldr	r3, [r7, #4]
 80013c8:	681b      	ldr	r3, [r3, #0]
 80013ca:	f003 0302 	and.w	r3, r3, #2
 80013ce:	2b00      	cmp	r3, #0
 80013d0:	d063      	beq.n	800149a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013d2:	4b4a      	ldr	r3, [pc, #296]	; (80014fc <HAL_RCC_OscConfig+0x240>)
 80013d4:	689b      	ldr	r3, [r3, #8]
 80013d6:	f003 030c 	and.w	r3, r3, #12
 80013da:	2b00      	cmp	r3, #0
 80013dc:	d00b      	beq.n	80013f6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013de:	4b47      	ldr	r3, [pc, #284]	; (80014fc <HAL_RCC_OscConfig+0x240>)
 80013e0:	689b      	ldr	r3, [r3, #8]
 80013e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80013e6:	2b08      	cmp	r3, #8
 80013e8:	d11c      	bne.n	8001424 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80013ea:	4b44      	ldr	r3, [pc, #272]	; (80014fc <HAL_RCC_OscConfig+0x240>)
 80013ec:	685b      	ldr	r3, [r3, #4]
 80013ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d116      	bne.n	8001424 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80013f6:	4b41      	ldr	r3, [pc, #260]	; (80014fc <HAL_RCC_OscConfig+0x240>)
 80013f8:	681b      	ldr	r3, [r3, #0]
 80013fa:	f003 0302 	and.w	r3, r3, #2
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d005      	beq.n	800140e <HAL_RCC_OscConfig+0x152>
 8001402:	687b      	ldr	r3, [r7, #4]
 8001404:	68db      	ldr	r3, [r3, #12]
 8001406:	2b01      	cmp	r3, #1
 8001408:	d001      	beq.n	800140e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800140a:	2301      	movs	r3, #1
 800140c:	e1c7      	b.n	800179e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800140e:	4b3b      	ldr	r3, [pc, #236]	; (80014fc <HAL_RCC_OscConfig+0x240>)
 8001410:	681b      	ldr	r3, [r3, #0]
 8001412:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001416:	687b      	ldr	r3, [r7, #4]
 8001418:	691b      	ldr	r3, [r3, #16]
 800141a:	00db      	lsls	r3, r3, #3
 800141c:	4937      	ldr	r1, [pc, #220]	; (80014fc <HAL_RCC_OscConfig+0x240>)
 800141e:	4313      	orrs	r3, r2
 8001420:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001422:	e03a      	b.n	800149a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8001424:	687b      	ldr	r3, [r7, #4]
 8001426:	68db      	ldr	r3, [r3, #12]
 8001428:	2b00      	cmp	r3, #0
 800142a:	d020      	beq.n	800146e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800142c:	4b34      	ldr	r3, [pc, #208]	; (8001500 <HAL_RCC_OscConfig+0x244>)
 800142e:	2201      	movs	r2, #1
 8001430:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001432:	f7ff fb95 	bl	8000b60 <HAL_GetTick>
 8001436:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001438:	e008      	b.n	800144c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800143a:	f7ff fb91 	bl	8000b60 <HAL_GetTick>
 800143e:	4602      	mov	r2, r0
 8001440:	693b      	ldr	r3, [r7, #16]
 8001442:	1ad3      	subs	r3, r2, r3
 8001444:	2b02      	cmp	r3, #2
 8001446:	d901      	bls.n	800144c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8001448:	2303      	movs	r3, #3
 800144a:	e1a8      	b.n	800179e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800144c:	4b2b      	ldr	r3, [pc, #172]	; (80014fc <HAL_RCC_OscConfig+0x240>)
 800144e:	681b      	ldr	r3, [r3, #0]
 8001450:	f003 0302 	and.w	r3, r3, #2
 8001454:	2b00      	cmp	r3, #0
 8001456:	d0f0      	beq.n	800143a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8001458:	4b28      	ldr	r3, [pc, #160]	; (80014fc <HAL_RCC_OscConfig+0x240>)
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8001460:	687b      	ldr	r3, [r7, #4]
 8001462:	691b      	ldr	r3, [r3, #16]
 8001464:	00db      	lsls	r3, r3, #3
 8001466:	4925      	ldr	r1, [pc, #148]	; (80014fc <HAL_RCC_OscConfig+0x240>)
 8001468:	4313      	orrs	r3, r2
 800146a:	600b      	str	r3, [r1, #0]
 800146c:	e015      	b.n	800149a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800146e:	4b24      	ldr	r3, [pc, #144]	; (8001500 <HAL_RCC_OscConfig+0x244>)
 8001470:	2200      	movs	r2, #0
 8001472:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001474:	f7ff fb74 	bl	8000b60 <HAL_GetTick>
 8001478:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800147a:	e008      	b.n	800148e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800147c:	f7ff fb70 	bl	8000b60 <HAL_GetTick>
 8001480:	4602      	mov	r2, r0
 8001482:	693b      	ldr	r3, [r7, #16]
 8001484:	1ad3      	subs	r3, r2, r3
 8001486:	2b02      	cmp	r3, #2
 8001488:	d901      	bls.n	800148e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800148a:	2303      	movs	r3, #3
 800148c:	e187      	b.n	800179e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800148e:	4b1b      	ldr	r3, [pc, #108]	; (80014fc <HAL_RCC_OscConfig+0x240>)
 8001490:	681b      	ldr	r3, [r3, #0]
 8001492:	f003 0302 	and.w	r3, r3, #2
 8001496:	2b00      	cmp	r3, #0
 8001498:	d1f0      	bne.n	800147c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	f003 0308 	and.w	r3, r3, #8
 80014a2:	2b00      	cmp	r3, #0
 80014a4:	d036      	beq.n	8001514 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80014a6:	687b      	ldr	r3, [r7, #4]
 80014a8:	695b      	ldr	r3, [r3, #20]
 80014aa:	2b00      	cmp	r3, #0
 80014ac:	d016      	beq.n	80014dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80014ae:	4b15      	ldr	r3, [pc, #84]	; (8001504 <HAL_RCC_OscConfig+0x248>)
 80014b0:	2201      	movs	r2, #1
 80014b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80014b4:	f7ff fb54 	bl	8000b60 <HAL_GetTick>
 80014b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014ba:	e008      	b.n	80014ce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014bc:	f7ff fb50 	bl	8000b60 <HAL_GetTick>
 80014c0:	4602      	mov	r2, r0
 80014c2:	693b      	ldr	r3, [r7, #16]
 80014c4:	1ad3      	subs	r3, r2, r3
 80014c6:	2b02      	cmp	r3, #2
 80014c8:	d901      	bls.n	80014ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80014ca:	2303      	movs	r3, #3
 80014cc:	e167      	b.n	800179e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80014ce:	4b0b      	ldr	r3, [pc, #44]	; (80014fc <HAL_RCC_OscConfig+0x240>)
 80014d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80014d2:	f003 0302 	and.w	r3, r3, #2
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d0f0      	beq.n	80014bc <HAL_RCC_OscConfig+0x200>
 80014da:	e01b      	b.n	8001514 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80014dc:	4b09      	ldr	r3, [pc, #36]	; (8001504 <HAL_RCC_OscConfig+0x248>)
 80014de:	2200      	movs	r2, #0
 80014e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80014e2:	f7ff fb3d 	bl	8000b60 <HAL_GetTick>
 80014e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80014e8:	e00e      	b.n	8001508 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80014ea:	f7ff fb39 	bl	8000b60 <HAL_GetTick>
 80014ee:	4602      	mov	r2, r0
 80014f0:	693b      	ldr	r3, [r7, #16]
 80014f2:	1ad3      	subs	r3, r2, r3
 80014f4:	2b02      	cmp	r3, #2
 80014f6:	d907      	bls.n	8001508 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80014f8:	2303      	movs	r3, #3
 80014fa:	e150      	b.n	800179e <HAL_RCC_OscConfig+0x4e2>
 80014fc:	40023800 	.word	0x40023800
 8001500:	42470000 	.word	0x42470000
 8001504:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001508:	4b88      	ldr	r3, [pc, #544]	; (800172c <HAL_RCC_OscConfig+0x470>)
 800150a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800150c:	f003 0302 	and.w	r3, r3, #2
 8001510:	2b00      	cmp	r3, #0
 8001512:	d1ea      	bne.n	80014ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8001514:	687b      	ldr	r3, [r7, #4]
 8001516:	681b      	ldr	r3, [r3, #0]
 8001518:	f003 0304 	and.w	r3, r3, #4
 800151c:	2b00      	cmp	r3, #0
 800151e:	f000 8097 	beq.w	8001650 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8001522:	2300      	movs	r3, #0
 8001524:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8001526:	4b81      	ldr	r3, [pc, #516]	; (800172c <HAL_RCC_OscConfig+0x470>)
 8001528:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800152a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800152e:	2b00      	cmp	r3, #0
 8001530:	d10f      	bne.n	8001552 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8001532:	2300      	movs	r3, #0
 8001534:	60bb      	str	r3, [r7, #8]
 8001536:	4b7d      	ldr	r3, [pc, #500]	; (800172c <HAL_RCC_OscConfig+0x470>)
 8001538:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800153a:	4a7c      	ldr	r2, [pc, #496]	; (800172c <HAL_RCC_OscConfig+0x470>)
 800153c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001540:	6413      	str	r3, [r2, #64]	; 0x40
 8001542:	4b7a      	ldr	r3, [pc, #488]	; (800172c <HAL_RCC_OscConfig+0x470>)
 8001544:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001546:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800154a:	60bb      	str	r3, [r7, #8]
 800154c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800154e:	2301      	movs	r3, #1
 8001550:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001552:	4b77      	ldr	r3, [pc, #476]	; (8001730 <HAL_RCC_OscConfig+0x474>)
 8001554:	681b      	ldr	r3, [r3, #0]
 8001556:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800155a:	2b00      	cmp	r3, #0
 800155c:	d118      	bne.n	8001590 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800155e:	4b74      	ldr	r3, [pc, #464]	; (8001730 <HAL_RCC_OscConfig+0x474>)
 8001560:	681b      	ldr	r3, [r3, #0]
 8001562:	4a73      	ldr	r2, [pc, #460]	; (8001730 <HAL_RCC_OscConfig+0x474>)
 8001564:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8001568:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800156a:	f7ff faf9 	bl	8000b60 <HAL_GetTick>
 800156e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001570:	e008      	b.n	8001584 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8001572:	f7ff faf5 	bl	8000b60 <HAL_GetTick>
 8001576:	4602      	mov	r2, r0
 8001578:	693b      	ldr	r3, [r7, #16]
 800157a:	1ad3      	subs	r3, r2, r3
 800157c:	2b02      	cmp	r3, #2
 800157e:	d901      	bls.n	8001584 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8001580:	2303      	movs	r3, #3
 8001582:	e10c      	b.n	800179e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001584:	4b6a      	ldr	r3, [pc, #424]	; (8001730 <HAL_RCC_OscConfig+0x474>)
 8001586:	681b      	ldr	r3, [r3, #0]
 8001588:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800158c:	2b00      	cmp	r3, #0
 800158e:	d0f0      	beq.n	8001572 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8001590:	687b      	ldr	r3, [r7, #4]
 8001592:	689b      	ldr	r3, [r3, #8]
 8001594:	2b01      	cmp	r3, #1
 8001596:	d106      	bne.n	80015a6 <HAL_RCC_OscConfig+0x2ea>
 8001598:	4b64      	ldr	r3, [pc, #400]	; (800172c <HAL_RCC_OscConfig+0x470>)
 800159a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800159c:	4a63      	ldr	r2, [pc, #396]	; (800172c <HAL_RCC_OscConfig+0x470>)
 800159e:	f043 0301 	orr.w	r3, r3, #1
 80015a2:	6713      	str	r3, [r2, #112]	; 0x70
 80015a4:	e01c      	b.n	80015e0 <HAL_RCC_OscConfig+0x324>
 80015a6:	687b      	ldr	r3, [r7, #4]
 80015a8:	689b      	ldr	r3, [r3, #8]
 80015aa:	2b05      	cmp	r3, #5
 80015ac:	d10c      	bne.n	80015c8 <HAL_RCC_OscConfig+0x30c>
 80015ae:	4b5f      	ldr	r3, [pc, #380]	; (800172c <HAL_RCC_OscConfig+0x470>)
 80015b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015b2:	4a5e      	ldr	r2, [pc, #376]	; (800172c <HAL_RCC_OscConfig+0x470>)
 80015b4:	f043 0304 	orr.w	r3, r3, #4
 80015b8:	6713      	str	r3, [r2, #112]	; 0x70
 80015ba:	4b5c      	ldr	r3, [pc, #368]	; (800172c <HAL_RCC_OscConfig+0x470>)
 80015bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015be:	4a5b      	ldr	r2, [pc, #364]	; (800172c <HAL_RCC_OscConfig+0x470>)
 80015c0:	f043 0301 	orr.w	r3, r3, #1
 80015c4:	6713      	str	r3, [r2, #112]	; 0x70
 80015c6:	e00b      	b.n	80015e0 <HAL_RCC_OscConfig+0x324>
 80015c8:	4b58      	ldr	r3, [pc, #352]	; (800172c <HAL_RCC_OscConfig+0x470>)
 80015ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015cc:	4a57      	ldr	r2, [pc, #348]	; (800172c <HAL_RCC_OscConfig+0x470>)
 80015ce:	f023 0301 	bic.w	r3, r3, #1
 80015d2:	6713      	str	r3, [r2, #112]	; 0x70
 80015d4:	4b55      	ldr	r3, [pc, #340]	; (800172c <HAL_RCC_OscConfig+0x470>)
 80015d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80015d8:	4a54      	ldr	r2, [pc, #336]	; (800172c <HAL_RCC_OscConfig+0x470>)
 80015da:	f023 0304 	bic.w	r3, r3, #4
 80015de:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80015e0:	687b      	ldr	r3, [r7, #4]
 80015e2:	689b      	ldr	r3, [r3, #8]
 80015e4:	2b00      	cmp	r3, #0
 80015e6:	d015      	beq.n	8001614 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80015e8:	f7ff faba 	bl	8000b60 <HAL_GetTick>
 80015ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80015ee:	e00a      	b.n	8001606 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80015f0:	f7ff fab6 	bl	8000b60 <HAL_GetTick>
 80015f4:	4602      	mov	r2, r0
 80015f6:	693b      	ldr	r3, [r7, #16]
 80015f8:	1ad3      	subs	r3, r2, r3
 80015fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80015fe:	4293      	cmp	r3, r2
 8001600:	d901      	bls.n	8001606 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8001602:	2303      	movs	r3, #3
 8001604:	e0cb      	b.n	800179e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8001606:	4b49      	ldr	r3, [pc, #292]	; (800172c <HAL_RCC_OscConfig+0x470>)
 8001608:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800160a:	f003 0302 	and.w	r3, r3, #2
 800160e:	2b00      	cmp	r3, #0
 8001610:	d0ee      	beq.n	80015f0 <HAL_RCC_OscConfig+0x334>
 8001612:	e014      	b.n	800163e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8001614:	f7ff faa4 	bl	8000b60 <HAL_GetTick>
 8001618:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800161a:	e00a      	b.n	8001632 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800161c:	f7ff faa0 	bl	8000b60 <HAL_GetTick>
 8001620:	4602      	mov	r2, r0
 8001622:	693b      	ldr	r3, [r7, #16]
 8001624:	1ad3      	subs	r3, r2, r3
 8001626:	f241 3288 	movw	r2, #5000	; 0x1388
 800162a:	4293      	cmp	r3, r2
 800162c:	d901      	bls.n	8001632 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800162e:	2303      	movs	r3, #3
 8001630:	e0b5      	b.n	800179e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8001632:	4b3e      	ldr	r3, [pc, #248]	; (800172c <HAL_RCC_OscConfig+0x470>)
 8001634:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8001636:	f003 0302 	and.w	r3, r3, #2
 800163a:	2b00      	cmp	r3, #0
 800163c:	d1ee      	bne.n	800161c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800163e:	7dfb      	ldrb	r3, [r7, #23]
 8001640:	2b01      	cmp	r3, #1
 8001642:	d105      	bne.n	8001650 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8001644:	4b39      	ldr	r3, [pc, #228]	; (800172c <HAL_RCC_OscConfig+0x470>)
 8001646:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001648:	4a38      	ldr	r2, [pc, #224]	; (800172c <HAL_RCC_OscConfig+0x470>)
 800164a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800164e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8001650:	687b      	ldr	r3, [r7, #4]
 8001652:	699b      	ldr	r3, [r3, #24]
 8001654:	2b00      	cmp	r3, #0
 8001656:	f000 80a1 	beq.w	800179c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800165a:	4b34      	ldr	r3, [pc, #208]	; (800172c <HAL_RCC_OscConfig+0x470>)
 800165c:	689b      	ldr	r3, [r3, #8]
 800165e:	f003 030c 	and.w	r3, r3, #12
 8001662:	2b08      	cmp	r3, #8
 8001664:	d05c      	beq.n	8001720 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001666:	687b      	ldr	r3, [r7, #4]
 8001668:	699b      	ldr	r3, [r3, #24]
 800166a:	2b02      	cmp	r3, #2
 800166c:	d141      	bne.n	80016f2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800166e:	4b31      	ldr	r3, [pc, #196]	; (8001734 <HAL_RCC_OscConfig+0x478>)
 8001670:	2200      	movs	r2, #0
 8001672:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001674:	f7ff fa74 	bl	8000b60 <HAL_GetTick>
 8001678:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800167a:	e008      	b.n	800168e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800167c:	f7ff fa70 	bl	8000b60 <HAL_GetTick>
 8001680:	4602      	mov	r2, r0
 8001682:	693b      	ldr	r3, [r7, #16]
 8001684:	1ad3      	subs	r3, r2, r3
 8001686:	2b02      	cmp	r3, #2
 8001688:	d901      	bls.n	800168e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800168a:	2303      	movs	r3, #3
 800168c:	e087      	b.n	800179e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800168e:	4b27      	ldr	r3, [pc, #156]	; (800172c <HAL_RCC_OscConfig+0x470>)
 8001690:	681b      	ldr	r3, [r3, #0]
 8001692:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001696:	2b00      	cmp	r3, #0
 8001698:	d1f0      	bne.n	800167c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800169a:	687b      	ldr	r3, [r7, #4]
 800169c:	69da      	ldr	r2, [r3, #28]
 800169e:	687b      	ldr	r3, [r7, #4]
 80016a0:	6a1b      	ldr	r3, [r3, #32]
 80016a2:	431a      	orrs	r2, r3
 80016a4:	687b      	ldr	r3, [r7, #4]
 80016a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016a8:	019b      	lsls	r3, r3, #6
 80016aa:	431a      	orrs	r2, r3
 80016ac:	687b      	ldr	r3, [r7, #4]
 80016ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80016b0:	085b      	lsrs	r3, r3, #1
 80016b2:	3b01      	subs	r3, #1
 80016b4:	041b      	lsls	r3, r3, #16
 80016b6:	431a      	orrs	r2, r3
 80016b8:	687b      	ldr	r3, [r7, #4]
 80016ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80016bc:	061b      	lsls	r3, r3, #24
 80016be:	491b      	ldr	r1, [pc, #108]	; (800172c <HAL_RCC_OscConfig+0x470>)
 80016c0:	4313      	orrs	r3, r2
 80016c2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80016c4:	4b1b      	ldr	r3, [pc, #108]	; (8001734 <HAL_RCC_OscConfig+0x478>)
 80016c6:	2201      	movs	r2, #1
 80016c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016ca:	f7ff fa49 	bl	8000b60 <HAL_GetTick>
 80016ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016d0:	e008      	b.n	80016e4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80016d2:	f7ff fa45 	bl	8000b60 <HAL_GetTick>
 80016d6:	4602      	mov	r2, r0
 80016d8:	693b      	ldr	r3, [r7, #16]
 80016da:	1ad3      	subs	r3, r2, r3
 80016dc:	2b02      	cmp	r3, #2
 80016de:	d901      	bls.n	80016e4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80016e0:	2303      	movs	r3, #3
 80016e2:	e05c      	b.n	800179e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80016e4:	4b11      	ldr	r3, [pc, #68]	; (800172c <HAL_RCC_OscConfig+0x470>)
 80016e6:	681b      	ldr	r3, [r3, #0]
 80016e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d0f0      	beq.n	80016d2 <HAL_RCC_OscConfig+0x416>
 80016f0:	e054      	b.n	800179c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80016f2:	4b10      	ldr	r3, [pc, #64]	; (8001734 <HAL_RCC_OscConfig+0x478>)
 80016f4:	2200      	movs	r2, #0
 80016f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80016f8:	f7ff fa32 	bl	8000b60 <HAL_GetTick>
 80016fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80016fe:	e008      	b.n	8001712 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8001700:	f7ff fa2e 	bl	8000b60 <HAL_GetTick>
 8001704:	4602      	mov	r2, r0
 8001706:	693b      	ldr	r3, [r7, #16]
 8001708:	1ad3      	subs	r3, r2, r3
 800170a:	2b02      	cmp	r3, #2
 800170c:	d901      	bls.n	8001712 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800170e:	2303      	movs	r3, #3
 8001710:	e045      	b.n	800179e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001712:	4b06      	ldr	r3, [pc, #24]	; (800172c <HAL_RCC_OscConfig+0x470>)
 8001714:	681b      	ldr	r3, [r3, #0]
 8001716:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800171a:	2b00      	cmp	r3, #0
 800171c:	d1f0      	bne.n	8001700 <HAL_RCC_OscConfig+0x444>
 800171e:	e03d      	b.n	800179c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	699b      	ldr	r3, [r3, #24]
 8001724:	2b01      	cmp	r3, #1
 8001726:	d107      	bne.n	8001738 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8001728:	2301      	movs	r3, #1
 800172a:	e038      	b.n	800179e <HAL_RCC_OscConfig+0x4e2>
 800172c:	40023800 	.word	0x40023800
 8001730:	40007000 	.word	0x40007000
 8001734:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8001738:	4b1b      	ldr	r3, [pc, #108]	; (80017a8 <HAL_RCC_OscConfig+0x4ec>)
 800173a:	685b      	ldr	r3, [r3, #4]
 800173c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800173e:	687b      	ldr	r3, [r7, #4]
 8001740:	699b      	ldr	r3, [r3, #24]
 8001742:	2b01      	cmp	r3, #1
 8001744:	d028      	beq.n	8001798 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8001746:	68fb      	ldr	r3, [r7, #12]
 8001748:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800174c:	687b      	ldr	r3, [r7, #4]
 800174e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8001750:	429a      	cmp	r2, r3
 8001752:	d121      	bne.n	8001798 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001754:	68fb      	ldr	r3, [r7, #12]
 8001756:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800175a:	687b      	ldr	r3, [r7, #4]
 800175c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800175e:	429a      	cmp	r2, r3
 8001760:	d11a      	bne.n	8001798 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001762:	68fa      	ldr	r2, [r7, #12]
 8001764:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8001768:	4013      	ands	r3, r2
 800176a:	687a      	ldr	r2, [r7, #4]
 800176c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800176e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8001770:	4293      	cmp	r3, r2
 8001772:	d111      	bne.n	8001798 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001774:	68fb      	ldr	r3, [r7, #12]
 8001776:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800177e:	085b      	lsrs	r3, r3, #1
 8001780:	3b01      	subs	r3, #1
 8001782:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001784:	429a      	cmp	r2, r3
 8001786:	d107      	bne.n	8001798 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001788:	68fb      	ldr	r3, [r7, #12]
 800178a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800178e:	687b      	ldr	r3, [r7, #4]
 8001790:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001792:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001794:	429a      	cmp	r2, r3
 8001796:	d001      	beq.n	800179c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8001798:	2301      	movs	r3, #1
 800179a:	e000      	b.n	800179e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800179c:	2300      	movs	r3, #0
}
 800179e:	4618      	mov	r0, r3
 80017a0:	3718      	adds	r7, #24
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bd80      	pop	{r7, pc}
 80017a6:	bf00      	nop
 80017a8:	40023800 	.word	0x40023800

080017ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80017ac:	b580      	push	{r7, lr}
 80017ae:	b084      	sub	sp, #16
 80017b0:	af00      	add	r7, sp, #0
 80017b2:	6078      	str	r0, [r7, #4]
 80017b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	2b00      	cmp	r3, #0
 80017ba:	d101      	bne.n	80017c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80017bc:	2301      	movs	r3, #1
 80017be:	e0cc      	b.n	800195a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80017c0:	4b68      	ldr	r3, [pc, #416]	; (8001964 <HAL_RCC_ClockConfig+0x1b8>)
 80017c2:	681b      	ldr	r3, [r3, #0]
 80017c4:	f003 0307 	and.w	r3, r3, #7
 80017c8:	683a      	ldr	r2, [r7, #0]
 80017ca:	429a      	cmp	r2, r3
 80017cc:	d90c      	bls.n	80017e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80017ce:	4b65      	ldr	r3, [pc, #404]	; (8001964 <HAL_RCC_ClockConfig+0x1b8>)
 80017d0:	683a      	ldr	r2, [r7, #0]
 80017d2:	b2d2      	uxtb	r2, r2
 80017d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80017d6:	4b63      	ldr	r3, [pc, #396]	; (8001964 <HAL_RCC_ClockConfig+0x1b8>)
 80017d8:	681b      	ldr	r3, [r3, #0]
 80017da:	f003 0307 	and.w	r3, r3, #7
 80017de:	683a      	ldr	r2, [r7, #0]
 80017e0:	429a      	cmp	r2, r3
 80017e2:	d001      	beq.n	80017e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80017e4:	2301      	movs	r3, #1
 80017e6:	e0b8      	b.n	800195a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	681b      	ldr	r3, [r3, #0]
 80017ec:	f003 0302 	and.w	r3, r3, #2
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d020      	beq.n	8001836 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f003 0304 	and.w	r3, r3, #4
 80017fc:	2b00      	cmp	r3, #0
 80017fe:	d005      	beq.n	800180c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8001800:	4b59      	ldr	r3, [pc, #356]	; (8001968 <HAL_RCC_ClockConfig+0x1bc>)
 8001802:	689b      	ldr	r3, [r3, #8]
 8001804:	4a58      	ldr	r2, [pc, #352]	; (8001968 <HAL_RCC_ClockConfig+0x1bc>)
 8001806:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800180a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	681b      	ldr	r3, [r3, #0]
 8001810:	f003 0308 	and.w	r3, r3, #8
 8001814:	2b00      	cmp	r3, #0
 8001816:	d005      	beq.n	8001824 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8001818:	4b53      	ldr	r3, [pc, #332]	; (8001968 <HAL_RCC_ClockConfig+0x1bc>)
 800181a:	689b      	ldr	r3, [r3, #8]
 800181c:	4a52      	ldr	r2, [pc, #328]	; (8001968 <HAL_RCC_ClockConfig+0x1bc>)
 800181e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8001822:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8001824:	4b50      	ldr	r3, [pc, #320]	; (8001968 <HAL_RCC_ClockConfig+0x1bc>)
 8001826:	689b      	ldr	r3, [r3, #8]
 8001828:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	689b      	ldr	r3, [r3, #8]
 8001830:	494d      	ldr	r1, [pc, #308]	; (8001968 <HAL_RCC_ClockConfig+0x1bc>)
 8001832:	4313      	orrs	r3, r2
 8001834:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	681b      	ldr	r3, [r3, #0]
 800183a:	f003 0301 	and.w	r3, r3, #1
 800183e:	2b00      	cmp	r3, #0
 8001840:	d044      	beq.n	80018cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8001842:	687b      	ldr	r3, [r7, #4]
 8001844:	685b      	ldr	r3, [r3, #4]
 8001846:	2b01      	cmp	r3, #1
 8001848:	d107      	bne.n	800185a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800184a:	4b47      	ldr	r3, [pc, #284]	; (8001968 <HAL_RCC_ClockConfig+0x1bc>)
 800184c:	681b      	ldr	r3, [r3, #0]
 800184e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8001852:	2b00      	cmp	r3, #0
 8001854:	d119      	bne.n	800188a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001856:	2301      	movs	r3, #1
 8001858:	e07f      	b.n	800195a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	685b      	ldr	r3, [r3, #4]
 800185e:	2b02      	cmp	r3, #2
 8001860:	d003      	beq.n	800186a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8001862:	687b      	ldr	r3, [r7, #4]
 8001864:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001866:	2b03      	cmp	r3, #3
 8001868:	d107      	bne.n	800187a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800186a:	4b3f      	ldr	r3, [pc, #252]	; (8001968 <HAL_RCC_ClockConfig+0x1bc>)
 800186c:	681b      	ldr	r3, [r3, #0]
 800186e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8001872:	2b00      	cmp	r3, #0
 8001874:	d109      	bne.n	800188a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001876:	2301      	movs	r3, #1
 8001878:	e06f      	b.n	800195a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800187a:	4b3b      	ldr	r3, [pc, #236]	; (8001968 <HAL_RCC_ClockConfig+0x1bc>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	f003 0302 	and.w	r3, r3, #2
 8001882:	2b00      	cmp	r3, #0
 8001884:	d101      	bne.n	800188a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001886:	2301      	movs	r3, #1
 8001888:	e067      	b.n	800195a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800188a:	4b37      	ldr	r3, [pc, #220]	; (8001968 <HAL_RCC_ClockConfig+0x1bc>)
 800188c:	689b      	ldr	r3, [r3, #8]
 800188e:	f023 0203 	bic.w	r2, r3, #3
 8001892:	687b      	ldr	r3, [r7, #4]
 8001894:	685b      	ldr	r3, [r3, #4]
 8001896:	4934      	ldr	r1, [pc, #208]	; (8001968 <HAL_RCC_ClockConfig+0x1bc>)
 8001898:	4313      	orrs	r3, r2
 800189a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800189c:	f7ff f960 	bl	8000b60 <HAL_GetTick>
 80018a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018a2:	e00a      	b.n	80018ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80018a4:	f7ff f95c 	bl	8000b60 <HAL_GetTick>
 80018a8:	4602      	mov	r2, r0
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	1ad3      	subs	r3, r2, r3
 80018ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80018b2:	4293      	cmp	r3, r2
 80018b4:	d901      	bls.n	80018ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80018b6:	2303      	movs	r3, #3
 80018b8:	e04f      	b.n	800195a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80018ba:	4b2b      	ldr	r3, [pc, #172]	; (8001968 <HAL_RCC_ClockConfig+0x1bc>)
 80018bc:	689b      	ldr	r3, [r3, #8]
 80018be:	f003 020c 	and.w	r2, r3, #12
 80018c2:	687b      	ldr	r3, [r7, #4]
 80018c4:	685b      	ldr	r3, [r3, #4]
 80018c6:	009b      	lsls	r3, r3, #2
 80018c8:	429a      	cmp	r2, r3
 80018ca:	d1eb      	bne.n	80018a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80018cc:	4b25      	ldr	r3, [pc, #148]	; (8001964 <HAL_RCC_ClockConfig+0x1b8>)
 80018ce:	681b      	ldr	r3, [r3, #0]
 80018d0:	f003 0307 	and.w	r3, r3, #7
 80018d4:	683a      	ldr	r2, [r7, #0]
 80018d6:	429a      	cmp	r2, r3
 80018d8:	d20c      	bcs.n	80018f4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80018da:	4b22      	ldr	r3, [pc, #136]	; (8001964 <HAL_RCC_ClockConfig+0x1b8>)
 80018dc:	683a      	ldr	r2, [r7, #0]
 80018de:	b2d2      	uxtb	r2, r2
 80018e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80018e2:	4b20      	ldr	r3, [pc, #128]	; (8001964 <HAL_RCC_ClockConfig+0x1b8>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	f003 0307 	and.w	r3, r3, #7
 80018ea:	683a      	ldr	r2, [r7, #0]
 80018ec:	429a      	cmp	r2, r3
 80018ee:	d001      	beq.n	80018f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80018f0:	2301      	movs	r3, #1
 80018f2:	e032      	b.n	800195a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80018f4:	687b      	ldr	r3, [r7, #4]
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f003 0304 	and.w	r3, r3, #4
 80018fc:	2b00      	cmp	r3, #0
 80018fe:	d008      	beq.n	8001912 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8001900:	4b19      	ldr	r3, [pc, #100]	; (8001968 <HAL_RCC_ClockConfig+0x1bc>)
 8001902:	689b      	ldr	r3, [r3, #8]
 8001904:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8001908:	687b      	ldr	r3, [r7, #4]
 800190a:	68db      	ldr	r3, [r3, #12]
 800190c:	4916      	ldr	r1, [pc, #88]	; (8001968 <HAL_RCC_ClockConfig+0x1bc>)
 800190e:	4313      	orrs	r3, r2
 8001910:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8001912:	687b      	ldr	r3, [r7, #4]
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	f003 0308 	and.w	r3, r3, #8
 800191a:	2b00      	cmp	r3, #0
 800191c:	d009      	beq.n	8001932 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800191e:	4b12      	ldr	r3, [pc, #72]	; (8001968 <HAL_RCC_ClockConfig+0x1bc>)
 8001920:	689b      	ldr	r3, [r3, #8]
 8001922:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8001926:	687b      	ldr	r3, [r7, #4]
 8001928:	691b      	ldr	r3, [r3, #16]
 800192a:	00db      	lsls	r3, r3, #3
 800192c:	490e      	ldr	r1, [pc, #56]	; (8001968 <HAL_RCC_ClockConfig+0x1bc>)
 800192e:	4313      	orrs	r3, r2
 8001930:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8001932:	f000 f821 	bl	8001978 <HAL_RCC_GetSysClockFreq>
 8001936:	4602      	mov	r2, r0
 8001938:	4b0b      	ldr	r3, [pc, #44]	; (8001968 <HAL_RCC_ClockConfig+0x1bc>)
 800193a:	689b      	ldr	r3, [r3, #8]
 800193c:	091b      	lsrs	r3, r3, #4
 800193e:	f003 030f 	and.w	r3, r3, #15
 8001942:	490a      	ldr	r1, [pc, #40]	; (800196c <HAL_RCC_ClockConfig+0x1c0>)
 8001944:	5ccb      	ldrb	r3, [r1, r3]
 8001946:	fa22 f303 	lsr.w	r3, r2, r3
 800194a:	4a09      	ldr	r2, [pc, #36]	; (8001970 <HAL_RCC_ClockConfig+0x1c4>)
 800194c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800194e:	4b09      	ldr	r3, [pc, #36]	; (8001974 <HAL_RCC_ClockConfig+0x1c8>)
 8001950:	681b      	ldr	r3, [r3, #0]
 8001952:	4618      	mov	r0, r3
 8001954:	f7ff f8c0 	bl	8000ad8 <HAL_InitTick>

  return HAL_OK;
 8001958:	2300      	movs	r3, #0
}
 800195a:	4618      	mov	r0, r3
 800195c:	3710      	adds	r7, #16
 800195e:	46bd      	mov	sp, r7
 8001960:	bd80      	pop	{r7, pc}
 8001962:	bf00      	nop
 8001964:	40023c00 	.word	0x40023c00
 8001968:	40023800 	.word	0x40023800
 800196c:	08002dd8 	.word	0x08002dd8
 8001970:	20000000 	.word	0x20000000
 8001974:	20000004 	.word	0x20000004

08001978 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001978:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800197c:	b090      	sub	sp, #64	; 0x40
 800197e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8001980:	2300      	movs	r3, #0
 8001982:	637b      	str	r3, [r7, #52]	; 0x34
 8001984:	2300      	movs	r3, #0
 8001986:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001988:	2300      	movs	r3, #0
 800198a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800198c:	2300      	movs	r3, #0
 800198e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001990:	4b59      	ldr	r3, [pc, #356]	; (8001af8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001992:	689b      	ldr	r3, [r3, #8]
 8001994:	f003 030c 	and.w	r3, r3, #12
 8001998:	2b08      	cmp	r3, #8
 800199a:	d00d      	beq.n	80019b8 <HAL_RCC_GetSysClockFreq+0x40>
 800199c:	2b08      	cmp	r3, #8
 800199e:	f200 80a1 	bhi.w	8001ae4 <HAL_RCC_GetSysClockFreq+0x16c>
 80019a2:	2b00      	cmp	r3, #0
 80019a4:	d002      	beq.n	80019ac <HAL_RCC_GetSysClockFreq+0x34>
 80019a6:	2b04      	cmp	r3, #4
 80019a8:	d003      	beq.n	80019b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80019aa:	e09b      	b.n	8001ae4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80019ac:	4b53      	ldr	r3, [pc, #332]	; (8001afc <HAL_RCC_GetSysClockFreq+0x184>)
 80019ae:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80019b0:	e09b      	b.n	8001aea <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80019b2:	4b53      	ldr	r3, [pc, #332]	; (8001b00 <HAL_RCC_GetSysClockFreq+0x188>)
 80019b4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80019b6:	e098      	b.n	8001aea <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80019b8:	4b4f      	ldr	r3, [pc, #316]	; (8001af8 <HAL_RCC_GetSysClockFreq+0x180>)
 80019ba:	685b      	ldr	r3, [r3, #4]
 80019bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80019c0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80019c2:	4b4d      	ldr	r3, [pc, #308]	; (8001af8 <HAL_RCC_GetSysClockFreq+0x180>)
 80019c4:	685b      	ldr	r3, [r3, #4]
 80019c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	d028      	beq.n	8001a20 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80019ce:	4b4a      	ldr	r3, [pc, #296]	; (8001af8 <HAL_RCC_GetSysClockFreq+0x180>)
 80019d0:	685b      	ldr	r3, [r3, #4]
 80019d2:	099b      	lsrs	r3, r3, #6
 80019d4:	2200      	movs	r2, #0
 80019d6:	623b      	str	r3, [r7, #32]
 80019d8:	627a      	str	r2, [r7, #36]	; 0x24
 80019da:	6a3b      	ldr	r3, [r7, #32]
 80019dc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80019e0:	2100      	movs	r1, #0
 80019e2:	4b47      	ldr	r3, [pc, #284]	; (8001b00 <HAL_RCC_GetSysClockFreq+0x188>)
 80019e4:	fb03 f201 	mul.w	r2, r3, r1
 80019e8:	2300      	movs	r3, #0
 80019ea:	fb00 f303 	mul.w	r3, r0, r3
 80019ee:	4413      	add	r3, r2
 80019f0:	4a43      	ldr	r2, [pc, #268]	; (8001b00 <HAL_RCC_GetSysClockFreq+0x188>)
 80019f2:	fba0 1202 	umull	r1, r2, r0, r2
 80019f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80019f8:	460a      	mov	r2, r1
 80019fa:	62ba      	str	r2, [r7, #40]	; 0x28
 80019fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80019fe:	4413      	add	r3, r2
 8001a00:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001a02:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001a04:	2200      	movs	r2, #0
 8001a06:	61bb      	str	r3, [r7, #24]
 8001a08:	61fa      	str	r2, [r7, #28]
 8001a0a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001a0e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8001a12:	f7fe fbd9 	bl	80001c8 <__aeabi_uldivmod>
 8001a16:	4602      	mov	r2, r0
 8001a18:	460b      	mov	r3, r1
 8001a1a:	4613      	mov	r3, r2
 8001a1c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001a1e:	e053      	b.n	8001ac8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a20:	4b35      	ldr	r3, [pc, #212]	; (8001af8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001a22:	685b      	ldr	r3, [r3, #4]
 8001a24:	099b      	lsrs	r3, r3, #6
 8001a26:	2200      	movs	r2, #0
 8001a28:	613b      	str	r3, [r7, #16]
 8001a2a:	617a      	str	r2, [r7, #20]
 8001a2c:	693b      	ldr	r3, [r7, #16]
 8001a2e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8001a32:	f04f 0b00 	mov.w	fp, #0
 8001a36:	4652      	mov	r2, sl
 8001a38:	465b      	mov	r3, fp
 8001a3a:	f04f 0000 	mov.w	r0, #0
 8001a3e:	f04f 0100 	mov.w	r1, #0
 8001a42:	0159      	lsls	r1, r3, #5
 8001a44:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a48:	0150      	lsls	r0, r2, #5
 8001a4a:	4602      	mov	r2, r0
 8001a4c:	460b      	mov	r3, r1
 8001a4e:	ebb2 080a 	subs.w	r8, r2, sl
 8001a52:	eb63 090b 	sbc.w	r9, r3, fp
 8001a56:	f04f 0200 	mov.w	r2, #0
 8001a5a:	f04f 0300 	mov.w	r3, #0
 8001a5e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8001a62:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8001a66:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8001a6a:	ebb2 0408 	subs.w	r4, r2, r8
 8001a6e:	eb63 0509 	sbc.w	r5, r3, r9
 8001a72:	f04f 0200 	mov.w	r2, #0
 8001a76:	f04f 0300 	mov.w	r3, #0
 8001a7a:	00eb      	lsls	r3, r5, #3
 8001a7c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001a80:	00e2      	lsls	r2, r4, #3
 8001a82:	4614      	mov	r4, r2
 8001a84:	461d      	mov	r5, r3
 8001a86:	eb14 030a 	adds.w	r3, r4, sl
 8001a8a:	603b      	str	r3, [r7, #0]
 8001a8c:	eb45 030b 	adc.w	r3, r5, fp
 8001a90:	607b      	str	r3, [r7, #4]
 8001a92:	f04f 0200 	mov.w	r2, #0
 8001a96:	f04f 0300 	mov.w	r3, #0
 8001a9a:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001a9e:	4629      	mov	r1, r5
 8001aa0:	028b      	lsls	r3, r1, #10
 8001aa2:	4621      	mov	r1, r4
 8001aa4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001aa8:	4621      	mov	r1, r4
 8001aaa:	028a      	lsls	r2, r1, #10
 8001aac:	4610      	mov	r0, r2
 8001aae:	4619      	mov	r1, r3
 8001ab0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001ab2:	2200      	movs	r2, #0
 8001ab4:	60bb      	str	r3, [r7, #8]
 8001ab6:	60fa      	str	r2, [r7, #12]
 8001ab8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001abc:	f7fe fb84 	bl	80001c8 <__aeabi_uldivmod>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	460b      	mov	r3, r1
 8001ac4:	4613      	mov	r3, r2
 8001ac6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8001ac8:	4b0b      	ldr	r3, [pc, #44]	; (8001af8 <HAL_RCC_GetSysClockFreq+0x180>)
 8001aca:	685b      	ldr	r3, [r3, #4]
 8001acc:	0c1b      	lsrs	r3, r3, #16
 8001ace:	f003 0303 	and.w	r3, r3, #3
 8001ad2:	3301      	adds	r3, #1
 8001ad4:	005b      	lsls	r3, r3, #1
 8001ad6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8001ad8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001ada:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001adc:	fbb2 f3f3 	udiv	r3, r2, r3
 8001ae0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001ae2:	e002      	b.n	8001aea <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001ae4:	4b05      	ldr	r3, [pc, #20]	; (8001afc <HAL_RCC_GetSysClockFreq+0x184>)
 8001ae6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8001ae8:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001aea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8001aec:	4618      	mov	r0, r3
 8001aee:	3740      	adds	r7, #64	; 0x40
 8001af0:	46bd      	mov	sp, r7
 8001af2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001af6:	bf00      	nop
 8001af8:	40023800 	.word	0x40023800
 8001afc:	00f42400 	.word	0x00f42400
 8001b00:	017d7840 	.word	0x017d7840

08001b04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001b04:	b480      	push	{r7}
 8001b06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001b08:	4b03      	ldr	r3, [pc, #12]	; (8001b18 <HAL_RCC_GetHCLKFreq+0x14>)
 8001b0a:	681b      	ldr	r3, [r3, #0]
}
 8001b0c:	4618      	mov	r0, r3
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001b14:	4770      	bx	lr
 8001b16:	bf00      	nop
 8001b18:	20000000 	.word	0x20000000

08001b1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001b1c:	b580      	push	{r7, lr}
 8001b1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8001b20:	f7ff fff0 	bl	8001b04 <HAL_RCC_GetHCLKFreq>
 8001b24:	4602      	mov	r2, r0
 8001b26:	4b05      	ldr	r3, [pc, #20]	; (8001b3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8001b28:	689b      	ldr	r3, [r3, #8]
 8001b2a:	0a9b      	lsrs	r3, r3, #10
 8001b2c:	f003 0307 	and.w	r3, r3, #7
 8001b30:	4903      	ldr	r1, [pc, #12]	; (8001b40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8001b32:	5ccb      	ldrb	r3, [r1, r3]
 8001b34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b38:	4618      	mov	r0, r3
 8001b3a:	bd80      	pop	{r7, pc}
 8001b3c:	40023800 	.word	0x40023800
 8001b40:	08002de8 	.word	0x08002de8

08001b44 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001b44:	b580      	push	{r7, lr}
 8001b46:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8001b48:	f7ff ffdc 	bl	8001b04 <HAL_RCC_GetHCLKFreq>
 8001b4c:	4602      	mov	r2, r0
 8001b4e:	4b05      	ldr	r3, [pc, #20]	; (8001b64 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001b50:	689b      	ldr	r3, [r3, #8]
 8001b52:	0b5b      	lsrs	r3, r3, #13
 8001b54:	f003 0307 	and.w	r3, r3, #7
 8001b58:	4903      	ldr	r1, [pc, #12]	; (8001b68 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001b5a:	5ccb      	ldrb	r3, [r1, r3]
 8001b5c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001b60:	4618      	mov	r0, r3
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	40023800 	.word	0x40023800
 8001b68:	08002de8 	.word	0x08002de8

08001b6c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001b6c:	b580      	push	{r7, lr}
 8001b6e:	b082      	sub	sp, #8
 8001b70:	af00      	add	r7, sp, #0
 8001b72:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001b74:	687b      	ldr	r3, [r7, #4]
 8001b76:	2b00      	cmp	r3, #0
 8001b78:	d101      	bne.n	8001b7e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001b7a:	2301      	movs	r3, #1
 8001b7c:	e03f      	b.n	8001bfe <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001b84:	b2db      	uxtb	r3, r3
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d106      	bne.n	8001b98 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001b8a:	687b      	ldr	r3, [r7, #4]
 8001b8c:	2200      	movs	r2, #0
 8001b8e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001b92:	6878      	ldr	r0, [r7, #4]
 8001b94:	f7fe fdda 	bl	800074c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001b98:	687b      	ldr	r3, [r7, #4]
 8001b9a:	2224      	movs	r2, #36	; 0x24
 8001b9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001ba0:	687b      	ldr	r3, [r7, #4]
 8001ba2:	681b      	ldr	r3, [r3, #0]
 8001ba4:	68da      	ldr	r2, [r3, #12]
 8001ba6:	687b      	ldr	r3, [r7, #4]
 8001ba8:	681b      	ldr	r3, [r3, #0]
 8001baa:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001bae:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001bb0:	6878      	ldr	r0, [r7, #4]
 8001bb2:	f000 f957 	bl	8001e64 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001bb6:	687b      	ldr	r3, [r7, #4]
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	691a      	ldr	r2, [r3, #16]
 8001bbc:	687b      	ldr	r3, [r7, #4]
 8001bbe:	681b      	ldr	r3, [r3, #0]
 8001bc0:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8001bc4:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001bc6:	687b      	ldr	r3, [r7, #4]
 8001bc8:	681b      	ldr	r3, [r3, #0]
 8001bca:	695a      	ldr	r2, [r3, #20]
 8001bcc:	687b      	ldr	r3, [r7, #4]
 8001bce:	681b      	ldr	r3, [r3, #0]
 8001bd0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8001bd4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001bd6:	687b      	ldr	r3, [r7, #4]
 8001bd8:	681b      	ldr	r3, [r3, #0]
 8001bda:	68da      	ldr	r2, [r3, #12]
 8001bdc:	687b      	ldr	r3, [r7, #4]
 8001bde:	681b      	ldr	r3, [r3, #0]
 8001be0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8001be4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001be6:	687b      	ldr	r3, [r7, #4]
 8001be8:	2200      	movs	r2, #0
 8001bea:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8001bec:	687b      	ldr	r3, [r7, #4]
 8001bee:	2220      	movs	r2, #32
 8001bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8001bf4:	687b      	ldr	r3, [r7, #4]
 8001bf6:	2220      	movs	r2, #32
 8001bf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8001bfc:	2300      	movs	r3, #0
}
 8001bfe:	4618      	mov	r0, r3
 8001c00:	3708      	adds	r7, #8
 8001c02:	46bd      	mov	sp, r7
 8001c04:	bd80      	pop	{r7, pc}

08001c06 <HAL_UART_DeInit>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_DeInit(UART_HandleTypeDef *huart)
{
 8001c06:	b580      	push	{r7, lr}
 8001c08:	b082      	sub	sp, #8
 8001c0a:	af00      	add	r7, sp, #0
 8001c0c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d101      	bne.n	8001c18 <HAL_UART_DeInit+0x12>
  {
    return HAL_ERROR;
 8001c14:	2301      	movs	r3, #1
 8001c16:	e021      	b.n	8001c5c <HAL_UART_DeInit+0x56>
  }

  /* Check the parameters */
  assert_param(IS_UART_INSTANCE(huart->Instance));

  huart->gState = HAL_UART_STATE_BUSY;
 8001c18:	687b      	ldr	r3, [r7, #4]
 8001c1a:	2224      	movs	r2, #36	; 0x24
 8001c1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the Peripheral */
  __HAL_UART_DISABLE(huart);
 8001c20:	687b      	ldr	r3, [r7, #4]
 8001c22:	681b      	ldr	r3, [r3, #0]
 8001c24:	68da      	ldr	r2, [r3, #12]
 8001c26:	687b      	ldr	r3, [r7, #4]
 8001c28:	681b      	ldr	r3, [r3, #0]
 8001c2a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8001c2e:	60da      	str	r2, [r3, #12]
  }
  /* DeInit the low level hardware */
  huart->MspDeInitCallback(huart);
#else
  /* DeInit the low level hardware */
  HAL_UART_MspDeInit(huart);
 8001c30:	6878      	ldr	r0, [r7, #4]
 8001c32:	f7fe fdd3 	bl	80007dc <HAL_UART_MspDeInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	2200      	movs	r2, #0
 8001c3a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_RESET;
 8001c3c:	687b      	ldr	r3, [r7, #4]
 8001c3e:	2200      	movs	r2, #0
 8001c40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_RESET;
 8001c44:	687b      	ldr	r3, [r7, #4]
 8001c46:	2200      	movs	r2, #0
 8001c48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	2200      	movs	r2, #0
 8001c50:	631a      	str	r2, [r3, #48]	; 0x30

  /* Process Unlock */
  __HAL_UNLOCK(huart);
 8001c52:	687b      	ldr	r3, [r7, #4]
 8001c54:	2200      	movs	r2, #0
 8001c56:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8001c5a:	2300      	movs	r3, #0
}
 8001c5c:	4618      	mov	r0, r3
 8001c5e:	3708      	adds	r7, #8
 8001c60:	46bd      	mov	sp, r7
 8001c62:	bd80      	pop	{r7, pc}

08001c64 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001c64:	b580      	push	{r7, lr}
 8001c66:	b08a      	sub	sp, #40	; 0x28
 8001c68:	af02      	add	r7, sp, #8
 8001c6a:	60f8      	str	r0, [r7, #12]
 8001c6c:	60b9      	str	r1, [r7, #8]
 8001c6e:	603b      	str	r3, [r7, #0]
 8001c70:	4613      	mov	r3, r2
 8001c72:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001c74:	2300      	movs	r3, #0
 8001c76:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001c78:	68fb      	ldr	r3, [r7, #12]
 8001c7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001c7e:	b2db      	uxtb	r3, r3
 8001c80:	2b20      	cmp	r3, #32
 8001c82:	d17c      	bne.n	8001d7e <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8001c84:	68bb      	ldr	r3, [r7, #8]
 8001c86:	2b00      	cmp	r3, #0
 8001c88:	d002      	beq.n	8001c90 <HAL_UART_Transmit+0x2c>
 8001c8a:	88fb      	ldrh	r3, [r7, #6]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	d101      	bne.n	8001c94 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001c90:	2301      	movs	r3, #1
 8001c92:	e075      	b.n	8001d80 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8001c94:	68fb      	ldr	r3, [r7, #12]
 8001c96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8001c9a:	2b01      	cmp	r3, #1
 8001c9c:	d101      	bne.n	8001ca2 <HAL_UART_Transmit+0x3e>
 8001c9e:	2302      	movs	r3, #2
 8001ca0:	e06e      	b.n	8001d80 <HAL_UART_Transmit+0x11c>
 8001ca2:	68fb      	ldr	r3, [r7, #12]
 8001ca4:	2201      	movs	r2, #1
 8001ca6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001caa:	68fb      	ldr	r3, [r7, #12]
 8001cac:	2200      	movs	r2, #0
 8001cae:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001cb0:	68fb      	ldr	r3, [r7, #12]
 8001cb2:	2221      	movs	r2, #33	; 0x21
 8001cb4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001cb8:	f7fe ff52 	bl	8000b60 <HAL_GetTick>
 8001cbc:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001cbe:	68fb      	ldr	r3, [r7, #12]
 8001cc0:	88fa      	ldrh	r2, [r7, #6]
 8001cc2:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8001cc4:	68fb      	ldr	r3, [r7, #12]
 8001cc6:	88fa      	ldrh	r2, [r7, #6]
 8001cc8:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001cca:	68fb      	ldr	r3, [r7, #12]
 8001ccc:	689b      	ldr	r3, [r3, #8]
 8001cce:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8001cd2:	d108      	bne.n	8001ce6 <HAL_UART_Transmit+0x82>
 8001cd4:	68fb      	ldr	r3, [r7, #12]
 8001cd6:	691b      	ldr	r3, [r3, #16]
 8001cd8:	2b00      	cmp	r3, #0
 8001cda:	d104      	bne.n	8001ce6 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8001cdc:	2300      	movs	r3, #0
 8001cde:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001ce0:	68bb      	ldr	r3, [r7, #8]
 8001ce2:	61bb      	str	r3, [r7, #24]
 8001ce4:	e003      	b.n	8001cee <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8001ce6:	68bb      	ldr	r3, [r7, #8]
 8001ce8:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001cea:	2300      	movs	r3, #0
 8001cec:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8001cee:	68fb      	ldr	r3, [r7, #12]
 8001cf0:	2200      	movs	r2, #0
 8001cf2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8001cf6:	e02a      	b.n	8001d4e <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001cf8:	683b      	ldr	r3, [r7, #0]
 8001cfa:	9300      	str	r3, [sp, #0]
 8001cfc:	697b      	ldr	r3, [r7, #20]
 8001cfe:	2200      	movs	r2, #0
 8001d00:	2180      	movs	r1, #128	; 0x80
 8001d02:	68f8      	ldr	r0, [r7, #12]
 8001d04:	f000 f840 	bl	8001d88 <UART_WaitOnFlagUntilTimeout>
 8001d08:	4603      	mov	r3, r0
 8001d0a:	2b00      	cmp	r3, #0
 8001d0c:	d001      	beq.n	8001d12 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8001d0e:	2303      	movs	r3, #3
 8001d10:	e036      	b.n	8001d80 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8001d12:	69fb      	ldr	r3, [r7, #28]
 8001d14:	2b00      	cmp	r3, #0
 8001d16:	d10b      	bne.n	8001d30 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001d18:	69bb      	ldr	r3, [r7, #24]
 8001d1a:	881b      	ldrh	r3, [r3, #0]
 8001d1c:	461a      	mov	r2, r3
 8001d1e:	68fb      	ldr	r3, [r7, #12]
 8001d20:	681b      	ldr	r3, [r3, #0]
 8001d22:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001d26:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001d28:	69bb      	ldr	r3, [r7, #24]
 8001d2a:	3302      	adds	r3, #2
 8001d2c:	61bb      	str	r3, [r7, #24]
 8001d2e:	e007      	b.n	8001d40 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001d30:	69fb      	ldr	r3, [r7, #28]
 8001d32:	781a      	ldrb	r2, [r3, #0]
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	681b      	ldr	r3, [r3, #0]
 8001d38:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001d3a:	69fb      	ldr	r3, [r7, #28]
 8001d3c:	3301      	adds	r3, #1
 8001d3e:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001d40:	68fb      	ldr	r3, [r7, #12]
 8001d42:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001d44:	b29b      	uxth	r3, r3
 8001d46:	3b01      	subs	r3, #1
 8001d48:	b29a      	uxth	r2, r3
 8001d4a:	68fb      	ldr	r3, [r7, #12]
 8001d4c:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8001d4e:	68fb      	ldr	r3, [r7, #12]
 8001d50:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8001d52:	b29b      	uxth	r3, r3
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d1cf      	bne.n	8001cf8 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001d58:	683b      	ldr	r3, [r7, #0]
 8001d5a:	9300      	str	r3, [sp, #0]
 8001d5c:	697b      	ldr	r3, [r7, #20]
 8001d5e:	2200      	movs	r2, #0
 8001d60:	2140      	movs	r1, #64	; 0x40
 8001d62:	68f8      	ldr	r0, [r7, #12]
 8001d64:	f000 f810 	bl	8001d88 <UART_WaitOnFlagUntilTimeout>
 8001d68:	4603      	mov	r3, r0
 8001d6a:	2b00      	cmp	r3, #0
 8001d6c:	d001      	beq.n	8001d72 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8001d6e:	2303      	movs	r3, #3
 8001d70:	e006      	b.n	8001d80 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	2220      	movs	r2, #32
 8001d76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8001d7a:	2300      	movs	r3, #0
 8001d7c:	e000      	b.n	8001d80 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8001d7e:	2302      	movs	r3, #2
  }
}
 8001d80:	4618      	mov	r0, r3
 8001d82:	3720      	adds	r7, #32
 8001d84:	46bd      	mov	sp, r7
 8001d86:	bd80      	pop	{r7, pc}

08001d88 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	b090      	sub	sp, #64	; 0x40
 8001d8c:	af00      	add	r7, sp, #0
 8001d8e:	60f8      	str	r0, [r7, #12]
 8001d90:	60b9      	str	r1, [r7, #8]
 8001d92:	603b      	str	r3, [r7, #0]
 8001d94:	4613      	mov	r3, r2
 8001d96:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001d98:	e050      	b.n	8001e3c <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8001d9a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001d9c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001da0:	d04c      	beq.n	8001e3c <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8001da2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8001da4:	2b00      	cmp	r3, #0
 8001da6:	d007      	beq.n	8001db8 <UART_WaitOnFlagUntilTimeout+0x30>
 8001da8:	f7fe feda 	bl	8000b60 <HAL_GetTick>
 8001dac:	4602      	mov	r2, r0
 8001dae:	683b      	ldr	r3, [r7, #0]
 8001db0:	1ad3      	subs	r3, r2, r3
 8001db2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8001db4:	429a      	cmp	r2, r3
 8001db6:	d241      	bcs.n	8001e3c <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8001db8:	68fb      	ldr	r3, [r7, #12]
 8001dba:	681b      	ldr	r3, [r3, #0]
 8001dbc:	330c      	adds	r3, #12
 8001dbe:	62bb      	str	r3, [r7, #40]	; 0x28
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001dc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001dc2:	e853 3f00 	ldrex	r3, [r3]
 8001dc6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8001dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001dca:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8001dce:	63fb      	str	r3, [r7, #60]	; 0x3c
 8001dd0:	68fb      	ldr	r3, [r7, #12]
 8001dd2:	681b      	ldr	r3, [r3, #0]
 8001dd4:	330c      	adds	r3, #12
 8001dd6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8001dd8:	637a      	str	r2, [r7, #52]	; 0x34
 8001dda:	633b      	str	r3, [r7, #48]	; 0x30
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001ddc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8001dde:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001de0:	e841 2300 	strex	r3, r2, [r1]
 8001de4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8001de6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001de8:	2b00      	cmp	r3, #0
 8001dea:	d1e5      	bne.n	8001db8 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8001dec:	68fb      	ldr	r3, [r7, #12]
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	3314      	adds	r3, #20
 8001df2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8001df4:	697b      	ldr	r3, [r7, #20]
 8001df6:	e853 3f00 	ldrex	r3, [r3]
 8001dfa:	613b      	str	r3, [r7, #16]
   return(result);
 8001dfc:	693b      	ldr	r3, [r7, #16]
 8001dfe:	f023 0301 	bic.w	r3, r3, #1
 8001e02:	63bb      	str	r3, [r7, #56]	; 0x38
 8001e04:	68fb      	ldr	r3, [r7, #12]
 8001e06:	681b      	ldr	r3, [r3, #0]
 8001e08:	3314      	adds	r3, #20
 8001e0a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8001e0c:	623a      	str	r2, [r7, #32]
 8001e0e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8001e10:	69f9      	ldr	r1, [r7, #28]
 8001e12:	6a3a      	ldr	r2, [r7, #32]
 8001e14:	e841 2300 	strex	r3, r2, [r1]
 8001e18:	61bb      	str	r3, [r7, #24]
   return(result);
 8001e1a:	69bb      	ldr	r3, [r7, #24]
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	d1e5      	bne.n	8001dec <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8001e20:	68fb      	ldr	r3, [r7, #12]
 8001e22:	2220      	movs	r2, #32
 8001e24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	2220      	movs	r2, #32
 8001e2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8001e30:	68fb      	ldr	r3, [r7, #12]
 8001e32:	2200      	movs	r2, #0
 8001e34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8001e38:	2303      	movs	r3, #3
 8001e3a:	e00f      	b.n	8001e5c <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8001e3c:	68fb      	ldr	r3, [r7, #12]
 8001e3e:	681b      	ldr	r3, [r3, #0]
 8001e40:	681a      	ldr	r2, [r3, #0]
 8001e42:	68bb      	ldr	r3, [r7, #8]
 8001e44:	4013      	ands	r3, r2
 8001e46:	68ba      	ldr	r2, [r7, #8]
 8001e48:	429a      	cmp	r2, r3
 8001e4a:	bf0c      	ite	eq
 8001e4c:	2301      	moveq	r3, #1
 8001e4e:	2300      	movne	r3, #0
 8001e50:	b2db      	uxtb	r3, r3
 8001e52:	461a      	mov	r2, r3
 8001e54:	79fb      	ldrb	r3, [r7, #7]
 8001e56:	429a      	cmp	r2, r3
 8001e58:	d09f      	beq.n	8001d9a <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8001e5a:	2300      	movs	r3, #0
}
 8001e5c:	4618      	mov	r0, r3
 8001e5e:	3740      	adds	r7, #64	; 0x40
 8001e60:	46bd      	mov	sp, r7
 8001e62:	bd80      	pop	{r7, pc}

08001e64 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8001e64:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e68:	b0c0      	sub	sp, #256	; 0x100
 8001e6a:	af00      	add	r7, sp, #0
 8001e6c:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8001e70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	691b      	ldr	r3, [r3, #16]
 8001e78:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8001e7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e80:	68d9      	ldr	r1, [r3, #12]
 8001e82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e86:	681a      	ldr	r2, [r3, #0]
 8001e88:	ea40 0301 	orr.w	r3, r0, r1
 8001e8c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8001e8e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e92:	689a      	ldr	r2, [r3, #8]
 8001e94:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001e98:	691b      	ldr	r3, [r3, #16]
 8001e9a:	431a      	orrs	r2, r3
 8001e9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ea0:	695b      	ldr	r3, [r3, #20]
 8001ea2:	431a      	orrs	r2, r3
 8001ea4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ea8:	69db      	ldr	r3, [r3, #28]
 8001eaa:	4313      	orrs	r3, r2
 8001eac:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8001eb0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001eb4:	681b      	ldr	r3, [r3, #0]
 8001eb6:	68db      	ldr	r3, [r3, #12]
 8001eb8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8001ebc:	f021 010c 	bic.w	r1, r1, #12
 8001ec0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ec4:	681a      	ldr	r2, [r3, #0]
 8001ec6:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8001eca:	430b      	orrs	r3, r1
 8001ecc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8001ece:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ed2:	681b      	ldr	r3, [r3, #0]
 8001ed4:	695b      	ldr	r3, [r3, #20]
 8001ed6:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8001eda:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ede:	6999      	ldr	r1, [r3, #24]
 8001ee0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ee4:	681a      	ldr	r2, [r3, #0]
 8001ee6:	ea40 0301 	orr.w	r3, r0, r1
 8001eea:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8001eec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001ef0:	681a      	ldr	r2, [r3, #0]
 8001ef2:	4b8f      	ldr	r3, [pc, #572]	; (8002130 <UART_SetConfig+0x2cc>)
 8001ef4:	429a      	cmp	r2, r3
 8001ef6:	d005      	beq.n	8001f04 <UART_SetConfig+0xa0>
 8001ef8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001efc:	681a      	ldr	r2, [r3, #0]
 8001efe:	4b8d      	ldr	r3, [pc, #564]	; (8002134 <UART_SetConfig+0x2d0>)
 8001f00:	429a      	cmp	r2, r3
 8001f02:	d104      	bne.n	8001f0e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8001f04:	f7ff fe1e 	bl	8001b44 <HAL_RCC_GetPCLK2Freq>
 8001f08:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8001f0c:	e003      	b.n	8001f16 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8001f0e:	f7ff fe05 	bl	8001b1c <HAL_RCC_GetPCLK1Freq>
 8001f12:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8001f16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f1a:	69db      	ldr	r3, [r3, #28]
 8001f1c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8001f20:	f040 810c 	bne.w	800213c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8001f24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001f28:	2200      	movs	r2, #0
 8001f2a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8001f2e:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8001f32:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8001f36:	4622      	mov	r2, r4
 8001f38:	462b      	mov	r3, r5
 8001f3a:	1891      	adds	r1, r2, r2
 8001f3c:	65b9      	str	r1, [r7, #88]	; 0x58
 8001f3e:	415b      	adcs	r3, r3
 8001f40:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001f42:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001f46:	4621      	mov	r1, r4
 8001f48:	eb12 0801 	adds.w	r8, r2, r1
 8001f4c:	4629      	mov	r1, r5
 8001f4e:	eb43 0901 	adc.w	r9, r3, r1
 8001f52:	f04f 0200 	mov.w	r2, #0
 8001f56:	f04f 0300 	mov.w	r3, #0
 8001f5a:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001f5e:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001f62:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001f66:	4690      	mov	r8, r2
 8001f68:	4699      	mov	r9, r3
 8001f6a:	4623      	mov	r3, r4
 8001f6c:	eb18 0303 	adds.w	r3, r8, r3
 8001f70:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8001f74:	462b      	mov	r3, r5
 8001f76:	eb49 0303 	adc.w	r3, r9, r3
 8001f7a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8001f7e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8001f82:	685b      	ldr	r3, [r3, #4]
 8001f84:	2200      	movs	r2, #0
 8001f86:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8001f8a:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8001f8e:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8001f92:	460b      	mov	r3, r1
 8001f94:	18db      	adds	r3, r3, r3
 8001f96:	653b      	str	r3, [r7, #80]	; 0x50
 8001f98:	4613      	mov	r3, r2
 8001f9a:	eb42 0303 	adc.w	r3, r2, r3
 8001f9e:	657b      	str	r3, [r7, #84]	; 0x54
 8001fa0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8001fa4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8001fa8:	f7fe f90e 	bl	80001c8 <__aeabi_uldivmod>
 8001fac:	4602      	mov	r2, r0
 8001fae:	460b      	mov	r3, r1
 8001fb0:	4b61      	ldr	r3, [pc, #388]	; (8002138 <UART_SetConfig+0x2d4>)
 8001fb2:	fba3 2302 	umull	r2, r3, r3, r2
 8001fb6:	095b      	lsrs	r3, r3, #5
 8001fb8:	011c      	lsls	r4, r3, #4
 8001fba:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8001fc4:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8001fc8:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8001fcc:	4642      	mov	r2, r8
 8001fce:	464b      	mov	r3, r9
 8001fd0:	1891      	adds	r1, r2, r2
 8001fd2:	64b9      	str	r1, [r7, #72]	; 0x48
 8001fd4:	415b      	adcs	r3, r3
 8001fd6:	64fb      	str	r3, [r7, #76]	; 0x4c
 8001fd8:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8001fdc:	4641      	mov	r1, r8
 8001fde:	eb12 0a01 	adds.w	sl, r2, r1
 8001fe2:	4649      	mov	r1, r9
 8001fe4:	eb43 0b01 	adc.w	fp, r3, r1
 8001fe8:	f04f 0200 	mov.w	r2, #0
 8001fec:	f04f 0300 	mov.w	r3, #0
 8001ff0:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8001ff4:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8001ff8:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8001ffc:	4692      	mov	sl, r2
 8001ffe:	469b      	mov	fp, r3
 8002000:	4643      	mov	r3, r8
 8002002:	eb1a 0303 	adds.w	r3, sl, r3
 8002006:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800200a:	464b      	mov	r3, r9
 800200c:	eb4b 0303 	adc.w	r3, fp, r3
 8002010:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8002014:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002018:	685b      	ldr	r3, [r3, #4]
 800201a:	2200      	movs	r2, #0
 800201c:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8002020:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8002024:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8002028:	460b      	mov	r3, r1
 800202a:	18db      	adds	r3, r3, r3
 800202c:	643b      	str	r3, [r7, #64]	; 0x40
 800202e:	4613      	mov	r3, r2
 8002030:	eb42 0303 	adc.w	r3, r2, r3
 8002034:	647b      	str	r3, [r7, #68]	; 0x44
 8002036:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800203a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800203e:	f7fe f8c3 	bl	80001c8 <__aeabi_uldivmod>
 8002042:	4602      	mov	r2, r0
 8002044:	460b      	mov	r3, r1
 8002046:	4611      	mov	r1, r2
 8002048:	4b3b      	ldr	r3, [pc, #236]	; (8002138 <UART_SetConfig+0x2d4>)
 800204a:	fba3 2301 	umull	r2, r3, r3, r1
 800204e:	095b      	lsrs	r3, r3, #5
 8002050:	2264      	movs	r2, #100	; 0x64
 8002052:	fb02 f303 	mul.w	r3, r2, r3
 8002056:	1acb      	subs	r3, r1, r3
 8002058:	00db      	lsls	r3, r3, #3
 800205a:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800205e:	4b36      	ldr	r3, [pc, #216]	; (8002138 <UART_SetConfig+0x2d4>)
 8002060:	fba3 2302 	umull	r2, r3, r3, r2
 8002064:	095b      	lsrs	r3, r3, #5
 8002066:	005b      	lsls	r3, r3, #1
 8002068:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800206c:	441c      	add	r4, r3
 800206e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002072:	2200      	movs	r2, #0
 8002074:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8002078:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800207c:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8002080:	4642      	mov	r2, r8
 8002082:	464b      	mov	r3, r9
 8002084:	1891      	adds	r1, r2, r2
 8002086:	63b9      	str	r1, [r7, #56]	; 0x38
 8002088:	415b      	adcs	r3, r3
 800208a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800208c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8002090:	4641      	mov	r1, r8
 8002092:	1851      	adds	r1, r2, r1
 8002094:	6339      	str	r1, [r7, #48]	; 0x30
 8002096:	4649      	mov	r1, r9
 8002098:	414b      	adcs	r3, r1
 800209a:	637b      	str	r3, [r7, #52]	; 0x34
 800209c:	f04f 0200 	mov.w	r2, #0
 80020a0:	f04f 0300 	mov.w	r3, #0
 80020a4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 80020a8:	4659      	mov	r1, fp
 80020aa:	00cb      	lsls	r3, r1, #3
 80020ac:	4651      	mov	r1, sl
 80020ae:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80020b2:	4651      	mov	r1, sl
 80020b4:	00ca      	lsls	r2, r1, #3
 80020b6:	4610      	mov	r0, r2
 80020b8:	4619      	mov	r1, r3
 80020ba:	4603      	mov	r3, r0
 80020bc:	4642      	mov	r2, r8
 80020be:	189b      	adds	r3, r3, r2
 80020c0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80020c4:	464b      	mov	r3, r9
 80020c6:	460a      	mov	r2, r1
 80020c8:	eb42 0303 	adc.w	r3, r2, r3
 80020cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80020d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80020d4:	685b      	ldr	r3, [r3, #4]
 80020d6:	2200      	movs	r2, #0
 80020d8:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80020dc:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80020e0:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80020e4:	460b      	mov	r3, r1
 80020e6:	18db      	adds	r3, r3, r3
 80020e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80020ea:	4613      	mov	r3, r2
 80020ec:	eb42 0303 	adc.w	r3, r2, r3
 80020f0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80020f2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80020f6:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80020fa:	f7fe f865 	bl	80001c8 <__aeabi_uldivmod>
 80020fe:	4602      	mov	r2, r0
 8002100:	460b      	mov	r3, r1
 8002102:	4b0d      	ldr	r3, [pc, #52]	; (8002138 <UART_SetConfig+0x2d4>)
 8002104:	fba3 1302 	umull	r1, r3, r3, r2
 8002108:	095b      	lsrs	r3, r3, #5
 800210a:	2164      	movs	r1, #100	; 0x64
 800210c:	fb01 f303 	mul.w	r3, r1, r3
 8002110:	1ad3      	subs	r3, r2, r3
 8002112:	00db      	lsls	r3, r3, #3
 8002114:	3332      	adds	r3, #50	; 0x32
 8002116:	4a08      	ldr	r2, [pc, #32]	; (8002138 <UART_SetConfig+0x2d4>)
 8002118:	fba2 2303 	umull	r2, r3, r2, r3
 800211c:	095b      	lsrs	r3, r3, #5
 800211e:	f003 0207 	and.w	r2, r3, #7
 8002122:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002126:	681b      	ldr	r3, [r3, #0]
 8002128:	4422      	add	r2, r4
 800212a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800212c:	e105      	b.n	800233a <UART_SetConfig+0x4d6>
 800212e:	bf00      	nop
 8002130:	40011000 	.word	0x40011000
 8002134:	40011400 	.word	0x40011400
 8002138:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800213c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002140:	2200      	movs	r2, #0
 8002142:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8002146:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800214a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800214e:	4642      	mov	r2, r8
 8002150:	464b      	mov	r3, r9
 8002152:	1891      	adds	r1, r2, r2
 8002154:	6239      	str	r1, [r7, #32]
 8002156:	415b      	adcs	r3, r3
 8002158:	627b      	str	r3, [r7, #36]	; 0x24
 800215a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800215e:	4641      	mov	r1, r8
 8002160:	1854      	adds	r4, r2, r1
 8002162:	4649      	mov	r1, r9
 8002164:	eb43 0501 	adc.w	r5, r3, r1
 8002168:	f04f 0200 	mov.w	r2, #0
 800216c:	f04f 0300 	mov.w	r3, #0
 8002170:	00eb      	lsls	r3, r5, #3
 8002172:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002176:	00e2      	lsls	r2, r4, #3
 8002178:	4614      	mov	r4, r2
 800217a:	461d      	mov	r5, r3
 800217c:	4643      	mov	r3, r8
 800217e:	18e3      	adds	r3, r4, r3
 8002180:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8002184:	464b      	mov	r3, r9
 8002186:	eb45 0303 	adc.w	r3, r5, r3
 800218a:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800218e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002192:	685b      	ldr	r3, [r3, #4]
 8002194:	2200      	movs	r2, #0
 8002196:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800219a:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800219e:	f04f 0200 	mov.w	r2, #0
 80021a2:	f04f 0300 	mov.w	r3, #0
 80021a6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 80021aa:	4629      	mov	r1, r5
 80021ac:	008b      	lsls	r3, r1, #2
 80021ae:	4621      	mov	r1, r4
 80021b0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80021b4:	4621      	mov	r1, r4
 80021b6:	008a      	lsls	r2, r1, #2
 80021b8:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80021bc:	f7fe f804 	bl	80001c8 <__aeabi_uldivmod>
 80021c0:	4602      	mov	r2, r0
 80021c2:	460b      	mov	r3, r1
 80021c4:	4b60      	ldr	r3, [pc, #384]	; (8002348 <UART_SetConfig+0x4e4>)
 80021c6:	fba3 2302 	umull	r2, r3, r3, r2
 80021ca:	095b      	lsrs	r3, r3, #5
 80021cc:	011c      	lsls	r4, r3, #4
 80021ce:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80021d2:	2200      	movs	r2, #0
 80021d4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80021d8:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80021dc:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80021e0:	4642      	mov	r2, r8
 80021e2:	464b      	mov	r3, r9
 80021e4:	1891      	adds	r1, r2, r2
 80021e6:	61b9      	str	r1, [r7, #24]
 80021e8:	415b      	adcs	r3, r3
 80021ea:	61fb      	str	r3, [r7, #28]
 80021ec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80021f0:	4641      	mov	r1, r8
 80021f2:	1851      	adds	r1, r2, r1
 80021f4:	6139      	str	r1, [r7, #16]
 80021f6:	4649      	mov	r1, r9
 80021f8:	414b      	adcs	r3, r1
 80021fa:	617b      	str	r3, [r7, #20]
 80021fc:	f04f 0200 	mov.w	r2, #0
 8002200:	f04f 0300 	mov.w	r3, #0
 8002204:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002208:	4659      	mov	r1, fp
 800220a:	00cb      	lsls	r3, r1, #3
 800220c:	4651      	mov	r1, sl
 800220e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002212:	4651      	mov	r1, sl
 8002214:	00ca      	lsls	r2, r1, #3
 8002216:	4610      	mov	r0, r2
 8002218:	4619      	mov	r1, r3
 800221a:	4603      	mov	r3, r0
 800221c:	4642      	mov	r2, r8
 800221e:	189b      	adds	r3, r3, r2
 8002220:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8002224:	464b      	mov	r3, r9
 8002226:	460a      	mov	r2, r1
 8002228:	eb42 0303 	adc.w	r3, r2, r3
 800222c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8002230:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002234:	685b      	ldr	r3, [r3, #4]
 8002236:	2200      	movs	r2, #0
 8002238:	67bb      	str	r3, [r7, #120]	; 0x78
 800223a:	67fa      	str	r2, [r7, #124]	; 0x7c
 800223c:	f04f 0200 	mov.w	r2, #0
 8002240:	f04f 0300 	mov.w	r3, #0
 8002244:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8002248:	4649      	mov	r1, r9
 800224a:	008b      	lsls	r3, r1, #2
 800224c:	4641      	mov	r1, r8
 800224e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002252:	4641      	mov	r1, r8
 8002254:	008a      	lsls	r2, r1, #2
 8002256:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800225a:	f7fd ffb5 	bl	80001c8 <__aeabi_uldivmod>
 800225e:	4602      	mov	r2, r0
 8002260:	460b      	mov	r3, r1
 8002262:	4b39      	ldr	r3, [pc, #228]	; (8002348 <UART_SetConfig+0x4e4>)
 8002264:	fba3 1302 	umull	r1, r3, r3, r2
 8002268:	095b      	lsrs	r3, r3, #5
 800226a:	2164      	movs	r1, #100	; 0x64
 800226c:	fb01 f303 	mul.w	r3, r1, r3
 8002270:	1ad3      	subs	r3, r2, r3
 8002272:	011b      	lsls	r3, r3, #4
 8002274:	3332      	adds	r3, #50	; 0x32
 8002276:	4a34      	ldr	r2, [pc, #208]	; (8002348 <UART_SetConfig+0x4e4>)
 8002278:	fba2 2303 	umull	r2, r3, r2, r3
 800227c:	095b      	lsrs	r3, r3, #5
 800227e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8002282:	441c      	add	r4, r3
 8002284:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8002288:	2200      	movs	r2, #0
 800228a:	673b      	str	r3, [r7, #112]	; 0x70
 800228c:	677a      	str	r2, [r7, #116]	; 0x74
 800228e:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8002292:	4642      	mov	r2, r8
 8002294:	464b      	mov	r3, r9
 8002296:	1891      	adds	r1, r2, r2
 8002298:	60b9      	str	r1, [r7, #8]
 800229a:	415b      	adcs	r3, r3
 800229c:	60fb      	str	r3, [r7, #12]
 800229e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80022a2:	4641      	mov	r1, r8
 80022a4:	1851      	adds	r1, r2, r1
 80022a6:	6039      	str	r1, [r7, #0]
 80022a8:	4649      	mov	r1, r9
 80022aa:	414b      	adcs	r3, r1
 80022ac:	607b      	str	r3, [r7, #4]
 80022ae:	f04f 0200 	mov.w	r2, #0
 80022b2:	f04f 0300 	mov.w	r3, #0
 80022b6:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80022ba:	4659      	mov	r1, fp
 80022bc:	00cb      	lsls	r3, r1, #3
 80022be:	4651      	mov	r1, sl
 80022c0:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80022c4:	4651      	mov	r1, sl
 80022c6:	00ca      	lsls	r2, r1, #3
 80022c8:	4610      	mov	r0, r2
 80022ca:	4619      	mov	r1, r3
 80022cc:	4603      	mov	r3, r0
 80022ce:	4642      	mov	r2, r8
 80022d0:	189b      	adds	r3, r3, r2
 80022d2:	66bb      	str	r3, [r7, #104]	; 0x68
 80022d4:	464b      	mov	r3, r9
 80022d6:	460a      	mov	r2, r1
 80022d8:	eb42 0303 	adc.w	r3, r2, r3
 80022dc:	66fb      	str	r3, [r7, #108]	; 0x6c
 80022de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80022e2:	685b      	ldr	r3, [r3, #4]
 80022e4:	2200      	movs	r2, #0
 80022e6:	663b      	str	r3, [r7, #96]	; 0x60
 80022e8:	667a      	str	r2, [r7, #100]	; 0x64
 80022ea:	f04f 0200 	mov.w	r2, #0
 80022ee:	f04f 0300 	mov.w	r3, #0
 80022f2:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80022f6:	4649      	mov	r1, r9
 80022f8:	008b      	lsls	r3, r1, #2
 80022fa:	4641      	mov	r1, r8
 80022fc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002300:	4641      	mov	r1, r8
 8002302:	008a      	lsls	r2, r1, #2
 8002304:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8002308:	f7fd ff5e 	bl	80001c8 <__aeabi_uldivmod>
 800230c:	4602      	mov	r2, r0
 800230e:	460b      	mov	r3, r1
 8002310:	4b0d      	ldr	r3, [pc, #52]	; (8002348 <UART_SetConfig+0x4e4>)
 8002312:	fba3 1302 	umull	r1, r3, r3, r2
 8002316:	095b      	lsrs	r3, r3, #5
 8002318:	2164      	movs	r1, #100	; 0x64
 800231a:	fb01 f303 	mul.w	r3, r1, r3
 800231e:	1ad3      	subs	r3, r2, r3
 8002320:	011b      	lsls	r3, r3, #4
 8002322:	3332      	adds	r3, #50	; 0x32
 8002324:	4a08      	ldr	r2, [pc, #32]	; (8002348 <UART_SetConfig+0x4e4>)
 8002326:	fba2 2303 	umull	r2, r3, r2, r3
 800232a:	095b      	lsrs	r3, r3, #5
 800232c:	f003 020f 	and.w	r2, r3, #15
 8002330:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8002334:	681b      	ldr	r3, [r3, #0]
 8002336:	4422      	add	r2, r4
 8002338:	609a      	str	r2, [r3, #8]
}
 800233a:	bf00      	nop
 800233c:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8002340:	46bd      	mov	sp, r7
 8002342:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002346:	bf00      	nop
 8002348:	51eb851f 	.word	0x51eb851f

0800234c <__errno>:
 800234c:	4b01      	ldr	r3, [pc, #4]	; (8002354 <__errno+0x8>)
 800234e:	6818      	ldr	r0, [r3, #0]
 8002350:	4770      	bx	lr
 8002352:	bf00      	nop
 8002354:	2000000c 	.word	0x2000000c

08002358 <__libc_init_array>:
 8002358:	b570      	push	{r4, r5, r6, lr}
 800235a:	4d0d      	ldr	r5, [pc, #52]	; (8002390 <__libc_init_array+0x38>)
 800235c:	4c0d      	ldr	r4, [pc, #52]	; (8002394 <__libc_init_array+0x3c>)
 800235e:	1b64      	subs	r4, r4, r5
 8002360:	10a4      	asrs	r4, r4, #2
 8002362:	2600      	movs	r6, #0
 8002364:	42a6      	cmp	r6, r4
 8002366:	d109      	bne.n	800237c <__libc_init_array+0x24>
 8002368:	4d0b      	ldr	r5, [pc, #44]	; (8002398 <__libc_init_array+0x40>)
 800236a:	4c0c      	ldr	r4, [pc, #48]	; (800239c <__libc_init_array+0x44>)
 800236c:	f000 fd1e 	bl	8002dac <_init>
 8002370:	1b64      	subs	r4, r4, r5
 8002372:	10a4      	asrs	r4, r4, #2
 8002374:	2600      	movs	r6, #0
 8002376:	42a6      	cmp	r6, r4
 8002378:	d105      	bne.n	8002386 <__libc_init_array+0x2e>
 800237a:	bd70      	pop	{r4, r5, r6, pc}
 800237c:	f855 3b04 	ldr.w	r3, [r5], #4
 8002380:	4798      	blx	r3
 8002382:	3601      	adds	r6, #1
 8002384:	e7ee      	b.n	8002364 <__libc_init_array+0xc>
 8002386:	f855 3b04 	ldr.w	r3, [r5], #4
 800238a:	4798      	blx	r3
 800238c:	3601      	adds	r6, #1
 800238e:	e7f2      	b.n	8002376 <__libc_init_array+0x1e>
 8002390:	08002e5c 	.word	0x08002e5c
 8002394:	08002e5c 	.word	0x08002e5c
 8002398:	08002e5c 	.word	0x08002e5c
 800239c:	08002e60 	.word	0x08002e60

080023a0 <memset>:
 80023a0:	4402      	add	r2, r0
 80023a2:	4603      	mov	r3, r0
 80023a4:	4293      	cmp	r3, r2
 80023a6:	d100      	bne.n	80023aa <memset+0xa>
 80023a8:	4770      	bx	lr
 80023aa:	f803 1b01 	strb.w	r1, [r3], #1
 80023ae:	e7f9      	b.n	80023a4 <memset+0x4>

080023b0 <_puts_r>:
 80023b0:	b570      	push	{r4, r5, r6, lr}
 80023b2:	460e      	mov	r6, r1
 80023b4:	4605      	mov	r5, r0
 80023b6:	b118      	cbz	r0, 80023c0 <_puts_r+0x10>
 80023b8:	6983      	ldr	r3, [r0, #24]
 80023ba:	b90b      	cbnz	r3, 80023c0 <_puts_r+0x10>
 80023bc:	f000 fa48 	bl	8002850 <__sinit>
 80023c0:	69ab      	ldr	r3, [r5, #24]
 80023c2:	68ac      	ldr	r4, [r5, #8]
 80023c4:	b913      	cbnz	r3, 80023cc <_puts_r+0x1c>
 80023c6:	4628      	mov	r0, r5
 80023c8:	f000 fa42 	bl	8002850 <__sinit>
 80023cc:	4b2c      	ldr	r3, [pc, #176]	; (8002480 <_puts_r+0xd0>)
 80023ce:	429c      	cmp	r4, r3
 80023d0:	d120      	bne.n	8002414 <_puts_r+0x64>
 80023d2:	686c      	ldr	r4, [r5, #4]
 80023d4:	6e63      	ldr	r3, [r4, #100]	; 0x64
 80023d6:	07db      	lsls	r3, r3, #31
 80023d8:	d405      	bmi.n	80023e6 <_puts_r+0x36>
 80023da:	89a3      	ldrh	r3, [r4, #12]
 80023dc:	0598      	lsls	r0, r3, #22
 80023de:	d402      	bmi.n	80023e6 <_puts_r+0x36>
 80023e0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 80023e2:	f000 fad3 	bl	800298c <__retarget_lock_acquire_recursive>
 80023e6:	89a3      	ldrh	r3, [r4, #12]
 80023e8:	0719      	lsls	r1, r3, #28
 80023ea:	d51d      	bpl.n	8002428 <_puts_r+0x78>
 80023ec:	6923      	ldr	r3, [r4, #16]
 80023ee:	b1db      	cbz	r3, 8002428 <_puts_r+0x78>
 80023f0:	3e01      	subs	r6, #1
 80023f2:	68a3      	ldr	r3, [r4, #8]
 80023f4:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 80023f8:	3b01      	subs	r3, #1
 80023fa:	60a3      	str	r3, [r4, #8]
 80023fc:	bb39      	cbnz	r1, 800244e <_puts_r+0x9e>
 80023fe:	2b00      	cmp	r3, #0
 8002400:	da38      	bge.n	8002474 <_puts_r+0xc4>
 8002402:	4622      	mov	r2, r4
 8002404:	210a      	movs	r1, #10
 8002406:	4628      	mov	r0, r5
 8002408:	f000 f848 	bl	800249c <__swbuf_r>
 800240c:	3001      	adds	r0, #1
 800240e:	d011      	beq.n	8002434 <_puts_r+0x84>
 8002410:	250a      	movs	r5, #10
 8002412:	e011      	b.n	8002438 <_puts_r+0x88>
 8002414:	4b1b      	ldr	r3, [pc, #108]	; (8002484 <_puts_r+0xd4>)
 8002416:	429c      	cmp	r4, r3
 8002418:	d101      	bne.n	800241e <_puts_r+0x6e>
 800241a:	68ac      	ldr	r4, [r5, #8]
 800241c:	e7da      	b.n	80023d4 <_puts_r+0x24>
 800241e:	4b1a      	ldr	r3, [pc, #104]	; (8002488 <_puts_r+0xd8>)
 8002420:	429c      	cmp	r4, r3
 8002422:	bf08      	it	eq
 8002424:	68ec      	ldreq	r4, [r5, #12]
 8002426:	e7d5      	b.n	80023d4 <_puts_r+0x24>
 8002428:	4621      	mov	r1, r4
 800242a:	4628      	mov	r0, r5
 800242c:	f000 f888 	bl	8002540 <__swsetup_r>
 8002430:	2800      	cmp	r0, #0
 8002432:	d0dd      	beq.n	80023f0 <_puts_r+0x40>
 8002434:	f04f 35ff 	mov.w	r5, #4294967295
 8002438:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800243a:	07da      	lsls	r2, r3, #31
 800243c:	d405      	bmi.n	800244a <_puts_r+0x9a>
 800243e:	89a3      	ldrh	r3, [r4, #12]
 8002440:	059b      	lsls	r3, r3, #22
 8002442:	d402      	bmi.n	800244a <_puts_r+0x9a>
 8002444:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8002446:	f000 faa2 	bl	800298e <__retarget_lock_release_recursive>
 800244a:	4628      	mov	r0, r5
 800244c:	bd70      	pop	{r4, r5, r6, pc}
 800244e:	2b00      	cmp	r3, #0
 8002450:	da04      	bge.n	800245c <_puts_r+0xac>
 8002452:	69a2      	ldr	r2, [r4, #24]
 8002454:	429a      	cmp	r2, r3
 8002456:	dc06      	bgt.n	8002466 <_puts_r+0xb6>
 8002458:	290a      	cmp	r1, #10
 800245a:	d004      	beq.n	8002466 <_puts_r+0xb6>
 800245c:	6823      	ldr	r3, [r4, #0]
 800245e:	1c5a      	adds	r2, r3, #1
 8002460:	6022      	str	r2, [r4, #0]
 8002462:	7019      	strb	r1, [r3, #0]
 8002464:	e7c5      	b.n	80023f2 <_puts_r+0x42>
 8002466:	4622      	mov	r2, r4
 8002468:	4628      	mov	r0, r5
 800246a:	f000 f817 	bl	800249c <__swbuf_r>
 800246e:	3001      	adds	r0, #1
 8002470:	d1bf      	bne.n	80023f2 <_puts_r+0x42>
 8002472:	e7df      	b.n	8002434 <_puts_r+0x84>
 8002474:	6823      	ldr	r3, [r4, #0]
 8002476:	250a      	movs	r5, #10
 8002478:	1c5a      	adds	r2, r3, #1
 800247a:	6022      	str	r2, [r4, #0]
 800247c:	701d      	strb	r5, [r3, #0]
 800247e:	e7db      	b.n	8002438 <_puts_r+0x88>
 8002480:	08002e14 	.word	0x08002e14
 8002484:	08002e34 	.word	0x08002e34
 8002488:	08002df4 	.word	0x08002df4

0800248c <puts>:
 800248c:	4b02      	ldr	r3, [pc, #8]	; (8002498 <puts+0xc>)
 800248e:	4601      	mov	r1, r0
 8002490:	6818      	ldr	r0, [r3, #0]
 8002492:	f7ff bf8d 	b.w	80023b0 <_puts_r>
 8002496:	bf00      	nop
 8002498:	2000000c 	.word	0x2000000c

0800249c <__swbuf_r>:
 800249c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800249e:	460e      	mov	r6, r1
 80024a0:	4614      	mov	r4, r2
 80024a2:	4605      	mov	r5, r0
 80024a4:	b118      	cbz	r0, 80024ae <__swbuf_r+0x12>
 80024a6:	6983      	ldr	r3, [r0, #24]
 80024a8:	b90b      	cbnz	r3, 80024ae <__swbuf_r+0x12>
 80024aa:	f000 f9d1 	bl	8002850 <__sinit>
 80024ae:	4b21      	ldr	r3, [pc, #132]	; (8002534 <__swbuf_r+0x98>)
 80024b0:	429c      	cmp	r4, r3
 80024b2:	d12b      	bne.n	800250c <__swbuf_r+0x70>
 80024b4:	686c      	ldr	r4, [r5, #4]
 80024b6:	69a3      	ldr	r3, [r4, #24]
 80024b8:	60a3      	str	r3, [r4, #8]
 80024ba:	89a3      	ldrh	r3, [r4, #12]
 80024bc:	071a      	lsls	r2, r3, #28
 80024be:	d52f      	bpl.n	8002520 <__swbuf_r+0x84>
 80024c0:	6923      	ldr	r3, [r4, #16]
 80024c2:	b36b      	cbz	r3, 8002520 <__swbuf_r+0x84>
 80024c4:	6923      	ldr	r3, [r4, #16]
 80024c6:	6820      	ldr	r0, [r4, #0]
 80024c8:	1ac0      	subs	r0, r0, r3
 80024ca:	6963      	ldr	r3, [r4, #20]
 80024cc:	b2f6      	uxtb	r6, r6
 80024ce:	4283      	cmp	r3, r0
 80024d0:	4637      	mov	r7, r6
 80024d2:	dc04      	bgt.n	80024de <__swbuf_r+0x42>
 80024d4:	4621      	mov	r1, r4
 80024d6:	4628      	mov	r0, r5
 80024d8:	f000 f926 	bl	8002728 <_fflush_r>
 80024dc:	bb30      	cbnz	r0, 800252c <__swbuf_r+0x90>
 80024de:	68a3      	ldr	r3, [r4, #8]
 80024e0:	3b01      	subs	r3, #1
 80024e2:	60a3      	str	r3, [r4, #8]
 80024e4:	6823      	ldr	r3, [r4, #0]
 80024e6:	1c5a      	adds	r2, r3, #1
 80024e8:	6022      	str	r2, [r4, #0]
 80024ea:	701e      	strb	r6, [r3, #0]
 80024ec:	6963      	ldr	r3, [r4, #20]
 80024ee:	3001      	adds	r0, #1
 80024f0:	4283      	cmp	r3, r0
 80024f2:	d004      	beq.n	80024fe <__swbuf_r+0x62>
 80024f4:	89a3      	ldrh	r3, [r4, #12]
 80024f6:	07db      	lsls	r3, r3, #31
 80024f8:	d506      	bpl.n	8002508 <__swbuf_r+0x6c>
 80024fa:	2e0a      	cmp	r6, #10
 80024fc:	d104      	bne.n	8002508 <__swbuf_r+0x6c>
 80024fe:	4621      	mov	r1, r4
 8002500:	4628      	mov	r0, r5
 8002502:	f000 f911 	bl	8002728 <_fflush_r>
 8002506:	b988      	cbnz	r0, 800252c <__swbuf_r+0x90>
 8002508:	4638      	mov	r0, r7
 800250a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800250c:	4b0a      	ldr	r3, [pc, #40]	; (8002538 <__swbuf_r+0x9c>)
 800250e:	429c      	cmp	r4, r3
 8002510:	d101      	bne.n	8002516 <__swbuf_r+0x7a>
 8002512:	68ac      	ldr	r4, [r5, #8]
 8002514:	e7cf      	b.n	80024b6 <__swbuf_r+0x1a>
 8002516:	4b09      	ldr	r3, [pc, #36]	; (800253c <__swbuf_r+0xa0>)
 8002518:	429c      	cmp	r4, r3
 800251a:	bf08      	it	eq
 800251c:	68ec      	ldreq	r4, [r5, #12]
 800251e:	e7ca      	b.n	80024b6 <__swbuf_r+0x1a>
 8002520:	4621      	mov	r1, r4
 8002522:	4628      	mov	r0, r5
 8002524:	f000 f80c 	bl	8002540 <__swsetup_r>
 8002528:	2800      	cmp	r0, #0
 800252a:	d0cb      	beq.n	80024c4 <__swbuf_r+0x28>
 800252c:	f04f 37ff 	mov.w	r7, #4294967295
 8002530:	e7ea      	b.n	8002508 <__swbuf_r+0x6c>
 8002532:	bf00      	nop
 8002534:	08002e14 	.word	0x08002e14
 8002538:	08002e34 	.word	0x08002e34
 800253c:	08002df4 	.word	0x08002df4

08002540 <__swsetup_r>:
 8002540:	4b32      	ldr	r3, [pc, #200]	; (800260c <__swsetup_r+0xcc>)
 8002542:	b570      	push	{r4, r5, r6, lr}
 8002544:	681d      	ldr	r5, [r3, #0]
 8002546:	4606      	mov	r6, r0
 8002548:	460c      	mov	r4, r1
 800254a:	b125      	cbz	r5, 8002556 <__swsetup_r+0x16>
 800254c:	69ab      	ldr	r3, [r5, #24]
 800254e:	b913      	cbnz	r3, 8002556 <__swsetup_r+0x16>
 8002550:	4628      	mov	r0, r5
 8002552:	f000 f97d 	bl	8002850 <__sinit>
 8002556:	4b2e      	ldr	r3, [pc, #184]	; (8002610 <__swsetup_r+0xd0>)
 8002558:	429c      	cmp	r4, r3
 800255a:	d10f      	bne.n	800257c <__swsetup_r+0x3c>
 800255c:	686c      	ldr	r4, [r5, #4]
 800255e:	89a3      	ldrh	r3, [r4, #12]
 8002560:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8002564:	0719      	lsls	r1, r3, #28
 8002566:	d42c      	bmi.n	80025c2 <__swsetup_r+0x82>
 8002568:	06dd      	lsls	r5, r3, #27
 800256a:	d411      	bmi.n	8002590 <__swsetup_r+0x50>
 800256c:	2309      	movs	r3, #9
 800256e:	6033      	str	r3, [r6, #0]
 8002570:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8002574:	81a3      	strh	r3, [r4, #12]
 8002576:	f04f 30ff 	mov.w	r0, #4294967295
 800257a:	e03e      	b.n	80025fa <__swsetup_r+0xba>
 800257c:	4b25      	ldr	r3, [pc, #148]	; (8002614 <__swsetup_r+0xd4>)
 800257e:	429c      	cmp	r4, r3
 8002580:	d101      	bne.n	8002586 <__swsetup_r+0x46>
 8002582:	68ac      	ldr	r4, [r5, #8]
 8002584:	e7eb      	b.n	800255e <__swsetup_r+0x1e>
 8002586:	4b24      	ldr	r3, [pc, #144]	; (8002618 <__swsetup_r+0xd8>)
 8002588:	429c      	cmp	r4, r3
 800258a:	bf08      	it	eq
 800258c:	68ec      	ldreq	r4, [r5, #12]
 800258e:	e7e6      	b.n	800255e <__swsetup_r+0x1e>
 8002590:	0758      	lsls	r0, r3, #29
 8002592:	d512      	bpl.n	80025ba <__swsetup_r+0x7a>
 8002594:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8002596:	b141      	cbz	r1, 80025aa <__swsetup_r+0x6a>
 8002598:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800259c:	4299      	cmp	r1, r3
 800259e:	d002      	beq.n	80025a6 <__swsetup_r+0x66>
 80025a0:	4630      	mov	r0, r6
 80025a2:	f000 fa5b 	bl	8002a5c <_free_r>
 80025a6:	2300      	movs	r3, #0
 80025a8:	6363      	str	r3, [r4, #52]	; 0x34
 80025aa:	89a3      	ldrh	r3, [r4, #12]
 80025ac:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 80025b0:	81a3      	strh	r3, [r4, #12]
 80025b2:	2300      	movs	r3, #0
 80025b4:	6063      	str	r3, [r4, #4]
 80025b6:	6923      	ldr	r3, [r4, #16]
 80025b8:	6023      	str	r3, [r4, #0]
 80025ba:	89a3      	ldrh	r3, [r4, #12]
 80025bc:	f043 0308 	orr.w	r3, r3, #8
 80025c0:	81a3      	strh	r3, [r4, #12]
 80025c2:	6923      	ldr	r3, [r4, #16]
 80025c4:	b94b      	cbnz	r3, 80025da <__swsetup_r+0x9a>
 80025c6:	89a3      	ldrh	r3, [r4, #12]
 80025c8:	f403 7320 	and.w	r3, r3, #640	; 0x280
 80025cc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80025d0:	d003      	beq.n	80025da <__swsetup_r+0x9a>
 80025d2:	4621      	mov	r1, r4
 80025d4:	4630      	mov	r0, r6
 80025d6:	f000 fa01 	bl	80029dc <__smakebuf_r>
 80025da:	89a0      	ldrh	r0, [r4, #12]
 80025dc:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 80025e0:	f010 0301 	ands.w	r3, r0, #1
 80025e4:	d00a      	beq.n	80025fc <__swsetup_r+0xbc>
 80025e6:	2300      	movs	r3, #0
 80025e8:	60a3      	str	r3, [r4, #8]
 80025ea:	6963      	ldr	r3, [r4, #20]
 80025ec:	425b      	negs	r3, r3
 80025ee:	61a3      	str	r3, [r4, #24]
 80025f0:	6923      	ldr	r3, [r4, #16]
 80025f2:	b943      	cbnz	r3, 8002606 <__swsetup_r+0xc6>
 80025f4:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 80025f8:	d1ba      	bne.n	8002570 <__swsetup_r+0x30>
 80025fa:	bd70      	pop	{r4, r5, r6, pc}
 80025fc:	0781      	lsls	r1, r0, #30
 80025fe:	bf58      	it	pl
 8002600:	6963      	ldrpl	r3, [r4, #20]
 8002602:	60a3      	str	r3, [r4, #8]
 8002604:	e7f4      	b.n	80025f0 <__swsetup_r+0xb0>
 8002606:	2000      	movs	r0, #0
 8002608:	e7f7      	b.n	80025fa <__swsetup_r+0xba>
 800260a:	bf00      	nop
 800260c:	2000000c 	.word	0x2000000c
 8002610:	08002e14 	.word	0x08002e14
 8002614:	08002e34 	.word	0x08002e34
 8002618:	08002df4 	.word	0x08002df4

0800261c <__sflush_r>:
 800261c:	898a      	ldrh	r2, [r1, #12]
 800261e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002622:	4605      	mov	r5, r0
 8002624:	0710      	lsls	r0, r2, #28
 8002626:	460c      	mov	r4, r1
 8002628:	d458      	bmi.n	80026dc <__sflush_r+0xc0>
 800262a:	684b      	ldr	r3, [r1, #4]
 800262c:	2b00      	cmp	r3, #0
 800262e:	dc05      	bgt.n	800263c <__sflush_r+0x20>
 8002630:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8002632:	2b00      	cmp	r3, #0
 8002634:	dc02      	bgt.n	800263c <__sflush_r+0x20>
 8002636:	2000      	movs	r0, #0
 8002638:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800263c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800263e:	2e00      	cmp	r6, #0
 8002640:	d0f9      	beq.n	8002636 <__sflush_r+0x1a>
 8002642:	2300      	movs	r3, #0
 8002644:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8002648:	682f      	ldr	r7, [r5, #0]
 800264a:	602b      	str	r3, [r5, #0]
 800264c:	d032      	beq.n	80026b4 <__sflush_r+0x98>
 800264e:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8002650:	89a3      	ldrh	r3, [r4, #12]
 8002652:	075a      	lsls	r2, r3, #29
 8002654:	d505      	bpl.n	8002662 <__sflush_r+0x46>
 8002656:	6863      	ldr	r3, [r4, #4]
 8002658:	1ac0      	subs	r0, r0, r3
 800265a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800265c:	b10b      	cbz	r3, 8002662 <__sflush_r+0x46>
 800265e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8002660:	1ac0      	subs	r0, r0, r3
 8002662:	2300      	movs	r3, #0
 8002664:	4602      	mov	r2, r0
 8002666:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8002668:	6a21      	ldr	r1, [r4, #32]
 800266a:	4628      	mov	r0, r5
 800266c:	47b0      	blx	r6
 800266e:	1c43      	adds	r3, r0, #1
 8002670:	89a3      	ldrh	r3, [r4, #12]
 8002672:	d106      	bne.n	8002682 <__sflush_r+0x66>
 8002674:	6829      	ldr	r1, [r5, #0]
 8002676:	291d      	cmp	r1, #29
 8002678:	d82c      	bhi.n	80026d4 <__sflush_r+0xb8>
 800267a:	4a2a      	ldr	r2, [pc, #168]	; (8002724 <__sflush_r+0x108>)
 800267c:	40ca      	lsrs	r2, r1
 800267e:	07d6      	lsls	r6, r2, #31
 8002680:	d528      	bpl.n	80026d4 <__sflush_r+0xb8>
 8002682:	2200      	movs	r2, #0
 8002684:	6062      	str	r2, [r4, #4]
 8002686:	04d9      	lsls	r1, r3, #19
 8002688:	6922      	ldr	r2, [r4, #16]
 800268a:	6022      	str	r2, [r4, #0]
 800268c:	d504      	bpl.n	8002698 <__sflush_r+0x7c>
 800268e:	1c42      	adds	r2, r0, #1
 8002690:	d101      	bne.n	8002696 <__sflush_r+0x7a>
 8002692:	682b      	ldr	r3, [r5, #0]
 8002694:	b903      	cbnz	r3, 8002698 <__sflush_r+0x7c>
 8002696:	6560      	str	r0, [r4, #84]	; 0x54
 8002698:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800269a:	602f      	str	r7, [r5, #0]
 800269c:	2900      	cmp	r1, #0
 800269e:	d0ca      	beq.n	8002636 <__sflush_r+0x1a>
 80026a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 80026a4:	4299      	cmp	r1, r3
 80026a6:	d002      	beq.n	80026ae <__sflush_r+0x92>
 80026a8:	4628      	mov	r0, r5
 80026aa:	f000 f9d7 	bl	8002a5c <_free_r>
 80026ae:	2000      	movs	r0, #0
 80026b0:	6360      	str	r0, [r4, #52]	; 0x34
 80026b2:	e7c1      	b.n	8002638 <__sflush_r+0x1c>
 80026b4:	6a21      	ldr	r1, [r4, #32]
 80026b6:	2301      	movs	r3, #1
 80026b8:	4628      	mov	r0, r5
 80026ba:	47b0      	blx	r6
 80026bc:	1c41      	adds	r1, r0, #1
 80026be:	d1c7      	bne.n	8002650 <__sflush_r+0x34>
 80026c0:	682b      	ldr	r3, [r5, #0]
 80026c2:	2b00      	cmp	r3, #0
 80026c4:	d0c4      	beq.n	8002650 <__sflush_r+0x34>
 80026c6:	2b1d      	cmp	r3, #29
 80026c8:	d001      	beq.n	80026ce <__sflush_r+0xb2>
 80026ca:	2b16      	cmp	r3, #22
 80026cc:	d101      	bne.n	80026d2 <__sflush_r+0xb6>
 80026ce:	602f      	str	r7, [r5, #0]
 80026d0:	e7b1      	b.n	8002636 <__sflush_r+0x1a>
 80026d2:	89a3      	ldrh	r3, [r4, #12]
 80026d4:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80026d8:	81a3      	strh	r3, [r4, #12]
 80026da:	e7ad      	b.n	8002638 <__sflush_r+0x1c>
 80026dc:	690f      	ldr	r7, [r1, #16]
 80026de:	2f00      	cmp	r7, #0
 80026e0:	d0a9      	beq.n	8002636 <__sflush_r+0x1a>
 80026e2:	0793      	lsls	r3, r2, #30
 80026e4:	680e      	ldr	r6, [r1, #0]
 80026e6:	bf08      	it	eq
 80026e8:	694b      	ldreq	r3, [r1, #20]
 80026ea:	600f      	str	r7, [r1, #0]
 80026ec:	bf18      	it	ne
 80026ee:	2300      	movne	r3, #0
 80026f0:	eba6 0807 	sub.w	r8, r6, r7
 80026f4:	608b      	str	r3, [r1, #8]
 80026f6:	f1b8 0f00 	cmp.w	r8, #0
 80026fa:	dd9c      	ble.n	8002636 <__sflush_r+0x1a>
 80026fc:	6a21      	ldr	r1, [r4, #32]
 80026fe:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8002700:	4643      	mov	r3, r8
 8002702:	463a      	mov	r2, r7
 8002704:	4628      	mov	r0, r5
 8002706:	47b0      	blx	r6
 8002708:	2800      	cmp	r0, #0
 800270a:	dc06      	bgt.n	800271a <__sflush_r+0xfe>
 800270c:	89a3      	ldrh	r3, [r4, #12]
 800270e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8002712:	81a3      	strh	r3, [r4, #12]
 8002714:	f04f 30ff 	mov.w	r0, #4294967295
 8002718:	e78e      	b.n	8002638 <__sflush_r+0x1c>
 800271a:	4407      	add	r7, r0
 800271c:	eba8 0800 	sub.w	r8, r8, r0
 8002720:	e7e9      	b.n	80026f6 <__sflush_r+0xda>
 8002722:	bf00      	nop
 8002724:	20400001 	.word	0x20400001

08002728 <_fflush_r>:
 8002728:	b538      	push	{r3, r4, r5, lr}
 800272a:	690b      	ldr	r3, [r1, #16]
 800272c:	4605      	mov	r5, r0
 800272e:	460c      	mov	r4, r1
 8002730:	b913      	cbnz	r3, 8002738 <_fflush_r+0x10>
 8002732:	2500      	movs	r5, #0
 8002734:	4628      	mov	r0, r5
 8002736:	bd38      	pop	{r3, r4, r5, pc}
 8002738:	b118      	cbz	r0, 8002742 <_fflush_r+0x1a>
 800273a:	6983      	ldr	r3, [r0, #24]
 800273c:	b90b      	cbnz	r3, 8002742 <_fflush_r+0x1a>
 800273e:	f000 f887 	bl	8002850 <__sinit>
 8002742:	4b14      	ldr	r3, [pc, #80]	; (8002794 <_fflush_r+0x6c>)
 8002744:	429c      	cmp	r4, r3
 8002746:	d11b      	bne.n	8002780 <_fflush_r+0x58>
 8002748:	686c      	ldr	r4, [r5, #4]
 800274a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800274e:	2b00      	cmp	r3, #0
 8002750:	d0ef      	beq.n	8002732 <_fflush_r+0xa>
 8002752:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8002754:	07d0      	lsls	r0, r2, #31
 8002756:	d404      	bmi.n	8002762 <_fflush_r+0x3a>
 8002758:	0599      	lsls	r1, r3, #22
 800275a:	d402      	bmi.n	8002762 <_fflush_r+0x3a>
 800275c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800275e:	f000 f915 	bl	800298c <__retarget_lock_acquire_recursive>
 8002762:	4628      	mov	r0, r5
 8002764:	4621      	mov	r1, r4
 8002766:	f7ff ff59 	bl	800261c <__sflush_r>
 800276a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800276c:	07da      	lsls	r2, r3, #31
 800276e:	4605      	mov	r5, r0
 8002770:	d4e0      	bmi.n	8002734 <_fflush_r+0xc>
 8002772:	89a3      	ldrh	r3, [r4, #12]
 8002774:	059b      	lsls	r3, r3, #22
 8002776:	d4dd      	bmi.n	8002734 <_fflush_r+0xc>
 8002778:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800277a:	f000 f908 	bl	800298e <__retarget_lock_release_recursive>
 800277e:	e7d9      	b.n	8002734 <_fflush_r+0xc>
 8002780:	4b05      	ldr	r3, [pc, #20]	; (8002798 <_fflush_r+0x70>)
 8002782:	429c      	cmp	r4, r3
 8002784:	d101      	bne.n	800278a <_fflush_r+0x62>
 8002786:	68ac      	ldr	r4, [r5, #8]
 8002788:	e7df      	b.n	800274a <_fflush_r+0x22>
 800278a:	4b04      	ldr	r3, [pc, #16]	; (800279c <_fflush_r+0x74>)
 800278c:	429c      	cmp	r4, r3
 800278e:	bf08      	it	eq
 8002790:	68ec      	ldreq	r4, [r5, #12]
 8002792:	e7da      	b.n	800274a <_fflush_r+0x22>
 8002794:	08002e14 	.word	0x08002e14
 8002798:	08002e34 	.word	0x08002e34
 800279c:	08002df4 	.word	0x08002df4

080027a0 <std>:
 80027a0:	2300      	movs	r3, #0
 80027a2:	b510      	push	{r4, lr}
 80027a4:	4604      	mov	r4, r0
 80027a6:	e9c0 3300 	strd	r3, r3, [r0]
 80027aa:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80027ae:	6083      	str	r3, [r0, #8]
 80027b0:	8181      	strh	r1, [r0, #12]
 80027b2:	6643      	str	r3, [r0, #100]	; 0x64
 80027b4:	81c2      	strh	r2, [r0, #14]
 80027b6:	6183      	str	r3, [r0, #24]
 80027b8:	4619      	mov	r1, r3
 80027ba:	2208      	movs	r2, #8
 80027bc:	305c      	adds	r0, #92	; 0x5c
 80027be:	f7ff fdef 	bl	80023a0 <memset>
 80027c2:	4b05      	ldr	r3, [pc, #20]	; (80027d8 <std+0x38>)
 80027c4:	6263      	str	r3, [r4, #36]	; 0x24
 80027c6:	4b05      	ldr	r3, [pc, #20]	; (80027dc <std+0x3c>)
 80027c8:	62a3      	str	r3, [r4, #40]	; 0x28
 80027ca:	4b05      	ldr	r3, [pc, #20]	; (80027e0 <std+0x40>)
 80027cc:	62e3      	str	r3, [r4, #44]	; 0x2c
 80027ce:	4b05      	ldr	r3, [pc, #20]	; (80027e4 <std+0x44>)
 80027d0:	6224      	str	r4, [r4, #32]
 80027d2:	6323      	str	r3, [r4, #48]	; 0x30
 80027d4:	bd10      	pop	{r4, pc}
 80027d6:	bf00      	nop
 80027d8:	08002c3d 	.word	0x08002c3d
 80027dc:	08002c5f 	.word	0x08002c5f
 80027e0:	08002c97 	.word	0x08002c97
 80027e4:	08002cbb 	.word	0x08002cbb

080027e8 <_cleanup_r>:
 80027e8:	4901      	ldr	r1, [pc, #4]	; (80027f0 <_cleanup_r+0x8>)
 80027ea:	f000 b8af 	b.w	800294c <_fwalk_reent>
 80027ee:	bf00      	nop
 80027f0:	08002729 	.word	0x08002729

080027f4 <__sfmoreglue>:
 80027f4:	b570      	push	{r4, r5, r6, lr}
 80027f6:	2268      	movs	r2, #104	; 0x68
 80027f8:	1e4d      	subs	r5, r1, #1
 80027fa:	4355      	muls	r5, r2
 80027fc:	460e      	mov	r6, r1
 80027fe:	f105 0174 	add.w	r1, r5, #116	; 0x74
 8002802:	f000 f997 	bl	8002b34 <_malloc_r>
 8002806:	4604      	mov	r4, r0
 8002808:	b140      	cbz	r0, 800281c <__sfmoreglue+0x28>
 800280a:	2100      	movs	r1, #0
 800280c:	e9c0 1600 	strd	r1, r6, [r0]
 8002810:	300c      	adds	r0, #12
 8002812:	60a0      	str	r0, [r4, #8]
 8002814:	f105 0268 	add.w	r2, r5, #104	; 0x68
 8002818:	f7ff fdc2 	bl	80023a0 <memset>
 800281c:	4620      	mov	r0, r4
 800281e:	bd70      	pop	{r4, r5, r6, pc}

08002820 <__sfp_lock_acquire>:
 8002820:	4801      	ldr	r0, [pc, #4]	; (8002828 <__sfp_lock_acquire+0x8>)
 8002822:	f000 b8b3 	b.w	800298c <__retarget_lock_acquire_recursive>
 8002826:	bf00      	nop
 8002828:	200000d9 	.word	0x200000d9

0800282c <__sfp_lock_release>:
 800282c:	4801      	ldr	r0, [pc, #4]	; (8002834 <__sfp_lock_release+0x8>)
 800282e:	f000 b8ae 	b.w	800298e <__retarget_lock_release_recursive>
 8002832:	bf00      	nop
 8002834:	200000d9 	.word	0x200000d9

08002838 <__sinit_lock_acquire>:
 8002838:	4801      	ldr	r0, [pc, #4]	; (8002840 <__sinit_lock_acquire+0x8>)
 800283a:	f000 b8a7 	b.w	800298c <__retarget_lock_acquire_recursive>
 800283e:	bf00      	nop
 8002840:	200000da 	.word	0x200000da

08002844 <__sinit_lock_release>:
 8002844:	4801      	ldr	r0, [pc, #4]	; (800284c <__sinit_lock_release+0x8>)
 8002846:	f000 b8a2 	b.w	800298e <__retarget_lock_release_recursive>
 800284a:	bf00      	nop
 800284c:	200000da 	.word	0x200000da

08002850 <__sinit>:
 8002850:	b510      	push	{r4, lr}
 8002852:	4604      	mov	r4, r0
 8002854:	f7ff fff0 	bl	8002838 <__sinit_lock_acquire>
 8002858:	69a3      	ldr	r3, [r4, #24]
 800285a:	b11b      	cbz	r3, 8002864 <__sinit+0x14>
 800285c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002860:	f7ff bff0 	b.w	8002844 <__sinit_lock_release>
 8002864:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 8002868:	6523      	str	r3, [r4, #80]	; 0x50
 800286a:	4b13      	ldr	r3, [pc, #76]	; (80028b8 <__sinit+0x68>)
 800286c:	4a13      	ldr	r2, [pc, #76]	; (80028bc <__sinit+0x6c>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	62a2      	str	r2, [r4, #40]	; 0x28
 8002872:	42a3      	cmp	r3, r4
 8002874:	bf04      	itt	eq
 8002876:	2301      	moveq	r3, #1
 8002878:	61a3      	streq	r3, [r4, #24]
 800287a:	4620      	mov	r0, r4
 800287c:	f000 f820 	bl	80028c0 <__sfp>
 8002880:	6060      	str	r0, [r4, #4]
 8002882:	4620      	mov	r0, r4
 8002884:	f000 f81c 	bl	80028c0 <__sfp>
 8002888:	60a0      	str	r0, [r4, #8]
 800288a:	4620      	mov	r0, r4
 800288c:	f000 f818 	bl	80028c0 <__sfp>
 8002890:	2200      	movs	r2, #0
 8002892:	60e0      	str	r0, [r4, #12]
 8002894:	2104      	movs	r1, #4
 8002896:	6860      	ldr	r0, [r4, #4]
 8002898:	f7ff ff82 	bl	80027a0 <std>
 800289c:	68a0      	ldr	r0, [r4, #8]
 800289e:	2201      	movs	r2, #1
 80028a0:	2109      	movs	r1, #9
 80028a2:	f7ff ff7d 	bl	80027a0 <std>
 80028a6:	68e0      	ldr	r0, [r4, #12]
 80028a8:	2202      	movs	r2, #2
 80028aa:	2112      	movs	r1, #18
 80028ac:	f7ff ff78 	bl	80027a0 <std>
 80028b0:	2301      	movs	r3, #1
 80028b2:	61a3      	str	r3, [r4, #24]
 80028b4:	e7d2      	b.n	800285c <__sinit+0xc>
 80028b6:	bf00      	nop
 80028b8:	08002df0 	.word	0x08002df0
 80028bc:	080027e9 	.word	0x080027e9

080028c0 <__sfp>:
 80028c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80028c2:	4607      	mov	r7, r0
 80028c4:	f7ff ffac 	bl	8002820 <__sfp_lock_acquire>
 80028c8:	4b1e      	ldr	r3, [pc, #120]	; (8002944 <__sfp+0x84>)
 80028ca:	681e      	ldr	r6, [r3, #0]
 80028cc:	69b3      	ldr	r3, [r6, #24]
 80028ce:	b913      	cbnz	r3, 80028d6 <__sfp+0x16>
 80028d0:	4630      	mov	r0, r6
 80028d2:	f7ff ffbd 	bl	8002850 <__sinit>
 80028d6:	3648      	adds	r6, #72	; 0x48
 80028d8:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 80028dc:	3b01      	subs	r3, #1
 80028de:	d503      	bpl.n	80028e8 <__sfp+0x28>
 80028e0:	6833      	ldr	r3, [r6, #0]
 80028e2:	b30b      	cbz	r3, 8002928 <__sfp+0x68>
 80028e4:	6836      	ldr	r6, [r6, #0]
 80028e6:	e7f7      	b.n	80028d8 <__sfp+0x18>
 80028e8:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 80028ec:	b9d5      	cbnz	r5, 8002924 <__sfp+0x64>
 80028ee:	4b16      	ldr	r3, [pc, #88]	; (8002948 <__sfp+0x88>)
 80028f0:	60e3      	str	r3, [r4, #12]
 80028f2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 80028f6:	6665      	str	r5, [r4, #100]	; 0x64
 80028f8:	f000 f847 	bl	800298a <__retarget_lock_init_recursive>
 80028fc:	f7ff ff96 	bl	800282c <__sfp_lock_release>
 8002900:	e9c4 5501 	strd	r5, r5, [r4, #4]
 8002904:	e9c4 5504 	strd	r5, r5, [r4, #16]
 8002908:	6025      	str	r5, [r4, #0]
 800290a:	61a5      	str	r5, [r4, #24]
 800290c:	2208      	movs	r2, #8
 800290e:	4629      	mov	r1, r5
 8002910:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 8002914:	f7ff fd44 	bl	80023a0 <memset>
 8002918:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800291c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 8002920:	4620      	mov	r0, r4
 8002922:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8002924:	3468      	adds	r4, #104	; 0x68
 8002926:	e7d9      	b.n	80028dc <__sfp+0x1c>
 8002928:	2104      	movs	r1, #4
 800292a:	4638      	mov	r0, r7
 800292c:	f7ff ff62 	bl	80027f4 <__sfmoreglue>
 8002930:	4604      	mov	r4, r0
 8002932:	6030      	str	r0, [r6, #0]
 8002934:	2800      	cmp	r0, #0
 8002936:	d1d5      	bne.n	80028e4 <__sfp+0x24>
 8002938:	f7ff ff78 	bl	800282c <__sfp_lock_release>
 800293c:	230c      	movs	r3, #12
 800293e:	603b      	str	r3, [r7, #0]
 8002940:	e7ee      	b.n	8002920 <__sfp+0x60>
 8002942:	bf00      	nop
 8002944:	08002df0 	.word	0x08002df0
 8002948:	ffff0001 	.word	0xffff0001

0800294c <_fwalk_reent>:
 800294c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002950:	4606      	mov	r6, r0
 8002952:	4688      	mov	r8, r1
 8002954:	f100 0448 	add.w	r4, r0, #72	; 0x48
 8002958:	2700      	movs	r7, #0
 800295a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800295e:	f1b9 0901 	subs.w	r9, r9, #1
 8002962:	d505      	bpl.n	8002970 <_fwalk_reent+0x24>
 8002964:	6824      	ldr	r4, [r4, #0]
 8002966:	2c00      	cmp	r4, #0
 8002968:	d1f7      	bne.n	800295a <_fwalk_reent+0xe>
 800296a:	4638      	mov	r0, r7
 800296c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002970:	89ab      	ldrh	r3, [r5, #12]
 8002972:	2b01      	cmp	r3, #1
 8002974:	d907      	bls.n	8002986 <_fwalk_reent+0x3a>
 8002976:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800297a:	3301      	adds	r3, #1
 800297c:	d003      	beq.n	8002986 <_fwalk_reent+0x3a>
 800297e:	4629      	mov	r1, r5
 8002980:	4630      	mov	r0, r6
 8002982:	47c0      	blx	r8
 8002984:	4307      	orrs	r7, r0
 8002986:	3568      	adds	r5, #104	; 0x68
 8002988:	e7e9      	b.n	800295e <_fwalk_reent+0x12>

0800298a <__retarget_lock_init_recursive>:
 800298a:	4770      	bx	lr

0800298c <__retarget_lock_acquire_recursive>:
 800298c:	4770      	bx	lr

0800298e <__retarget_lock_release_recursive>:
 800298e:	4770      	bx	lr

08002990 <__swhatbuf_r>:
 8002990:	b570      	push	{r4, r5, r6, lr}
 8002992:	460e      	mov	r6, r1
 8002994:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002998:	2900      	cmp	r1, #0
 800299a:	b096      	sub	sp, #88	; 0x58
 800299c:	4614      	mov	r4, r2
 800299e:	461d      	mov	r5, r3
 80029a0:	da08      	bge.n	80029b4 <__swhatbuf_r+0x24>
 80029a2:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 80029a6:	2200      	movs	r2, #0
 80029a8:	602a      	str	r2, [r5, #0]
 80029aa:	061a      	lsls	r2, r3, #24
 80029ac:	d410      	bmi.n	80029d0 <__swhatbuf_r+0x40>
 80029ae:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029b2:	e00e      	b.n	80029d2 <__swhatbuf_r+0x42>
 80029b4:	466a      	mov	r2, sp
 80029b6:	f000 f9a7 	bl	8002d08 <_fstat_r>
 80029ba:	2800      	cmp	r0, #0
 80029bc:	dbf1      	blt.n	80029a2 <__swhatbuf_r+0x12>
 80029be:	9a01      	ldr	r2, [sp, #4]
 80029c0:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 80029c4:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 80029c8:	425a      	negs	r2, r3
 80029ca:	415a      	adcs	r2, r3
 80029cc:	602a      	str	r2, [r5, #0]
 80029ce:	e7ee      	b.n	80029ae <__swhatbuf_r+0x1e>
 80029d0:	2340      	movs	r3, #64	; 0x40
 80029d2:	2000      	movs	r0, #0
 80029d4:	6023      	str	r3, [r4, #0]
 80029d6:	b016      	add	sp, #88	; 0x58
 80029d8:	bd70      	pop	{r4, r5, r6, pc}
	...

080029dc <__smakebuf_r>:
 80029dc:	898b      	ldrh	r3, [r1, #12]
 80029de:	b573      	push	{r0, r1, r4, r5, r6, lr}
 80029e0:	079d      	lsls	r5, r3, #30
 80029e2:	4606      	mov	r6, r0
 80029e4:	460c      	mov	r4, r1
 80029e6:	d507      	bpl.n	80029f8 <__smakebuf_r+0x1c>
 80029e8:	f104 0347 	add.w	r3, r4, #71	; 0x47
 80029ec:	6023      	str	r3, [r4, #0]
 80029ee:	6123      	str	r3, [r4, #16]
 80029f0:	2301      	movs	r3, #1
 80029f2:	6163      	str	r3, [r4, #20]
 80029f4:	b002      	add	sp, #8
 80029f6:	bd70      	pop	{r4, r5, r6, pc}
 80029f8:	ab01      	add	r3, sp, #4
 80029fa:	466a      	mov	r2, sp
 80029fc:	f7ff ffc8 	bl	8002990 <__swhatbuf_r>
 8002a00:	9900      	ldr	r1, [sp, #0]
 8002a02:	4605      	mov	r5, r0
 8002a04:	4630      	mov	r0, r6
 8002a06:	f000 f895 	bl	8002b34 <_malloc_r>
 8002a0a:	b948      	cbnz	r0, 8002a20 <__smakebuf_r+0x44>
 8002a0c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8002a10:	059a      	lsls	r2, r3, #22
 8002a12:	d4ef      	bmi.n	80029f4 <__smakebuf_r+0x18>
 8002a14:	f023 0303 	bic.w	r3, r3, #3
 8002a18:	f043 0302 	orr.w	r3, r3, #2
 8002a1c:	81a3      	strh	r3, [r4, #12]
 8002a1e:	e7e3      	b.n	80029e8 <__smakebuf_r+0xc>
 8002a20:	4b0d      	ldr	r3, [pc, #52]	; (8002a58 <__smakebuf_r+0x7c>)
 8002a22:	62b3      	str	r3, [r6, #40]	; 0x28
 8002a24:	89a3      	ldrh	r3, [r4, #12]
 8002a26:	6020      	str	r0, [r4, #0]
 8002a28:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8002a2c:	81a3      	strh	r3, [r4, #12]
 8002a2e:	9b00      	ldr	r3, [sp, #0]
 8002a30:	6163      	str	r3, [r4, #20]
 8002a32:	9b01      	ldr	r3, [sp, #4]
 8002a34:	6120      	str	r0, [r4, #16]
 8002a36:	b15b      	cbz	r3, 8002a50 <__smakebuf_r+0x74>
 8002a38:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002a3c:	4630      	mov	r0, r6
 8002a3e:	f000 f975 	bl	8002d2c <_isatty_r>
 8002a42:	b128      	cbz	r0, 8002a50 <__smakebuf_r+0x74>
 8002a44:	89a3      	ldrh	r3, [r4, #12]
 8002a46:	f023 0303 	bic.w	r3, r3, #3
 8002a4a:	f043 0301 	orr.w	r3, r3, #1
 8002a4e:	81a3      	strh	r3, [r4, #12]
 8002a50:	89a0      	ldrh	r0, [r4, #12]
 8002a52:	4305      	orrs	r5, r0
 8002a54:	81a5      	strh	r5, [r4, #12]
 8002a56:	e7cd      	b.n	80029f4 <__smakebuf_r+0x18>
 8002a58:	080027e9 	.word	0x080027e9

08002a5c <_free_r>:
 8002a5c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8002a5e:	2900      	cmp	r1, #0
 8002a60:	d044      	beq.n	8002aec <_free_r+0x90>
 8002a62:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8002a66:	9001      	str	r0, [sp, #4]
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	f1a1 0404 	sub.w	r4, r1, #4
 8002a6e:	bfb8      	it	lt
 8002a70:	18e4      	addlt	r4, r4, r3
 8002a72:	f000 f97d 	bl	8002d70 <__malloc_lock>
 8002a76:	4a1e      	ldr	r2, [pc, #120]	; (8002af0 <_free_r+0x94>)
 8002a78:	9801      	ldr	r0, [sp, #4]
 8002a7a:	6813      	ldr	r3, [r2, #0]
 8002a7c:	b933      	cbnz	r3, 8002a8c <_free_r+0x30>
 8002a7e:	6063      	str	r3, [r4, #4]
 8002a80:	6014      	str	r4, [r2, #0]
 8002a82:	b003      	add	sp, #12
 8002a84:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8002a88:	f000 b978 	b.w	8002d7c <__malloc_unlock>
 8002a8c:	42a3      	cmp	r3, r4
 8002a8e:	d908      	bls.n	8002aa2 <_free_r+0x46>
 8002a90:	6825      	ldr	r5, [r4, #0]
 8002a92:	1961      	adds	r1, r4, r5
 8002a94:	428b      	cmp	r3, r1
 8002a96:	bf01      	itttt	eq
 8002a98:	6819      	ldreq	r1, [r3, #0]
 8002a9a:	685b      	ldreq	r3, [r3, #4]
 8002a9c:	1949      	addeq	r1, r1, r5
 8002a9e:	6021      	streq	r1, [r4, #0]
 8002aa0:	e7ed      	b.n	8002a7e <_free_r+0x22>
 8002aa2:	461a      	mov	r2, r3
 8002aa4:	685b      	ldr	r3, [r3, #4]
 8002aa6:	b10b      	cbz	r3, 8002aac <_free_r+0x50>
 8002aa8:	42a3      	cmp	r3, r4
 8002aaa:	d9fa      	bls.n	8002aa2 <_free_r+0x46>
 8002aac:	6811      	ldr	r1, [r2, #0]
 8002aae:	1855      	adds	r5, r2, r1
 8002ab0:	42a5      	cmp	r5, r4
 8002ab2:	d10b      	bne.n	8002acc <_free_r+0x70>
 8002ab4:	6824      	ldr	r4, [r4, #0]
 8002ab6:	4421      	add	r1, r4
 8002ab8:	1854      	adds	r4, r2, r1
 8002aba:	42a3      	cmp	r3, r4
 8002abc:	6011      	str	r1, [r2, #0]
 8002abe:	d1e0      	bne.n	8002a82 <_free_r+0x26>
 8002ac0:	681c      	ldr	r4, [r3, #0]
 8002ac2:	685b      	ldr	r3, [r3, #4]
 8002ac4:	6053      	str	r3, [r2, #4]
 8002ac6:	4421      	add	r1, r4
 8002ac8:	6011      	str	r1, [r2, #0]
 8002aca:	e7da      	b.n	8002a82 <_free_r+0x26>
 8002acc:	d902      	bls.n	8002ad4 <_free_r+0x78>
 8002ace:	230c      	movs	r3, #12
 8002ad0:	6003      	str	r3, [r0, #0]
 8002ad2:	e7d6      	b.n	8002a82 <_free_r+0x26>
 8002ad4:	6825      	ldr	r5, [r4, #0]
 8002ad6:	1961      	adds	r1, r4, r5
 8002ad8:	428b      	cmp	r3, r1
 8002ada:	bf04      	itt	eq
 8002adc:	6819      	ldreq	r1, [r3, #0]
 8002ade:	685b      	ldreq	r3, [r3, #4]
 8002ae0:	6063      	str	r3, [r4, #4]
 8002ae2:	bf04      	itt	eq
 8002ae4:	1949      	addeq	r1, r1, r5
 8002ae6:	6021      	streq	r1, [r4, #0]
 8002ae8:	6054      	str	r4, [r2, #4]
 8002aea:	e7ca      	b.n	8002a82 <_free_r+0x26>
 8002aec:	b003      	add	sp, #12
 8002aee:	bd30      	pop	{r4, r5, pc}
 8002af0:	200000dc 	.word	0x200000dc

08002af4 <sbrk_aligned>:
 8002af4:	b570      	push	{r4, r5, r6, lr}
 8002af6:	4e0e      	ldr	r6, [pc, #56]	; (8002b30 <sbrk_aligned+0x3c>)
 8002af8:	460c      	mov	r4, r1
 8002afa:	6831      	ldr	r1, [r6, #0]
 8002afc:	4605      	mov	r5, r0
 8002afe:	b911      	cbnz	r1, 8002b06 <sbrk_aligned+0x12>
 8002b00:	f000 f88c 	bl	8002c1c <_sbrk_r>
 8002b04:	6030      	str	r0, [r6, #0]
 8002b06:	4621      	mov	r1, r4
 8002b08:	4628      	mov	r0, r5
 8002b0a:	f000 f887 	bl	8002c1c <_sbrk_r>
 8002b0e:	1c43      	adds	r3, r0, #1
 8002b10:	d00a      	beq.n	8002b28 <sbrk_aligned+0x34>
 8002b12:	1cc4      	adds	r4, r0, #3
 8002b14:	f024 0403 	bic.w	r4, r4, #3
 8002b18:	42a0      	cmp	r0, r4
 8002b1a:	d007      	beq.n	8002b2c <sbrk_aligned+0x38>
 8002b1c:	1a21      	subs	r1, r4, r0
 8002b1e:	4628      	mov	r0, r5
 8002b20:	f000 f87c 	bl	8002c1c <_sbrk_r>
 8002b24:	3001      	adds	r0, #1
 8002b26:	d101      	bne.n	8002b2c <sbrk_aligned+0x38>
 8002b28:	f04f 34ff 	mov.w	r4, #4294967295
 8002b2c:	4620      	mov	r0, r4
 8002b2e:	bd70      	pop	{r4, r5, r6, pc}
 8002b30:	200000e0 	.word	0x200000e0

08002b34 <_malloc_r>:
 8002b34:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002b38:	1ccd      	adds	r5, r1, #3
 8002b3a:	f025 0503 	bic.w	r5, r5, #3
 8002b3e:	3508      	adds	r5, #8
 8002b40:	2d0c      	cmp	r5, #12
 8002b42:	bf38      	it	cc
 8002b44:	250c      	movcc	r5, #12
 8002b46:	2d00      	cmp	r5, #0
 8002b48:	4607      	mov	r7, r0
 8002b4a:	db01      	blt.n	8002b50 <_malloc_r+0x1c>
 8002b4c:	42a9      	cmp	r1, r5
 8002b4e:	d905      	bls.n	8002b5c <_malloc_r+0x28>
 8002b50:	230c      	movs	r3, #12
 8002b52:	603b      	str	r3, [r7, #0]
 8002b54:	2600      	movs	r6, #0
 8002b56:	4630      	mov	r0, r6
 8002b58:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8002b5c:	4e2e      	ldr	r6, [pc, #184]	; (8002c18 <_malloc_r+0xe4>)
 8002b5e:	f000 f907 	bl	8002d70 <__malloc_lock>
 8002b62:	6833      	ldr	r3, [r6, #0]
 8002b64:	461c      	mov	r4, r3
 8002b66:	bb34      	cbnz	r4, 8002bb6 <_malloc_r+0x82>
 8002b68:	4629      	mov	r1, r5
 8002b6a:	4638      	mov	r0, r7
 8002b6c:	f7ff ffc2 	bl	8002af4 <sbrk_aligned>
 8002b70:	1c43      	adds	r3, r0, #1
 8002b72:	4604      	mov	r4, r0
 8002b74:	d14d      	bne.n	8002c12 <_malloc_r+0xde>
 8002b76:	6834      	ldr	r4, [r6, #0]
 8002b78:	4626      	mov	r6, r4
 8002b7a:	2e00      	cmp	r6, #0
 8002b7c:	d140      	bne.n	8002c00 <_malloc_r+0xcc>
 8002b7e:	6823      	ldr	r3, [r4, #0]
 8002b80:	4631      	mov	r1, r6
 8002b82:	4638      	mov	r0, r7
 8002b84:	eb04 0803 	add.w	r8, r4, r3
 8002b88:	f000 f848 	bl	8002c1c <_sbrk_r>
 8002b8c:	4580      	cmp	r8, r0
 8002b8e:	d13a      	bne.n	8002c06 <_malloc_r+0xd2>
 8002b90:	6821      	ldr	r1, [r4, #0]
 8002b92:	3503      	adds	r5, #3
 8002b94:	1a6d      	subs	r5, r5, r1
 8002b96:	f025 0503 	bic.w	r5, r5, #3
 8002b9a:	3508      	adds	r5, #8
 8002b9c:	2d0c      	cmp	r5, #12
 8002b9e:	bf38      	it	cc
 8002ba0:	250c      	movcc	r5, #12
 8002ba2:	4629      	mov	r1, r5
 8002ba4:	4638      	mov	r0, r7
 8002ba6:	f7ff ffa5 	bl	8002af4 <sbrk_aligned>
 8002baa:	3001      	adds	r0, #1
 8002bac:	d02b      	beq.n	8002c06 <_malloc_r+0xd2>
 8002bae:	6823      	ldr	r3, [r4, #0]
 8002bb0:	442b      	add	r3, r5
 8002bb2:	6023      	str	r3, [r4, #0]
 8002bb4:	e00e      	b.n	8002bd4 <_malloc_r+0xa0>
 8002bb6:	6822      	ldr	r2, [r4, #0]
 8002bb8:	1b52      	subs	r2, r2, r5
 8002bba:	d41e      	bmi.n	8002bfa <_malloc_r+0xc6>
 8002bbc:	2a0b      	cmp	r2, #11
 8002bbe:	d916      	bls.n	8002bee <_malloc_r+0xba>
 8002bc0:	1961      	adds	r1, r4, r5
 8002bc2:	42a3      	cmp	r3, r4
 8002bc4:	6025      	str	r5, [r4, #0]
 8002bc6:	bf18      	it	ne
 8002bc8:	6059      	strne	r1, [r3, #4]
 8002bca:	6863      	ldr	r3, [r4, #4]
 8002bcc:	bf08      	it	eq
 8002bce:	6031      	streq	r1, [r6, #0]
 8002bd0:	5162      	str	r2, [r4, r5]
 8002bd2:	604b      	str	r3, [r1, #4]
 8002bd4:	4638      	mov	r0, r7
 8002bd6:	f104 060b 	add.w	r6, r4, #11
 8002bda:	f000 f8cf 	bl	8002d7c <__malloc_unlock>
 8002bde:	f026 0607 	bic.w	r6, r6, #7
 8002be2:	1d23      	adds	r3, r4, #4
 8002be4:	1af2      	subs	r2, r6, r3
 8002be6:	d0b6      	beq.n	8002b56 <_malloc_r+0x22>
 8002be8:	1b9b      	subs	r3, r3, r6
 8002bea:	50a3      	str	r3, [r4, r2]
 8002bec:	e7b3      	b.n	8002b56 <_malloc_r+0x22>
 8002bee:	6862      	ldr	r2, [r4, #4]
 8002bf0:	42a3      	cmp	r3, r4
 8002bf2:	bf0c      	ite	eq
 8002bf4:	6032      	streq	r2, [r6, #0]
 8002bf6:	605a      	strne	r2, [r3, #4]
 8002bf8:	e7ec      	b.n	8002bd4 <_malloc_r+0xa0>
 8002bfa:	4623      	mov	r3, r4
 8002bfc:	6864      	ldr	r4, [r4, #4]
 8002bfe:	e7b2      	b.n	8002b66 <_malloc_r+0x32>
 8002c00:	4634      	mov	r4, r6
 8002c02:	6876      	ldr	r6, [r6, #4]
 8002c04:	e7b9      	b.n	8002b7a <_malloc_r+0x46>
 8002c06:	230c      	movs	r3, #12
 8002c08:	603b      	str	r3, [r7, #0]
 8002c0a:	4638      	mov	r0, r7
 8002c0c:	f000 f8b6 	bl	8002d7c <__malloc_unlock>
 8002c10:	e7a1      	b.n	8002b56 <_malloc_r+0x22>
 8002c12:	6025      	str	r5, [r4, #0]
 8002c14:	e7de      	b.n	8002bd4 <_malloc_r+0xa0>
 8002c16:	bf00      	nop
 8002c18:	200000dc 	.word	0x200000dc

08002c1c <_sbrk_r>:
 8002c1c:	b538      	push	{r3, r4, r5, lr}
 8002c1e:	4d06      	ldr	r5, [pc, #24]	; (8002c38 <_sbrk_r+0x1c>)
 8002c20:	2300      	movs	r3, #0
 8002c22:	4604      	mov	r4, r0
 8002c24:	4608      	mov	r0, r1
 8002c26:	602b      	str	r3, [r5, #0]
 8002c28:	f7fd fe8e 	bl	8000948 <_sbrk>
 8002c2c:	1c43      	adds	r3, r0, #1
 8002c2e:	d102      	bne.n	8002c36 <_sbrk_r+0x1a>
 8002c30:	682b      	ldr	r3, [r5, #0]
 8002c32:	b103      	cbz	r3, 8002c36 <_sbrk_r+0x1a>
 8002c34:	6023      	str	r3, [r4, #0]
 8002c36:	bd38      	pop	{r3, r4, r5, pc}
 8002c38:	200000e4 	.word	0x200000e4

08002c3c <__sread>:
 8002c3c:	b510      	push	{r4, lr}
 8002c3e:	460c      	mov	r4, r1
 8002c40:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c44:	f000 f8a0 	bl	8002d88 <_read_r>
 8002c48:	2800      	cmp	r0, #0
 8002c4a:	bfab      	itete	ge
 8002c4c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8002c4e:	89a3      	ldrhlt	r3, [r4, #12]
 8002c50:	181b      	addge	r3, r3, r0
 8002c52:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8002c56:	bfac      	ite	ge
 8002c58:	6563      	strge	r3, [r4, #84]	; 0x54
 8002c5a:	81a3      	strhlt	r3, [r4, #12]
 8002c5c:	bd10      	pop	{r4, pc}

08002c5e <__swrite>:
 8002c5e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002c62:	461f      	mov	r7, r3
 8002c64:	898b      	ldrh	r3, [r1, #12]
 8002c66:	05db      	lsls	r3, r3, #23
 8002c68:	4605      	mov	r5, r0
 8002c6a:	460c      	mov	r4, r1
 8002c6c:	4616      	mov	r6, r2
 8002c6e:	d505      	bpl.n	8002c7c <__swrite+0x1e>
 8002c70:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c74:	2302      	movs	r3, #2
 8002c76:	2200      	movs	r2, #0
 8002c78:	f000 f868 	bl	8002d4c <_lseek_r>
 8002c7c:	89a3      	ldrh	r3, [r4, #12]
 8002c7e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002c82:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8002c86:	81a3      	strh	r3, [r4, #12]
 8002c88:	4632      	mov	r2, r6
 8002c8a:	463b      	mov	r3, r7
 8002c8c:	4628      	mov	r0, r5
 8002c8e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002c92:	f000 b817 	b.w	8002cc4 <_write_r>

08002c96 <__sseek>:
 8002c96:	b510      	push	{r4, lr}
 8002c98:	460c      	mov	r4, r1
 8002c9a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002c9e:	f000 f855 	bl	8002d4c <_lseek_r>
 8002ca2:	1c43      	adds	r3, r0, #1
 8002ca4:	89a3      	ldrh	r3, [r4, #12]
 8002ca6:	bf15      	itete	ne
 8002ca8:	6560      	strne	r0, [r4, #84]	; 0x54
 8002caa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8002cae:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8002cb2:	81a3      	strheq	r3, [r4, #12]
 8002cb4:	bf18      	it	ne
 8002cb6:	81a3      	strhne	r3, [r4, #12]
 8002cb8:	bd10      	pop	{r4, pc}

08002cba <__sclose>:
 8002cba:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002cbe:	f000 b813 	b.w	8002ce8 <_close_r>
	...

08002cc4 <_write_r>:
 8002cc4:	b538      	push	{r3, r4, r5, lr}
 8002cc6:	4d07      	ldr	r5, [pc, #28]	; (8002ce4 <_write_r+0x20>)
 8002cc8:	4604      	mov	r4, r0
 8002cca:	4608      	mov	r0, r1
 8002ccc:	4611      	mov	r1, r2
 8002cce:	2200      	movs	r2, #0
 8002cd0:	602a      	str	r2, [r5, #0]
 8002cd2:	461a      	mov	r2, r3
 8002cd4:	f7fd fde7 	bl	80008a6 <_write>
 8002cd8:	1c43      	adds	r3, r0, #1
 8002cda:	d102      	bne.n	8002ce2 <_write_r+0x1e>
 8002cdc:	682b      	ldr	r3, [r5, #0]
 8002cde:	b103      	cbz	r3, 8002ce2 <_write_r+0x1e>
 8002ce0:	6023      	str	r3, [r4, #0]
 8002ce2:	bd38      	pop	{r3, r4, r5, pc}
 8002ce4:	200000e4 	.word	0x200000e4

08002ce8 <_close_r>:
 8002ce8:	b538      	push	{r3, r4, r5, lr}
 8002cea:	4d06      	ldr	r5, [pc, #24]	; (8002d04 <_close_r+0x1c>)
 8002cec:	2300      	movs	r3, #0
 8002cee:	4604      	mov	r4, r0
 8002cf0:	4608      	mov	r0, r1
 8002cf2:	602b      	str	r3, [r5, #0]
 8002cf4:	f7fd fdf3 	bl	80008de <_close>
 8002cf8:	1c43      	adds	r3, r0, #1
 8002cfa:	d102      	bne.n	8002d02 <_close_r+0x1a>
 8002cfc:	682b      	ldr	r3, [r5, #0]
 8002cfe:	b103      	cbz	r3, 8002d02 <_close_r+0x1a>
 8002d00:	6023      	str	r3, [r4, #0]
 8002d02:	bd38      	pop	{r3, r4, r5, pc}
 8002d04:	200000e4 	.word	0x200000e4

08002d08 <_fstat_r>:
 8002d08:	b538      	push	{r3, r4, r5, lr}
 8002d0a:	4d07      	ldr	r5, [pc, #28]	; (8002d28 <_fstat_r+0x20>)
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	4604      	mov	r4, r0
 8002d10:	4608      	mov	r0, r1
 8002d12:	4611      	mov	r1, r2
 8002d14:	602b      	str	r3, [r5, #0]
 8002d16:	f7fd fdee 	bl	80008f6 <_fstat>
 8002d1a:	1c43      	adds	r3, r0, #1
 8002d1c:	d102      	bne.n	8002d24 <_fstat_r+0x1c>
 8002d1e:	682b      	ldr	r3, [r5, #0]
 8002d20:	b103      	cbz	r3, 8002d24 <_fstat_r+0x1c>
 8002d22:	6023      	str	r3, [r4, #0]
 8002d24:	bd38      	pop	{r3, r4, r5, pc}
 8002d26:	bf00      	nop
 8002d28:	200000e4 	.word	0x200000e4

08002d2c <_isatty_r>:
 8002d2c:	b538      	push	{r3, r4, r5, lr}
 8002d2e:	4d06      	ldr	r5, [pc, #24]	; (8002d48 <_isatty_r+0x1c>)
 8002d30:	2300      	movs	r3, #0
 8002d32:	4604      	mov	r4, r0
 8002d34:	4608      	mov	r0, r1
 8002d36:	602b      	str	r3, [r5, #0]
 8002d38:	f7fd fded 	bl	8000916 <_isatty>
 8002d3c:	1c43      	adds	r3, r0, #1
 8002d3e:	d102      	bne.n	8002d46 <_isatty_r+0x1a>
 8002d40:	682b      	ldr	r3, [r5, #0]
 8002d42:	b103      	cbz	r3, 8002d46 <_isatty_r+0x1a>
 8002d44:	6023      	str	r3, [r4, #0]
 8002d46:	bd38      	pop	{r3, r4, r5, pc}
 8002d48:	200000e4 	.word	0x200000e4

08002d4c <_lseek_r>:
 8002d4c:	b538      	push	{r3, r4, r5, lr}
 8002d4e:	4d07      	ldr	r5, [pc, #28]	; (8002d6c <_lseek_r+0x20>)
 8002d50:	4604      	mov	r4, r0
 8002d52:	4608      	mov	r0, r1
 8002d54:	4611      	mov	r1, r2
 8002d56:	2200      	movs	r2, #0
 8002d58:	602a      	str	r2, [r5, #0]
 8002d5a:	461a      	mov	r2, r3
 8002d5c:	f7fd fde6 	bl	800092c <_lseek>
 8002d60:	1c43      	adds	r3, r0, #1
 8002d62:	d102      	bne.n	8002d6a <_lseek_r+0x1e>
 8002d64:	682b      	ldr	r3, [r5, #0]
 8002d66:	b103      	cbz	r3, 8002d6a <_lseek_r+0x1e>
 8002d68:	6023      	str	r3, [r4, #0]
 8002d6a:	bd38      	pop	{r3, r4, r5, pc}
 8002d6c:	200000e4 	.word	0x200000e4

08002d70 <__malloc_lock>:
 8002d70:	4801      	ldr	r0, [pc, #4]	; (8002d78 <__malloc_lock+0x8>)
 8002d72:	f7ff be0b 	b.w	800298c <__retarget_lock_acquire_recursive>
 8002d76:	bf00      	nop
 8002d78:	200000d8 	.word	0x200000d8

08002d7c <__malloc_unlock>:
 8002d7c:	4801      	ldr	r0, [pc, #4]	; (8002d84 <__malloc_unlock+0x8>)
 8002d7e:	f7ff be06 	b.w	800298e <__retarget_lock_release_recursive>
 8002d82:	bf00      	nop
 8002d84:	200000d8 	.word	0x200000d8

08002d88 <_read_r>:
 8002d88:	b538      	push	{r3, r4, r5, lr}
 8002d8a:	4d07      	ldr	r5, [pc, #28]	; (8002da8 <_read_r+0x20>)
 8002d8c:	4604      	mov	r4, r0
 8002d8e:	4608      	mov	r0, r1
 8002d90:	4611      	mov	r1, r2
 8002d92:	2200      	movs	r2, #0
 8002d94:	602a      	str	r2, [r5, #0]
 8002d96:	461a      	mov	r2, r3
 8002d98:	f7fd fd68 	bl	800086c <_read>
 8002d9c:	1c43      	adds	r3, r0, #1
 8002d9e:	d102      	bne.n	8002da6 <_read_r+0x1e>
 8002da0:	682b      	ldr	r3, [r5, #0]
 8002da2:	b103      	cbz	r3, 8002da6 <_read_r+0x1e>
 8002da4:	6023      	str	r3, [r4, #0]
 8002da6:	bd38      	pop	{r3, r4, r5, pc}
 8002da8:	200000e4 	.word	0x200000e4

08002dac <_init>:
 8002dac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dae:	bf00      	nop
 8002db0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002db2:	bc08      	pop	{r3}
 8002db4:	469e      	mov	lr, r3
 8002db6:	4770      	bx	lr

08002db8 <_fini>:
 8002db8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8002dba:	bf00      	nop
 8002dbc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8002dbe:	bc08      	pop	{r3}
 8002dc0:	469e      	mov	lr, r3
 8002dc2:	4770      	bx	lr
